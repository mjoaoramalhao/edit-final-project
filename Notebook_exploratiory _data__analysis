{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "7cc1682a-c97c-45e0-b1b7-ab537888bf68",
   "metadata": {},
   "source": [
    "## Case Study - Discounts for close to expiration products (Pink Labels)\n",
    "Carlos Silva | Maria João Fernandes | Mariana Gabriel | Marina Azevedo | Renato Flores\n",
    "<a id='toc'></a>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "59823df4-6df9-4197-b2b0-cc973d90869d",
   "metadata": {},
   "source": [
    "### Indice\n",
    "* [1. Importar as bibliotecas e o dataset](#importar)<br>\n",
    "    * [1.1. Importar as bibliotecas](#lib)<br>\n",
    "    * [1.2. Importar e integrar os dados](#data)<br>\n",
    "* [2. Análise Exploratória dos dados](#EDA) <br>\n",
    "    * [2.1. Exploração Básica](#basica)<br>\n",
    "    * [2.2. Exploração Estatística](#statist)<br>\n",
    "       * [2.2.1. Variáveis Numéricas](#num)<br>\n",
    "       * [2.2.2. Variáveis Categóricas](#cat)<br>\n",
    "    * [2.3. Exploração Visual](#visual)<br>\n",
    "       * [2.3.1. Variáveis Numéricas](#num3)<br>\n",
    "          * [2.3.1.1 Analise e Tratamento dos Outliers](#out)<br>\n",
    "     * [2.4. Análise Detalhada](#det)<br>\n",
    "       * [2.3.2. Variáveis Categóricas](#cat3)<br>\n",
    "* [3. Pré-processamento de dados](#preprocessing) <br>\n",
    "    * [3.1. Limpeza de Dados](#dados)<br>\n",
    "        * [3.1.1. Missing Values](#values)<br>   \n",
    "          * [3.1.1.1. Tratamento Missing Values da variável oldpvp](#oldpvp)<br>\n",
    "          * [3.1.1.2. Tratamento Missing Values da variável weight](#weight)<br>\n",
    "          * [3.1.1.3. Tratamento Missing Values da variável sell-date](sell)<br>\n",
    "          * [3.1.1.4. Tratamento Missing Values da variável selling_square_ft](selling)<br>\n",
    "          * [3.1.1.5. Tratamento Missing Values da variável discount](discount)<br>\n",
    "          * [3.1.1.6. Tratamento Missing Values da variável new_pvp](new_pvp)<br>\n",
    "    * [3.2. Criação de Variáveis Dummies](#dummies)<br>\n",
    "* [4. Exportar ficheiro csv](#cvs) <br>\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "01b3458e-ffd1-4d2b-a43c-311978472212",
   "metadata": {},
   "source": [
    "O case study analisado em seguida provem da necessidade levantada por parte de um cliente de compreender a forma mais eficiente para minimizar perdas e aumentar a conversão de produtos próximos da data de validade (produtos com etiquetas rosas). Desta forma, o objetivo principal desta analise é desenvolver um estudo que permita maximizar o lucro obtido nas vendas dos produtos, evitando de igual forma o desperdício financeiro para a empresa, apresentando, assim, uma solução viável ao cliente para a rentabilidade do negócio.\n",
    "\n",
    "Neste fase inicial do projeto, irão ser aplicadas técnicas de exploração de dados e pré-processamentos de dados para explorar o dataset fornecido pelo cliente e identificar os dados relevantes para o objetivo principal do projeto.\n",
    "\n",
    "O dataset contém informações detalhadas sobre os produtos vendidos pelo cliente, incluindo preço original do produto e preço final, quantidades de etiquetas aplicadas, data de expiração, descontos aplicados, data em que o produto recebeu a etiqueta rosa adesão, data em que o produto foi vendido, lucro por unidade e margem, marcas dos produtos, indicador de venda e informações das lojas (id, área, localidade e tipo).\n",
    "\n",
    "Desta forma, os objetivos desta analise exploratória de dados será:\n",
    "\n",
    "- Explorar e compreender o dataset fornecido pelo cliente;\n",
    "- Analisar e compreender os padrões de seleção dos clientes;\n",
    "- Identificarr oportunidades de otimização e gerar insights relevantes;"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a77af056-2ae2-4f24-966c-94f4268e472e",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block\" style=\"background-color:#AEC6CF; border: 1px solid #003366\">\n",
    "<a id='importar'>\n",
    "<font color = '#003366'> \n",
    "    \n",
    "# 1. Importar as bibliotecas e o dataset</font>\n",
    "</a>\n",
    "    \n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "353d0829-d6bc-41f9-865e-bfd23c07140c",
   "metadata": {},
   "source": [
    "<div style=\"background-color: '#006400'; padding: 15px; border: 1px solid #003366\";\">\n",
    "    <a id='lib'></a>\n",
    "    <h2 style=\"color: #003366; margin: 0;\">1.1. Importar as bibliotecas</h2>\n",
    "</div>\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "8585cfd1-057e-4c74-b3dd-2a81b43092a6",
   "metadata": {},
   "outputs": [],
   "source": [
    "import warnings\n",
    "warnings.filterwarnings('ignore')  # para ignorar os avisos\n",
    "\n",
    "#Importar as bibliotecas necessárias\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "from sklearn.impute import KNNImputer\n",
    "from datetime import datetime\n",
    "from sklearn.cluster import KMeans\n",
    "from sklearn.metrics.pairwise import euclidean_distances\n",
    "from IPython.display import display\n",
    "from rich import print"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "56338617-4541-4cc5-9f25-faf036acca2a",
   "metadata": {},
   "source": [
    "<div style=\"background-color: '#006400'; padding: 15px; border: 1px solid #003366\";\">\n",
    "    <a id='data'></a>\n",
    "    <h2 style=\"color: #003366; margin: 0;\">1.2. Importar e integrar os dados</h2>\n",
    "</div>\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "b598b0f7-8f8a-4422-9df1-335b05d702b0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>idstore</th>\n",
       "      <th>sku</th>\n",
       "      <th>brand</th>\n",
       "      <th>oldpvp</th>\n",
       "      <th>new_pvp (discount)</th>\n",
       "      <th>labelqty</th>\n",
       "      <th>weight (g)</th>\n",
       "      <th>Payment_method</th>\n",
       "      <th>Margin (%)</th>\n",
       "      <th>Profit (€)</th>\n",
       "      <th>perc_expiring_sku</th>\n",
       "      <th>expiring_date</th>\n",
       "      <th>labelling_date</th>\n",
       "      <th>sell_date</th>\n",
       "      <th>sold</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Marca  1</td>\n",
       "      <td>4.22</td>\n",
       "      <td>2.11 (0.50)</td>\n",
       "      <td>1</td>\n",
       "      <td>260</td>\n",
       "      <td>Card</td>\n",
       "      <td>16</td>\n",
       "      <td>0.3376</td>\n",
       "      <td>0.010050</td>\n",
       "      <td>03/10/2021</td>\n",
       "      <td>2021-10-01</td>\n",
       "      <td>2021-10-02</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Marca 1</td>\n",
       "      <td>3.96</td>\n",
       "      <td>1.98 (0.50)</td>\n",
       "      <td>1</td>\n",
       "      <td>260</td>\n",
       "      <td></td>\n",
       "      <td>16</td>\n",
       "      <td>0.3168</td>\n",
       "      <td>0.005025</td>\n",
       "      <td>02/10/2021</td>\n",
       "      <td>2021-10-01</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Marca  1</td>\n",
       "      <td>4.74</td>\n",
       "      <td>2.37 (0.50)</td>\n",
       "      <td>1</td>\n",
       "      <td>260</td>\n",
       "      <td>Cash</td>\n",
       "      <td>16</td>\n",
       "      <td>0.3792</td>\n",
       "      <td>0.010050</td>\n",
       "      <td>03/10/2021</td>\n",
       "      <td>2021-10-01</td>\n",
       "      <td>2021-10-03</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Marca 1</td>\n",
       "      <td>4.2</td>\n",
       "      <td>2.1 (0.50)</td>\n",
       "      <td>1</td>\n",
       "      <td>260</td>\n",
       "      <td>Card</td>\n",
       "      <td>16</td>\n",
       "      <td>0.3360</td>\n",
       "      <td>0.010050</td>\n",
       "      <td>03/10/2021</td>\n",
       "      <td>2021-10-01</td>\n",
       "      <td>2021-10-02</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Marca  1</td>\n",
       "      <td>4.62</td>\n",
       "      <td>2.31 (0.50)</td>\n",
       "      <td>1</td>\n",
       "      <td>260</td>\n",
       "      <td>Cash</td>\n",
       "      <td>16</td>\n",
       "      <td>0.3696</td>\n",
       "      <td>0.010050</td>\n",
       "      <td>03/10/2021</td>\n",
       "      <td>2021-10-01</td>\n",
       "      <td>2021-10-03</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>150049</th>\n",
       "      <td>193</td>\n",
       "      <td>318</td>\n",
       "      <td>Marca 2</td>\n",
       "      <td>2.49</td>\n",
       "      <td>1.24 (0.50)</td>\n",
       "      <td>1</td>\n",
       "      <td>97</td>\n",
       "      <td></td>\n",
       "      <td>11</td>\n",
       "      <td>0.1364</td>\n",
       "      <td>0.100629</td>\n",
       "      <td>19-10-2021</td>\n",
       "      <td>2021-10-03</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>150050</th>\n",
       "      <td>203</td>\n",
       "      <td>318</td>\n",
       "      <td>Marca2</td>\n",
       "      <td>2.49</td>\n",
       "      <td>1.24 (0.50)</td>\n",
       "      <td>1</td>\n",
       "      <td>97</td>\n",
       "      <td>Cash</td>\n",
       "      <td>11</td>\n",
       "      <td>0.1364</td>\n",
       "      <td>0.113208</td>\n",
       "      <td>19-10-2021</td>\n",
       "      <td>2021-10-01</td>\n",
       "      <td>2021-10-02</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>150051</th>\n",
       "      <td>203</td>\n",
       "      <td>318</td>\n",
       "      <td>Marca2</td>\n",
       "      <td>2.49</td>\n",
       "      <td>1.24 (0.50)</td>\n",
       "      <td>1</td>\n",
       "      <td>97</td>\n",
       "      <td>Cash</td>\n",
       "      <td>11</td>\n",
       "      <td>0.1364</td>\n",
       "      <td>0.113208</td>\n",
       "      <td>19-10-2021</td>\n",
       "      <td>2021-10-01</td>\n",
       "      <td>2021-10-02</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>150052</th>\n",
       "      <td>139</td>\n",
       "      <td>319</td>\n",
       "      <td>Marca  24</td>\n",
       "      <td>3.49</td>\n",
       "      <td>2.44 (0.30)</td>\n",
       "      <td>1</td>\n",
       "      <td>141</td>\n",
       "      <td>Cash</td>\n",
       "      <td>19</td>\n",
       "      <td>0.4636</td>\n",
       "      <td>0.092437</td>\n",
       "      <td>17/10/2021</td>\n",
       "      <td>2021-10-06</td>\n",
       "      <td>2021-10-11</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>150053</th>\n",
       "      <td>139</td>\n",
       "      <td>319</td>\n",
       "      <td>Marca 24</td>\n",
       "      <td>3.49</td>\n",
       "      <td>2.44 (0.30)</td>\n",
       "      <td>1</td>\n",
       "      <td>141</td>\n",
       "      <td></td>\n",
       "      <td>19</td>\n",
       "      <td>0.4636</td>\n",
       "      <td>0.092437</td>\n",
       "      <td>17/10/2021</td>\n",
       "      <td>2021-10-06</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>150054 rows × 15 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        idstore  sku      brand oldpvp new_pvp (discount)  labelqty  \\\n",
       "0             1    1   Marca  1   4.22        2.11 (0.50)         1   \n",
       "1             1    1    Marca 1   3.96        1.98 (0.50)         1   \n",
       "2             1    1   Marca  1   4.74        2.37 (0.50)         1   \n",
       "3             1    1    Marca 1    4.2         2.1 (0.50)         1   \n",
       "4             1    1   Marca  1   4.62        2.31 (0.50)         1   \n",
       "...         ...  ...        ...    ...                ...       ...   \n",
       "150049      193  318    Marca 2   2.49        1.24 (0.50)         1   \n",
       "150050      203  318     Marca2   2.49        1.24 (0.50)         1   \n",
       "150051      203  318     Marca2   2.49        1.24 (0.50)         1   \n",
       "150052      139  319  Marca  24   3.49        2.44 (0.30)         1   \n",
       "150053      139  319   Marca 24   3.49        2.44 (0.30)         1   \n",
       "\n",
       "       weight (g) Payment_method  Margin (%)  Profit (€)  perc_expiring_sku  \\\n",
       "0             260           Card          16      0.3376           0.010050   \n",
       "1             260                         16      0.3168           0.005025   \n",
       "2             260           Cash          16      0.3792           0.010050   \n",
       "3             260           Card          16      0.3360           0.010050   \n",
       "4             260           Cash          16      0.3696           0.010050   \n",
       "...           ...            ...         ...         ...                ...   \n",
       "150049         97                         11      0.1364           0.100629   \n",
       "150050         97           Cash          11      0.1364           0.113208   \n",
       "150051         97           Cash          11      0.1364           0.113208   \n",
       "150052        141           Cash          19      0.4636           0.092437   \n",
       "150053        141                         19      0.4636           0.092437   \n",
       "\n",
       "       expiring_date labelling_date   sell_date  sold  \n",
       "0         03/10/2021     2021-10-01  2021-10-02   1.0  \n",
       "1         02/10/2021     2021-10-01         NaN   0.0  \n",
       "2         03/10/2021     2021-10-01  2021-10-03   1.0  \n",
       "3         03/10/2021     2021-10-01  2021-10-02   1.0  \n",
       "4         03/10/2021     2021-10-01  2021-10-03   NaN  \n",
       "...              ...            ...         ...   ...  \n",
       "150049    19-10-2021     2021-10-03         NaN   0.0  \n",
       "150050    19-10-2021     2021-10-01  2021-10-02   1.0  \n",
       "150051    19-10-2021     2021-10-01  2021-10-02   1.0  \n",
       "150052    17/10/2021     2021-10-06  2021-10-11   1.0  \n",
       "150053    17/10/2021     2021-10-06         NaN   0.0  \n",
       "\n",
       "[150054 rows x 15 columns]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#MJ: LTP EDIT Practical Case\\2024 EDIT LTP__PraticalCase\\LTP_PraticalCase Dataset\\Data_labels.csv\n",
    "#Mariana: Data_labels.csv\n",
    "#Carlos:\n",
    "#Marina:C:\\Users\\Marina Azevedo\\Desktop\\DataScienceBusinessAnalytics\\10. Applied Practice\\2024 EDIT LTP__PraticalCase\\LTP_PraticalCase Dataset\\Data_labels.csv\n",
    "#Renato:\n",
    "\n",
    "#Dados das labels\n",
    "labels = pd.read_csv(r\"Data_labels.csv\")\n",
    "labels"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "323c09fc-f3f9-4bdf-a245-1e7ea30d5c84",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(150054, 15)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Verificar as dimensões do array \n",
    "labels.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "963e0b29-8a2f-49ca-9a28-3bfd08c9b09e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>idstore</th>\n",
       "      <th>type</th>\n",
       "      <th>selling_square_ft</th>\n",
       "      <th>district</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>Large</td>\n",
       "      <td>4762.0</td>\n",
       "      <td>Évora</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>Large</td>\n",
       "      <td>12358.0</td>\n",
       "      <td>Bragança</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>Large</td>\n",
       "      <td>16159.0</td>\n",
       "      <td>Lisboa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>Large</td>\n",
       "      <td>17903.0</td>\n",
       "      <td>Porto</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>Large</td>\n",
       "      <td>16179.0</td>\n",
       "      <td>Coimbra</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   idstore   type  selling_square_ft  district\n",
       "0        1  Large             4762.0     Évora\n",
       "1        2  Large            12358.0  Bragança\n",
       "2        3  Large            16159.0    Lisboa\n",
       "3        4  Large            17903.0     Porto\n",
       "4        5  Large            16179.0   Coimbra"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Dados das stores\n",
    "store = pd.read_excel(r\"Data_store.xlsx\")\n",
    "store.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "63f98945-23cf-42d4-9e54-b119e5fa9772",
   "metadata": {},
   "source": [
    "**Conclusões:**\n",
    "\n",
    "Ao analisar-se as duas tabelas, verifica-se que a coluna \"idstore\" é o stamp de ligação entre os dois datasets.\n",
    "\n",
    "Desta forma, de modo a uniformizar os dados num só dataset e a facilitar a análise dos dados, será utilizada a coluna \"idstore\" para relacionar os datasets."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "22397303-c0ef-480c-aa93-7ec8e1c71eb0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>idstore</th>\n",
       "      <th>sku</th>\n",
       "      <th>brand</th>\n",
       "      <th>oldpvp</th>\n",
       "      <th>new_pvp (discount)</th>\n",
       "      <th>labelqty</th>\n",
       "      <th>weight (g)</th>\n",
       "      <th>Payment_method</th>\n",
       "      <th>Margin (%)</th>\n",
       "      <th>Profit (€)</th>\n",
       "      <th>perc_expiring_sku</th>\n",
       "      <th>expiring_date</th>\n",
       "      <th>labelling_date</th>\n",
       "      <th>sell_date</th>\n",
       "      <th>sold</th>\n",
       "      <th>type</th>\n",
       "      <th>selling_square_ft</th>\n",
       "      <th>district</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Marca  1</td>\n",
       "      <td>4.22</td>\n",
       "      <td>2.11 (0.50)</td>\n",
       "      <td>1</td>\n",
       "      <td>260</td>\n",
       "      <td>Card</td>\n",
       "      <td>16</td>\n",
       "      <td>0.3376</td>\n",
       "      <td>0.010050</td>\n",
       "      <td>03/10/2021</td>\n",
       "      <td>2021-10-01</td>\n",
       "      <td>2021-10-02</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Large</td>\n",
       "      <td>4762.0</td>\n",
       "      <td>Évora</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Marca 1</td>\n",
       "      <td>3.96</td>\n",
       "      <td>1.98 (0.50)</td>\n",
       "      <td>1</td>\n",
       "      <td>260</td>\n",
       "      <td></td>\n",
       "      <td>16</td>\n",
       "      <td>0.3168</td>\n",
       "      <td>0.005025</td>\n",
       "      <td>02/10/2021</td>\n",
       "      <td>2021-10-01</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Large</td>\n",
       "      <td>4762.0</td>\n",
       "      <td>Évora</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Marca  1</td>\n",
       "      <td>4.74</td>\n",
       "      <td>2.37 (0.50)</td>\n",
       "      <td>1</td>\n",
       "      <td>260</td>\n",
       "      <td>Cash</td>\n",
       "      <td>16</td>\n",
       "      <td>0.3792</td>\n",
       "      <td>0.010050</td>\n",
       "      <td>03/10/2021</td>\n",
       "      <td>2021-10-01</td>\n",
       "      <td>2021-10-03</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Large</td>\n",
       "      <td>4762.0</td>\n",
       "      <td>Évora</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Marca 1</td>\n",
       "      <td>4.2</td>\n",
       "      <td>2.1 (0.50)</td>\n",
       "      <td>1</td>\n",
       "      <td>260</td>\n",
       "      <td>Card</td>\n",
       "      <td>16</td>\n",
       "      <td>0.3360</td>\n",
       "      <td>0.010050</td>\n",
       "      <td>03/10/2021</td>\n",
       "      <td>2021-10-01</td>\n",
       "      <td>2021-10-02</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Large</td>\n",
       "      <td>4762.0</td>\n",
       "      <td>Évora</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Marca  1</td>\n",
       "      <td>4.62</td>\n",
       "      <td>2.31 (0.50)</td>\n",
       "      <td>1</td>\n",
       "      <td>260</td>\n",
       "      <td>Cash</td>\n",
       "      <td>16</td>\n",
       "      <td>0.3696</td>\n",
       "      <td>0.010050</td>\n",
       "      <td>03/10/2021</td>\n",
       "      <td>2021-10-01</td>\n",
       "      <td>2021-10-03</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Large</td>\n",
       "      <td>4762.0</td>\n",
       "      <td>Évora</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   idstore  sku     brand oldpvp new_pvp (discount)  labelqty weight (g)  \\\n",
       "0        1    1  Marca  1   4.22        2.11 (0.50)         1        260   \n",
       "1        1    1   Marca 1   3.96        1.98 (0.50)         1        260   \n",
       "2        1    1  Marca  1   4.74        2.37 (0.50)         1        260   \n",
       "3        1    1   Marca 1    4.2         2.1 (0.50)         1        260   \n",
       "4        1    1  Marca  1   4.62        2.31 (0.50)         1        260   \n",
       "\n",
       "  Payment_method  Margin (%)  Profit (€)  perc_expiring_sku expiring_date  \\\n",
       "0           Card          16      0.3376           0.010050    03/10/2021   \n",
       "1                         16      0.3168           0.005025    02/10/2021   \n",
       "2           Cash          16      0.3792           0.010050    03/10/2021   \n",
       "3           Card          16      0.3360           0.010050    03/10/2021   \n",
       "4           Cash          16      0.3696           0.010050    03/10/2021   \n",
       "\n",
       "  labelling_date   sell_date  sold   type  selling_square_ft district  \n",
       "0     2021-10-01  2021-10-02   1.0  Large             4762.0    Évora  \n",
       "1     2021-10-01         NaN   0.0  Large             4762.0    Évora  \n",
       "2     2021-10-01  2021-10-03   1.0  Large             4762.0    Évora  \n",
       "3     2021-10-01  2021-10-02   1.0  Large             4762.0    Évora  \n",
       "4     2021-10-01  2021-10-03   NaN  Large             4762.0    Évora  "
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Unir os dois datasets a partir da coluna \"idstore\"\n",
    "df = labels.merge(store, on = 'idstore')\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "5b92b7fe-36dd-4252-b6f3-96d34aa7df41",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 150054 entries, 0 to 150053\n",
      "Data columns (total 18 columns):\n",
      " #   Column              Non-Null Count   Dtype  \n",
      "---  ------              --------------   -----  \n",
      " 0   idstore             150054 non-null  int64  \n",
      " 1   sku                 150054 non-null  int64  \n",
      " 2   brand               150054 non-null  object \n",
      " 3   oldpvp              150032 non-null  object \n",
      " 4   new_pvp (discount)  150026 non-null  object \n",
      " 5   labelqty            150054 non-null  int64  \n",
      " 6   weight (g)          150050 non-null  object \n",
      " 7   Payment_method      150054 non-null  object \n",
      " 8   Margin (%)          150054 non-null  int64  \n",
      " 9   Profit (€)          150054 non-null  float64\n",
      " 10  perc_expiring_sku   149929 non-null  float64\n",
      " 11  expiring_date       150054 non-null  object \n",
      " 12  labelling_date      150054 non-null  object \n",
      " 13  sell_date           80511 non-null   object \n",
      " 14  sold                149940 non-null  float64\n",
      " 15  type                150054 non-null  object \n",
      " 16  selling_square_ft   139275 non-null  float64\n",
      " 17  district            150054 non-null  object \n",
      "dtypes: float64(4), int64(4), object(10)\n",
      "memory usage: 20.6+ MB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48f5b01e-361c-406f-80b7-40aa549d0feb",
   "metadata": {},
   "source": [
    "**Conclusões:**\n",
    "\n",
    "Após uma primeira análise, verificou-se que o dataset é composto por:\n",
    "- 8 Variáveis numéricas (4 - float64 & 4 - int64). \n",
    "- 4 Variavéis categóricas - \"Brand\", \"Payment_method\", \"type\", \"district\"\n",
    "- A variável \"Sold\" é booleana (variável target), com missing values\n",
    "- 3 variáveis temporais ( expiring_date; labelling_date; sell_date)\n",
    "\n",
    "*Próximos passos:*\n",
    "- Limpeza do dataset;\n",
    "- Ajuste dos Dtypes para melhor utilização das variáveis;\n",
    "- Desconsideração das variáveis idstore e sku como numéricas uma vez que permitem a identificação da loja e produto."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3a528ca5-670a-43ab-b5bf-7704427c48d5",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block\" style=\"background-color:#AEC6CF; border: 1px solid #003366\">\n",
    "<a id='EDA'>\n",
    "<font color = '#003366'> \n",
    "    \n",
    "# 2. Análise Exploratória dos dados</font>\n",
    "</a>\n",
    "    \n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "13fc4a10-df67-4531-a0cb-b7c6606e48de",
   "metadata": {},
   "source": [
    "<div style=\"background-color: '#006400'; padding: 15px; border: 1px solid #003366\";\">\n",
    "    <a id='basica'></a>\n",
    "    <h2 style=\"color: #003366; margin: 0;\">2.1. Exploração Básica</h2>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "e98f29bf-e5d8-4fc5-9e81-f8f75984ec73",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>idstore</th>\n",
       "      <th>sku</th>\n",
       "      <th>brand</th>\n",
       "      <th>oldpvp</th>\n",
       "      <th>new_pvp (discount)</th>\n",
       "      <th>labelqty</th>\n",
       "      <th>weight (g)</th>\n",
       "      <th>Payment_method</th>\n",
       "      <th>Margin (%)</th>\n",
       "      <th>Profit (€)</th>\n",
       "      <th>perc_expiring_sku</th>\n",
       "      <th>expiring_date</th>\n",
       "      <th>labelling_date</th>\n",
       "      <th>sell_date</th>\n",
       "      <th>sold</th>\n",
       "      <th>type</th>\n",
       "      <th>selling_square_ft</th>\n",
       "      <th>district</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Marca  1</td>\n",
       "      <td>4.22</td>\n",
       "      <td>2.11 (0.50)</td>\n",
       "      <td>1</td>\n",
       "      <td>260</td>\n",
       "      <td>Card</td>\n",
       "      <td>16</td>\n",
       "      <td>0.3376</td>\n",
       "      <td>0.010050</td>\n",
       "      <td>03/10/2021</td>\n",
       "      <td>2021-10-01</td>\n",
       "      <td>2021-10-02</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Large</td>\n",
       "      <td>4762.0</td>\n",
       "      <td>Évora</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Marca 1</td>\n",
       "      <td>3.96</td>\n",
       "      <td>1.98 (0.50)</td>\n",
       "      <td>1</td>\n",
       "      <td>260</td>\n",
       "      <td></td>\n",
       "      <td>16</td>\n",
       "      <td>0.3168</td>\n",
       "      <td>0.005025</td>\n",
       "      <td>02/10/2021</td>\n",
       "      <td>2021-10-01</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Large</td>\n",
       "      <td>4762.0</td>\n",
       "      <td>Évora</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Marca  1</td>\n",
       "      <td>4.74</td>\n",
       "      <td>2.37 (0.50)</td>\n",
       "      <td>1</td>\n",
       "      <td>260</td>\n",
       "      <td>Cash</td>\n",
       "      <td>16</td>\n",
       "      <td>0.3792</td>\n",
       "      <td>0.010050</td>\n",
       "      <td>03/10/2021</td>\n",
       "      <td>2021-10-01</td>\n",
       "      <td>2021-10-03</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Large</td>\n",
       "      <td>4762.0</td>\n",
       "      <td>Évora</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Marca 1</td>\n",
       "      <td>4.2</td>\n",
       "      <td>2.1 (0.50)</td>\n",
       "      <td>1</td>\n",
       "      <td>260</td>\n",
       "      <td>Card</td>\n",
       "      <td>16</td>\n",
       "      <td>0.3360</td>\n",
       "      <td>0.010050</td>\n",
       "      <td>03/10/2021</td>\n",
       "      <td>2021-10-01</td>\n",
       "      <td>2021-10-02</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Large</td>\n",
       "      <td>4762.0</td>\n",
       "      <td>Évora</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Marca  1</td>\n",
       "      <td>4.62</td>\n",
       "      <td>2.31 (0.50)</td>\n",
       "      <td>1</td>\n",
       "      <td>260</td>\n",
       "      <td>Cash</td>\n",
       "      <td>16</td>\n",
       "      <td>0.3696</td>\n",
       "      <td>0.010050</td>\n",
       "      <td>03/10/2021</td>\n",
       "      <td>2021-10-01</td>\n",
       "      <td>2021-10-03</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Large</td>\n",
       "      <td>4762.0</td>\n",
       "      <td>Évora</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>150049</th>\n",
       "      <td>193</td>\n",
       "      <td>318</td>\n",
       "      <td>Marca 2</td>\n",
       "      <td>2.49</td>\n",
       "      <td>1.24 (0.50)</td>\n",
       "      <td>1</td>\n",
       "      <td>97</td>\n",
       "      <td></td>\n",
       "      <td>11</td>\n",
       "      <td>0.1364</td>\n",
       "      <td>0.100629</td>\n",
       "      <td>19-10-2021</td>\n",
       "      <td>2021-10-03</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Medium</td>\n",
       "      <td>5048.0</td>\n",
       "      <td>Viseu</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>150050</th>\n",
       "      <td>203</td>\n",
       "      <td>318</td>\n",
       "      <td>Marca2</td>\n",
       "      <td>2.49</td>\n",
       "      <td>1.24 (0.50)</td>\n",
       "      <td>1</td>\n",
       "      <td>97</td>\n",
       "      <td>Cash</td>\n",
       "      <td>11</td>\n",
       "      <td>0.1364</td>\n",
       "      <td>0.113208</td>\n",
       "      <td>19-10-2021</td>\n",
       "      <td>2021-10-01</td>\n",
       "      <td>2021-10-02</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Medium</td>\n",
       "      <td>9370.0</td>\n",
       "      <td>Faro</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>150051</th>\n",
       "      <td>203</td>\n",
       "      <td>318</td>\n",
       "      <td>Marca2</td>\n",
       "      <td>2.49</td>\n",
       "      <td>1.24 (0.50)</td>\n",
       "      <td>1</td>\n",
       "      <td>97</td>\n",
       "      <td>Cash</td>\n",
       "      <td>11</td>\n",
       "      <td>0.1364</td>\n",
       "      <td>0.113208</td>\n",
       "      <td>19-10-2021</td>\n",
       "      <td>2021-10-01</td>\n",
       "      <td>2021-10-02</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Medium</td>\n",
       "      <td>9370.0</td>\n",
       "      <td>Faro</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>150052</th>\n",
       "      <td>139</td>\n",
       "      <td>319</td>\n",
       "      <td>Marca  24</td>\n",
       "      <td>3.49</td>\n",
       "      <td>2.44 (0.30)</td>\n",
       "      <td>1</td>\n",
       "      <td>141</td>\n",
       "      <td>Cash</td>\n",
       "      <td>19</td>\n",
       "      <td>0.4636</td>\n",
       "      <td>0.092437</td>\n",
       "      <td>17/10/2021</td>\n",
       "      <td>2021-10-06</td>\n",
       "      <td>2021-10-11</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Small</td>\n",
       "      <td>1061.0</td>\n",
       "      <td>Portalegre</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>150053</th>\n",
       "      <td>139</td>\n",
       "      <td>319</td>\n",
       "      <td>Marca 24</td>\n",
       "      <td>3.49</td>\n",
       "      <td>2.44 (0.30)</td>\n",
       "      <td>1</td>\n",
       "      <td>141</td>\n",
       "      <td></td>\n",
       "      <td>19</td>\n",
       "      <td>0.4636</td>\n",
       "      <td>0.092437</td>\n",
       "      <td>17/10/2021</td>\n",
       "      <td>2021-10-06</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Small</td>\n",
       "      <td>1061.0</td>\n",
       "      <td>Portalegre</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>150054 rows × 18 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        idstore  sku      brand oldpvp new_pvp (discount)  labelqty  \\\n",
       "0             1    1   Marca  1   4.22        2.11 (0.50)         1   \n",
       "1             1    1    Marca 1   3.96        1.98 (0.50)         1   \n",
       "2             1    1   Marca  1   4.74        2.37 (0.50)         1   \n",
       "3             1    1    Marca 1    4.2         2.1 (0.50)         1   \n",
       "4             1    1   Marca  1   4.62        2.31 (0.50)         1   \n",
       "...         ...  ...        ...    ...                ...       ...   \n",
       "150049      193  318    Marca 2   2.49        1.24 (0.50)         1   \n",
       "150050      203  318     Marca2   2.49        1.24 (0.50)         1   \n",
       "150051      203  318     Marca2   2.49        1.24 (0.50)         1   \n",
       "150052      139  319  Marca  24   3.49        2.44 (0.30)         1   \n",
       "150053      139  319   Marca 24   3.49        2.44 (0.30)         1   \n",
       "\n",
       "       weight (g) Payment_method  Margin (%)  Profit (€)  perc_expiring_sku  \\\n",
       "0             260           Card          16      0.3376           0.010050   \n",
       "1             260                         16      0.3168           0.005025   \n",
       "2             260           Cash          16      0.3792           0.010050   \n",
       "3             260           Card          16      0.3360           0.010050   \n",
       "4             260           Cash          16      0.3696           0.010050   \n",
       "...           ...            ...         ...         ...                ...   \n",
       "150049         97                         11      0.1364           0.100629   \n",
       "150050         97           Cash          11      0.1364           0.113208   \n",
       "150051         97           Cash          11      0.1364           0.113208   \n",
       "150052        141           Cash          19      0.4636           0.092437   \n",
       "150053        141                         19      0.4636           0.092437   \n",
       "\n",
       "       expiring_date labelling_date   sell_date  sold    type  \\\n",
       "0         03/10/2021     2021-10-01  2021-10-02   1.0   Large   \n",
       "1         02/10/2021     2021-10-01         NaN   0.0   Large   \n",
       "2         03/10/2021     2021-10-01  2021-10-03   1.0   Large   \n",
       "3         03/10/2021     2021-10-01  2021-10-02   1.0   Large   \n",
       "4         03/10/2021     2021-10-01  2021-10-03   NaN   Large   \n",
       "...              ...            ...         ...   ...     ...   \n",
       "150049    19-10-2021     2021-10-03         NaN   0.0  Medium   \n",
       "150050    19-10-2021     2021-10-01  2021-10-02   1.0  Medium   \n",
       "150051    19-10-2021     2021-10-01  2021-10-02   1.0  Medium   \n",
       "150052    17/10/2021     2021-10-06  2021-10-11   1.0   Small   \n",
       "150053    17/10/2021     2021-10-06         NaN   0.0   Small   \n",
       "\n",
       "        selling_square_ft    district  \n",
       "0                  4762.0       Évora  \n",
       "1                  4762.0       Évora  \n",
       "2                  4762.0       Évora  \n",
       "3                  4762.0       Évora  \n",
       "4                  4762.0       Évora  \n",
       "...                   ...         ...  \n",
       "150049             5048.0       Viseu  \n",
       "150050             9370.0        Faro  \n",
       "150051             9370.0        Faro  \n",
       "150052             1061.0  Portalegre  \n",
       "150053             1061.0  Portalegre  \n",
       "\n",
       "[150054 rows x 18 columns]"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "1f4c2c5f-6f0f-4498-a612-f965e0c9459c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 150054 entries, 0 to 150053\n",
      "Data columns (total 18 columns):\n",
      " #   Column              Non-Null Count   Dtype  \n",
      "---  ------              --------------   -----  \n",
      " 0   idstore             150054 non-null  int64  \n",
      " 1   sku                 150054 non-null  int64  \n",
      " 2   brand               150054 non-null  object \n",
      " 3   oldpvp              150032 non-null  object \n",
      " 4   new_pvp (discount)  150026 non-null  object \n",
      " 5   labelqty            150054 non-null  int64  \n",
      " 6   weight (g)          150050 non-null  object \n",
      " 7   Payment_method      150054 non-null  object \n",
      " 8   Margin (%)          150054 non-null  int64  \n",
      " 9   Profit (€)          150054 non-null  float64\n",
      " 10  perc_expiring_sku   149929 non-null  float64\n",
      " 11  expiring_date       150054 non-null  object \n",
      " 12  labelling_date      150054 non-null  object \n",
      " 13  sell_date           80511 non-null   object \n",
      " 14  sold                149940 non-null  float64\n",
      " 15  type                150054 non-null  object \n",
      " 16  selling_square_ft   139275 non-null  float64\n",
      " 17  district            150054 non-null  object \n",
      "dtypes: float64(4), int64(4), object(10)\n",
      "memory usage: 20.6+ MB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "1aa66397-e9f8-47b8-beee-7d71ee97f610",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "oldpvp                   22\n",
       "new_pvp (discount)       28\n",
       "weight (g)                4\n",
       "perc_expiring_sku       125\n",
       "sell_date             69543\n",
       "sold                    114\n",
       "selling_square_ft     10779\n",
       "dtype: int64"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Verificar quantos missing values existem no dataframe\n",
    "missing_counts = df.isnull().sum()\n",
    "missing_counts[missing_counts > 0]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a10f413f-c248-4bcb-b430-590d73df0736",
   "metadata": {},
   "source": [
    "**Conclusões**\n",
    "- O DataFrame possui 150.054 registros e 18 colunas;\n",
    "- Algumas colunas têm valores ausentes (new_pvp (discount), perc_expiring_sku, sell_date, sold, selling_square_ft);\n",
    "\n",
    "*Próximos Passos:*\n",
    "- analisar e decidir como tratar os valores nulos;\n",
    "- ajuste dos Dtypes para melhor utilização das variáveis;\n",
    "- analise e verificação da relevância das colunas."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f4ec671d-0041-4c61-98c2-95b49bde519f",
   "metadata": {},
   "source": [
    "<div style=\"background-color: '#006400'; padding: 15px; border: 1px solid #003366\";\">\n",
    "    <a id='statist'></a>\n",
    "    <h2 style=\"color: #003366; margin: 0;\">2.2. Exploração Estatística</h2>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "440c21b0-7571-4fdb-88b3-9978fe3d0796",
   "metadata": {},
   "source": [
    "<div style=\"background-color: '#006400'; padding: 15px; border: 1px solid #003366\";\">\n",
    "    <a id='num'></a>\n",
    "    <h3 style=\"color: #003366; margin: 0;\">2.2.1. Variáveis Numéricas</h3>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "351f69ce-1aa5-4602-b12e-72fb7f586171",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>idstore</th>\n",
       "      <th>sku</th>\n",
       "      <th>labelqty</th>\n",
       "      <th>Margin (%)</th>\n",
       "      <th>Profit (€)</th>\n",
       "      <th>perc_expiring_sku</th>\n",
       "      <th>sold</th>\n",
       "      <th>selling_square_ft</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>150054.000000</td>\n",
       "      <td>150054.000000</td>\n",
       "      <td>150054.0</td>\n",
       "      <td>150054.000000</td>\n",
       "      <td>150054.000000</td>\n",
       "      <td>149929.000000</td>\n",
       "      <td>149940.000000</td>\n",
       "      <td>139275.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>139.234242</td>\n",
       "      <td>163.699422</td>\n",
       "      <td>1.0</td>\n",
       "      <td>15.824950</td>\n",
       "      <td>0.175131</td>\n",
       "      <td>0.385245</td>\n",
       "      <td>0.536568</td>\n",
       "      <td>5978.197487</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>87.056044</td>\n",
       "      <td>87.247006</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.303568</td>\n",
       "      <td>0.268439</td>\n",
       "      <td>0.223626</td>\n",
       "      <td>0.498663</td>\n",
       "      <td>5533.809602</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>0.034000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>10.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>59.000000</td>\n",
       "      <td>99.000000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>13.000000</td>\n",
       "      <td>0.124500</td>\n",
       "      <td>0.200000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1218.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>135.000000</td>\n",
       "      <td>160.000000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>17.000000</td>\n",
       "      <td>0.152900</td>\n",
       "      <td>0.333333</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>4982.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>212.000000</td>\n",
       "      <td>236.000000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>19.000000</td>\n",
       "      <td>0.222400</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>8671.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>332.000000</td>\n",
       "      <td>319.000000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>20.000000</td>\n",
       "      <td>99.900000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>25258.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             idstore            sku  labelqty     Margin (%)     Profit (€)  \\\n",
       "count  150054.000000  150054.000000  150054.0  150054.000000  150054.000000   \n",
       "mean      139.234242     163.699422       1.0      15.824950       0.175131   \n",
       "std        87.056044      87.247006       0.0       3.303568       0.268439   \n",
       "min         1.000000       1.000000       1.0      10.000000       0.034000   \n",
       "25%        59.000000      99.000000       1.0      13.000000       0.124500   \n",
       "50%       135.000000     160.000000       1.0      17.000000       0.152900   \n",
       "75%       212.000000     236.000000       1.0      19.000000       0.222400   \n",
       "max       332.000000     319.000000       1.0      20.000000      99.900000   \n",
       "\n",
       "       perc_expiring_sku           sold  selling_square_ft  \n",
       "count      149929.000000  149940.000000      139275.000000  \n",
       "mean            0.385245       0.536568        5978.197487  \n",
       "std             0.223626       0.498663        5533.809602  \n",
       "min             0.000000       0.000000          10.000000  \n",
       "25%             0.200000       0.000000        1218.000000  \n",
       "50%             0.333333       1.000000        4982.000000  \n",
       "75%             0.666667       1.000000        8671.000000  \n",
       "max             2.000000       1.000000       25258.000000  "
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Identificar as principais estatísticas descritivas das variáveis numéricas\n",
    "df.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0bd17d90-24e1-4b97-ab06-e81a9f1cedf2",
   "metadata": {},
   "source": [
    "**Conclusões:**\n",
    "\n",
    "`Idstore & Sku`\n",
    "    \n",
    "    - Não se considera para a análise estas variáveis como numéricas, uma vez que permitem a identificação da loja e do produto.\n",
    "\n",
    "`labelqty`\n",
    "   \n",
    "    - Todos os valores são 1, o que indica que esta coluna não tem variabilidade e que para cada produto no dataset há exatamente 1 etiqueta;\n",
    "    - Pode ser redundante e desnecessária para análises futuras.\n",
    "\n",
    "`Margin`\n",
    "    \n",
    "    - A margem média é de aproximadamente 15,82%, variando entre 10% e 20%:\n",
    "    - A baixa dispersão (desvio padrão ≈ 3,3) indica que as margens das vendas são relativamente homogêneas.\n",
    "\n",
    "`Profit (€)`\n",
    "    \n",
    "    - O lucro médio por transação é de 0,175€, com um máximo de 99,90€;\n",
    "    - A distribuição parece bastante assimétrica, já que a mediana (0,152€) está abaixo do máximo.\n",
    "\n",
    "`perc_expiring_sku`\n",
    "    \n",
    "    - Em média, 38,5% dos produtos em stock estão perto do vencimento;\n",
    "    - A variação é considerável (desvio padrão ≈ 22,36%), e há casos extremos em que 100% ou mais do stock está perto do vencimento (pode indicar problemas de gestão de inventário).\n",
    "\n",
    "`sold`\n",
    "    \n",
    "    - Variável binária (0 ou 1), indica se o item foi vendido ou não.\n",
    "    - A média de 0,536 indica que cerca de 53,6% dos produtos foram vendidos, enquanto o restante permaneceu no stock.\n",
    "\n",
    "`selling_square_ft`\n",
    "   \n",
    "    - A área média ocupada por produtos vendidos é de 5.978 ft², mas há uma grande variação (desvio padrão ≈ 5.533 ft²).\n",
    "    - Alguns produtos ocupam apenas 10 ft², enquanto outros chegam a 25.258 ft², o que indica diferentes tipos de produtos.\n",
    "\n",
    "*Insights gerais:*\n",
    "\n",
    "- A falta de variabilidade na coluna \"labelqty\" permite que esta coluna seja descartada;\n",
    "- A Margin (%) está relativamente estável, o que pode ser positivo para previsibilidade financeira;\n",
    "- O lucro apresenta uma grande variação, o que indica que algumas transações geram lucros elevados, enquanto outras não.\n",
    "- O alto percentual de produtos perto do vencimento pode ser um risco para a empresa.\n",
    "- A taxa de vendas de 53,6% será analisada ao detalhe para compreender os padrões de procura e otimização de stock.\n",
    "- Apesar de as variáveis \"idstore\" e \"sku\" serem representadas por números no dataset, esses números não podem ser somados ou ordenados de forma lógica, pois não existe uma relação de ordem entre as lojas ou produtos representados. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "e920cd0f-57a3-4a6e-b80d-a1a3b8d47246",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Transformação das colunas \"idstore\" e \"sku\" para strings\n",
    "df['idstore'] = df['idstore'].astype(str)\n",
    "df['sku'] = df['sku'].astype(str)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "c6f7ad43-405c-4126-b4b5-5b077615b377",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['sku'] = df['sku'].astype(str)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "63d50683-fe50-4ebf-aa9d-c272fa40f4d4",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "3f7b7180-8499-4642-8684-5ae12b5ad032",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "labelqty               0.000000\n",
       "Margin (%)            -0.374411\n",
       "Profit (€)           341.717605\n",
       "perc_expiring_sku      0.261184\n",
       "sold                  -0.146666\n",
       "selling_square_ft      1.091003\n",
       "dtype: float64"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Identificar a assimetria associada a cada variável no conjunto de dados\n",
    "df.skew(numeric_only=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "94a68bd1-e4d0-4f25-9d92-c65100c343dc",
   "metadata": {},
   "source": [
    "*NOTA:*\n",
    "\n",
    "Assimetria próxima de 0 → Distribuição aproximadamente simétrica\n",
    "\n",
    "Assimetria positiva (> 0) → Cauda à direita (mais valores baixos e poucos valores muito altos)\n",
    "\n",
    "Assimetria negativa (< 0) → Cauda à esquerda (mais valores altos e poucos valores muito baixos)\n",
    "\n",
    "\n",
    "**Interpretação da Assimetria**\n",
    "\n",
    "`dstore (0.166)`\n",
    "\n",
    "Leve assimetria positiva → A maioria das lojas tem valores de ID próximos, mas algumas têm valores muito altos.\n",
    "\n",
    "`sku (-0.072)`\n",
    "\n",
    "Assimetria quase nula → A distribuição dos SKUs é aproximadamente simétrica. Esta variável não precisa de grandes transformações para normalização.\n",
    "\n",
    "`labelqty (0.000)`\n",
    "\n",
    "Sem assimetria → O valor é constante (provavelmente todos os valores são 1). Esta variável pode ser irrelevante.\n",
    "\n",
    "`Margin (%) (-0.374)`\n",
    "\n",
    "Assimetria negativa → A maioria dos valores da margem está na faixa mais alta, com alguns valores mais baixos.  Esta variável não precisa de grandes transformações para normalização.\n",
    "\n",
    "`Profit (€) (341.72)`\n",
    "\n",
    "Assimetria extremamente positiva → A maior parte dos produtos tem lucros muito baixos, mas há poucos casos com lucros extremamente altos, criando uma cauda longa à direita. Isto pode indicar a presença de outliers.\n",
    "\n",
    "`perc_expiring_sku (0.261)`\n",
    "\n",
    "Assimetria positiva leve → A maioria dos produtos próximos do vencimento tem valores mais baixos, mas há alguns com percentuais muito elevados.\n",
    "\n",
    "`sold (-0.146)`\n",
    "\n",
    "Assimetria levemente negativa → Como esta variável é binária (0 ou 1), esta assimetria pode indicar um leve desbalanceamento, onde há mais produtos vendidos do que não vendidos.\n",
    "\n",
    "`selling_square_ft (1.091)`\n",
    "\n",
    "Assimetria positiva moderada → A maioria dos produtos ocupa uma área pequena, mas há alguns produtos que ocupam um espaço muito grande. Pode ser necessário normalizar ou usar estatísticas robustas.\n",
    "\n",
    "**Conclusões:**\n",
    "\n",
    "- O Profit (€) apresenta uma distribuição extremamente distorcida, o que pode indicar a necessidade de tratar outliers;\n",
    "- O selling_square_ft também tem uma cauda longa, o que sugerer que alguns produtos ocupam áreas desproporcionalmente grandes;\n",
    "- A margem (%) tem uma leve cauda à esquerda, pelo que deve ser analisada a possibilidade de certas categorias de produtos terem margens consistentemente menores.\n",
    "- A labelqty pode ser descartada."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "95f49e64-ace5-4eb6-84a8-b706cd89709f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "labelqty                  0.000000\n",
       "Margin (%)               -1.260135\n",
       "Profit (€)           126938.236692\n",
       "perc_expiring_sku        -0.022512\n",
       "sold                     -1.978515\n",
       "selling_square_ft         0.693269\n",
       "dtype: float64"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Identificar a curtose associada a cada variável\n",
    "df.kurt(numeric_only=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "136249b7-6478-425a-93f1-96c6394badf3",
   "metadata": {},
   "source": [
    "*NOTA:*\n",
    "\n",
    "Curtose próxima de 3 (ou curtose excessiva ≈ 0) → Mesocúrtica. distribuição semelhante à normal. Caudas e pico moderados.\n",
    "\n",
    "Curtose maior que 3 (curtose excessiva > 0) → Leptocúrtica. Distribuição mais pontuda, com um pico alto e caudas longas. Indica maior presença de valores extremos (outliers).\n",
    "\n",
    "Curtose menor que 3 (curtose excessiva < 0) → Platicúrtica. Distribuição achatada, com um pico baixo e caudas curtas. Indica menos valores extremos do que uma distribuição normal.\n",
    "\n",
    "**Interpretação da Assimetria**\n",
    "\n",
    "`Profit (€)` \n",
    "\n",
    "Extremamente leptocúrtica → Este valor absurdamente alto sugere que há outliers severos na distribuição do lucro.\n",
    "Ação recomendada: Visualizar a distribuição com boxplots e possivelmente aplicar transformação logarítmica ou remover valores extremos.\n",
    "Distribuições achatadas (platicúrticas) – Menos chance de outliers:\n",
    "\n",
    "`Margin (%)` / `perc_expiring_sku` / `sold`\n",
    "\n",
    "levemente platicútica → Essas variáveis têm caudas curtas, sugerindo que não há muitos valores extremos. Distribuição moderada.\n",
    "\n",
    "`labelqty`\n",
    "\n",
    "Mesocútica → Distribuição semelhante à normal. Esta variável pode ser irrevelante\n",
    "\n",
    "`selling_square_ft`\n",
    "\n",
    "Levemente leptocútica → Pode indicar algumas observações grandes, mas não necessariamente outliers severos.\n",
    "\n",
    "**Conclusões:**\n",
    "- Profit (€) tem um alta presença de outliers. Pode ser necessário tratamento (log transform, remoção de outliers);\n",
    "- Margin (%) / perc_expiring_sku / sold é uma distribuição achatada, com poucas caudas longas. Tem uma baixa probabilidade de outliers;\n",
    "- labelqty é uma distribuição semelhante à normal. Provavelmente irrelevante em relação a outliers;\n",
    "- selling_square_ft pode conter algumas observações grandes, mas sem indícios de outliers extremos;"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e436f2be-3653-48ae-921e-b95b17c06831",
   "metadata": {},
   "source": [
    "<div style=\"background-color: '#006400'; padding: 15px; border: 1px solid #003366\";\">\n",
    "    <a id='cat'></a>\n",
    "    <h3 style=\"color: #003366; margin: 0;\">2.2.2. Variáveis Categóricas</h3>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "67598aa5-db05-4ced-801b-cc04e66d2182",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>idstore</th>\n",
       "      <th>sku</th>\n",
       "      <th>brand</th>\n",
       "      <th>oldpvp</th>\n",
       "      <th>new_pvp (discount)</th>\n",
       "      <th>weight (g)</th>\n",
       "      <th>Payment_method</th>\n",
       "      <th>expiring_date</th>\n",
       "      <th>labelling_date</th>\n",
       "      <th>sell_date</th>\n",
       "      <th>type</th>\n",
       "      <th>district</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>150054</td>\n",
       "      <td>150054</td>\n",
       "      <td>150054</td>\n",
       "      <td>150032</td>\n",
       "      <td>150026</td>\n",
       "      <td>150050</td>\n",
       "      <td>150054</td>\n",
       "      <td>150054</td>\n",
       "      <td>150054</td>\n",
       "      <td>80511</td>\n",
       "      <td>150054</td>\n",
       "      <td>150054</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>332</td>\n",
       "      <td>319</td>\n",
       "      <td>328</td>\n",
       "      <td>140</td>\n",
       "      <td>396</td>\n",
       "      <td>211</td>\n",
       "      <td>3</td>\n",
       "      <td>84</td>\n",
       "      <td>31</td>\n",
       "      <td>45</td>\n",
       "      <td>4</td>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>217</td>\n",
       "      <td>227</td>\n",
       "      <td>marca 2</td>\n",
       "      <td>1.19</td>\n",
       "      <td>0.83 (0.30)</td>\n",
       "      <td>121</td>\n",
       "      <td></td>\n",
       "      <td>28/10/2021</td>\n",
       "      <td>2021-10-21</td>\n",
       "      <td>2021-10-22</td>\n",
       "      <td>Medium</td>\n",
       "      <td>Lisboa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>2443</td>\n",
       "      <td>8971</td>\n",
       "      <td>18249</td>\n",
       "      <td>22234</td>\n",
       "      <td>18219</td>\n",
       "      <td>9521</td>\n",
       "      <td>69543</td>\n",
       "      <td>4741</td>\n",
       "      <td>8965</td>\n",
       "      <td>4910</td>\n",
       "      <td>62590</td>\n",
       "      <td>14888</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       idstore     sku     brand  oldpvp new_pvp (discount) weight (g)  \\\n",
       "count   150054  150054    150054  150032             150026     150050   \n",
       "unique     332     319       328     140                396        211   \n",
       "top        217     227   marca 2    1.19        0.83 (0.30)        121   \n",
       "freq      2443    8971     18249   22234              18219       9521   \n",
       "\n",
       "       Payment_method expiring_date labelling_date   sell_date    type  \\\n",
       "count          150054        150054         150054       80511  150054   \n",
       "unique              3            84             31          45       4   \n",
       "top                      28/10/2021     2021-10-21  2021-10-22  Medium   \n",
       "freq            69543          4741           8965        4910   62590   \n",
       "\n",
       "       district  \n",
       "count    150054  \n",
       "unique       18  \n",
       "top      Lisboa  \n",
       "freq      14888  "
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Identificar as principais estatísticas descritivas para todas as variáveis categóricas\n",
    "df.describe(include = ['O'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "6f9e2743-0dfe-4c43-a9cf-dbe478b81cbc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "brand\n",
       " marca 2     18249\n",
       " Marca 2     17008\n",
       "marca  2      9077\n",
       "marca   2     9068\n",
       "marca2        9043\n",
       "             ...  \n",
       "Marca 37         1\n",
       " Marca 38        1\n",
       "Marca 38         1\n",
       "Marca 1          1\n",
       " Marca 42        1\n",
       "Name: count, Length: 328, dtype: int64"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Verificar os níveis/valores possíveis das variáveis \"brand\"\n",
    "df['brand'].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e15ac5b4-2cb1-4382-8cc5-8d1eade35e11",
   "metadata": {},
   "source": [
    "**Nota:**\n",
    "\n",
    "Ao analisar-se a variável, verifica-se que os dados não estão normalizados. Desta forma, será necessário tratar estes dados posteriormente."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "9d2232bc-ffe9-46c6-a954-8b6f1948c069",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Uniformizar os nomes das marcas (remover os espaços)\n",
    "df['brand'] = df['brand'].str.replace(r'\\s+', '', regex=True).str.title()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "f73c1291-ca29-4671-9191-70d90136638d",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Uniformizar os nomes das marcas (primeira letra como maiuscula)\n",
    "df['brand'] = df['brand'].str.replace(r'(\\D)(\\d)', r'\\1_\\2', regex=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "dd928531-6fd8-47f7-ab9b-edd7bb57dcab",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "brand\n",
       "Marca_2     106163\n",
       "Marca_7      15428\n",
       "Marca_15     12543\n",
       "Marca_5       5418\n",
       "Marca_12      1760\n",
       "Marca_25      1279\n",
       "Marca_9       1126\n",
       "Marca_3        880\n",
       "Marca_33       846\n",
       "Marca_28       725\n",
       "Marca_8        539\n",
       "Marca_4        513\n",
       "Marca_21       481\n",
       "Marca_26       470\n",
       "Marca_17       258\n",
       "Marca_6        227\n",
       "Marca_16       185\n",
       "Marca_29       175\n",
       "Marca_22       131\n",
       "Marca_13       113\n",
       "Marca_23       111\n",
       "Marca_10       101\n",
       "Marca_41        93\n",
       "Marca_18        86\n",
       "Marca_20        83\n",
       "Marca_40        73\n",
       "Marca_27        71\n",
       "Marca_24        61\n",
       "Marca_32        48\n",
       "Marca_1         14\n",
       "Marca_11        10\n",
       "Marca_31         9\n",
       "Marca_36         8\n",
       "Marca_37         8\n",
       "Marca_19         5\n",
       "Marca_39         4\n",
       "Marca_38         2\n",
       "Marca_14         2\n",
       "Marca_42         2\n",
       "Marca_30         1\n",
       "Marca_34         1\n",
       "Marca_35         1\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['brand'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "799c036c-34a5-44d6-8339-1633e1574bb3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['4.22', '3.96', '4.74', '4.2', '4.62', '3.42', '3.62', '4.38',\n",
       "       '5.23', '5.89', '3.78', '4.76', '3.19', nan, '3,19', '2.65',\n",
       "       '2.79', '2,79', '500', '46', '2,99', '1,39', '1.39', '2.19',\n",
       "       '2,19', '1.19', '1,19', '1.25', '1,25', '3.99', '4,29', '1.99',\n",
       "       '1,99', '0,79', '0.79', '1.29', '1.79', '1,79', '1,15', '2,69',\n",
       "       '2.49', '2,49', '2.59', '4.39', '4,59', '1,49', '0.99', '0,99',\n",
       "       '2.99', '4.99', '4,99', '17.99', '1.49', '1,29', '2,39', '0.69',\n",
       "       '0,69', '0.76', '2.95', '1.59', '1,59', '1.95', '1,95', '1.89',\n",
       "       '1,89', '3.29', '2,80', '3,99', '2,59', '4.15', '2.69', '1.69',\n",
       "       '1,69', '4.59', '3.39', '3,24', '3.24', '2.89', '2,89', '1.75',\n",
       "       '1,75', '2.29', '2,29', '999', '0.95', '0,95', '1.54', '1,54',\n",
       "       '1,09', '3.49', '3,49', '0.96', '0.98', '0.97', '1', '4.29',\n",
       "       '1.09', '2.75', '1,05', '3.35', '0.89', '1.15', '2.39', '0,85',\n",
       "       '0.85', '1.55', '1.12', '1.47', '1.22', '1.71', '1.36', '1.68',\n",
       "       '1.05', '1.78', '1.5', '1.61', '1.33', '1.57', '1.26', '1.43',\n",
       "       '1.08', '2.1', '0.91', '1.4', '2.03', '0.84', '0.94', '2.5',\n",
       "       '2,50', '2,09', '14.99', '0.59', '0,59', '1,33', '1.65', '3.8',\n",
       "       '2.45', '4,89', '3.09', '1.9', '1.44'], dtype=object)"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Verificar os valores da array para \"oldpvp\"\n",
    "df['oldpvp'].unique()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6bdf9c9a-cc2a-49e0-851b-23ea980df196",
   "metadata": {},
   "source": [
    "**Nota:**\n",
    "Analisando os dados, verifica-se:\n",
    "\n",
    "- Existem 2 caracteres diferentes, o ponto e a vírgula.\n",
    "- Existem número no formato incorreto, como 500 e 999;\n",
    "- Existem valores ausentes (Nan)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "96784f21-d7fc-405c-a916-2c31c24fb3be",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Uniformizar o formato numérico (substituir , por .)\n",
    "df['oldpvp'] =  df['oldpvp'] .str.replace(\",\" ,  \".\").astype(float)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "3e3255ce-e7c4-4bf1-a8b1-45bf3f410bd4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([4.220e+00, 3.960e+00, 4.740e+00, 4.200e+00, 4.620e+00, 3.420e+00,\n",
       "       3.620e+00, 4.380e+00, 5.230e+00, 5.890e+00, 3.780e+00, 4.760e+00,\n",
       "       3.190e+00,       nan, 2.650e+00, 2.790e+00, 5.000e+02, 4.600e+01,\n",
       "       2.990e+00, 1.390e+00, 2.190e+00, 1.190e+00, 1.250e+00, 3.990e+00,\n",
       "       4.290e+00, 1.990e+00, 7.900e-01, 1.290e+00, 1.790e+00, 1.150e+00,\n",
       "       2.690e+00, 2.490e+00, 2.590e+00, 4.390e+00, 4.590e+00, 1.490e+00,\n",
       "       9.900e-01, 4.990e+00, 1.799e+01, 2.390e+00, 6.900e-01, 7.600e-01,\n",
       "       2.950e+00, 1.590e+00, 1.950e+00, 1.890e+00, 3.290e+00, 2.800e+00,\n",
       "       4.150e+00, 1.690e+00, 3.390e+00, 3.240e+00, 2.890e+00, 1.750e+00,\n",
       "       2.290e+00, 9.990e+02, 9.500e-01, 1.540e+00, 1.090e+00, 3.490e+00,\n",
       "       9.600e-01, 9.800e-01, 9.700e-01, 1.000e+00, 2.750e+00, 1.050e+00,\n",
       "       3.350e+00, 8.900e-01, 8.500e-01, 1.550e+00, 1.120e+00, 1.470e+00,\n",
       "       1.220e+00, 1.710e+00, 1.360e+00, 1.680e+00, 1.780e+00, 1.500e+00,\n",
       "       1.610e+00, 1.330e+00, 1.570e+00, 1.260e+00, 1.430e+00, 1.080e+00,\n",
       "       2.100e+00, 9.100e-01, 1.400e+00, 2.030e+00, 8.400e-01, 9.400e-01,\n",
       "       2.500e+00, 2.090e+00, 1.499e+01, 5.900e-01, 1.650e+00, 3.800e+00,\n",
       "       2.450e+00, 4.890e+00, 3.090e+00, 1.900e+00, 1.440e+00])"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['oldpvp'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "18cb8de8-38b6-4d4d-ba88-393b02c00b4a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['2.11 (0.50)', '1.98 (0.50)', '2.37 (0.50)', '2.1 (0.50)',\n",
       "       '2.31 (0.50)', '1.71 (0.50)', '1.81 (0.50)', '2.19 (0.50)', nan,\n",
       "       '2.94 (0.50)', '1.89 (0.50)', '2.38 (0.50)', '1.59 (0.50)',\n",
       "       '1,59 (50%)', '2.39 (0.25)', '2,39 (25%)', '2.55 (0.20)',\n",
       "       '1.32 (0.50)', '1,32 (50%)', '1.95 (0.30)', '1,95 (30%)',\n",
       "       '2.09 (0.25)', '2,09 (25%)', '250 (0.50)', '0.0279 (0.99)',\n",
       "       '2,09 (30%)', '2,23 (20%)', '1.92 (0.31)', '0.97 (0.30)',\n",
       "       '0,69 (50%)', '0,97 (30%)', '1.53 (0.30)', '1,53 (30%)',\n",
       "       '1.64 (0.25)', '1,64 (25%)', '0.83 (0.30)', '0,83 (30%)',\n",
       "       '0.89 (0.25)', '0,89 (25%)', '0,95 (20%)', '1,01 (15%)',\n",
       "       '1.07 (0.10)', '0.93 (0.26)', '0,87 (30%)', '0.95 (0.20)',\n",
       "       '1.12 (0.10)', '1,07 (10%)', '2.79 (0.30)', '3,00 (30%)',\n",
       "       '2.99 (0.25)', '1.39 (0.30)', '1,39 (30%)', '1.49 (0.25)',\n",
       "       '1,49 (25%)', '1.79 (0.10)', '1.59 (0.20)', '1,69 (15%)',\n",
       "       '1.04 (0.25)', '1,04 (25%)', '0,55 (30%)', '0.9 (0.30)',\n",
       "       '0.89 (0.50)', '1.25 (0.30)', '1,49 (50%)', '1.86 (0.15)',\n",
       "       '1.75 (0.20)', '1,75 (20%)', '0.57 (0.50)', '1,88 (30%)',\n",
       "       '1,86 (25%)', '1,74 (30%)', '1.71 (0.31)', '1.74 (0.30)',\n",
       "       '1,94 (25%)', '1,81 (30%)', '3.07 (0.30)', '3.29 (0.25)',\n",
       "       '0.39 (0.51)', '0,39 (51%)', '3,21 (30%)', '2.51 (0.10)',\n",
       "       '2.37 (0.15)', '2,37 (15%)', '0.74 (0.50)', '0,49 (51%)',\n",
       "       '0.49 (0.51)', '0,69 (30%)', '0.69 (0.30)', '1.49 (0.50)',\n",
       "       '2,24 (25%)', '2.09 (0.30)', '3.49 (0.30)', '3,49 (30%)',\n",
       "       '0.99 (0.50)', '8.99 (0.50)', '1.69 (0.15)', '1.04 (0.30)',\n",
       "       '1,04 (30%)', '1,11 (26%)', '1.34 (0.10)', '1.11 (0.26)',\n",
       "       '0,90 (30%)', '0.96 (0.26)', '0,96 (26%)', '1.03 (0.20)',\n",
       "       '1.09 (0.16)', '1,09 (16%)', '1,67 (30%)', '1.51 (0.31)',\n",
       "       '1.86 (0.25)', '1.99 (0.20)', '0.48 (0.30)', '0,48 (30%)',\n",
       "       '0.51 (0.26)', '0,51 (26%)', '0.58 (0.16)', '0.55 (0.20)',\n",
       "       '0,55 (20%)', '0.53 (0.30)', '0,58 (16%)', '0,64 (16%)',\n",
       "       '0,60 (21%)', '0,68 (11%)', '1.47 (0.50)', '2,21 (25%)',\n",
       "       '2,06 (30%)', '0.74 (0.25)', '0,79 (20%)', '0.79 (0.20)',\n",
       "       '0,84 (15%)', '0,74 (25%)', '1.29 (0.50)', '1,11 (30%)',\n",
       "       '1,43 (10%)', '1.11 (0.30)', '1.36 (0.30)', '1,36 (30%)',\n",
       "       '1.46 (0.25)', '1,46 (25%)', '1,56 (20%)', '1.34 (0.31)',\n",
       "       '0,62 (10%)', '1.32 (0.30)', '1,32 (30%)', '1,25 (30%)',\n",
       "       '1.6 (0.15)', '1.41 (0.25)', '1.34 (0.25)', '1,41 (25%)',\n",
       "       '1,34 (25%)', '1.51 (0.20)', '1.52 (0.15)', '1.61 (0.10)',\n",
       "       '1,43 (20%)', '1.43 (0.20)', '1,60 (15%)', '1,52 (15%)',\n",
       "       '1.64 (0.50)', '1.96 (0.30)', '1,99 (50%)', '1.99 (0.50)',\n",
       "       '2,39 (40%)', '2.39 (0.40)', '1.94 (0.25)', '1.81 (0.30)',\n",
       "       '1.78 (0.31)', '2.24 (0.25)', '1.24 (0.50)', '1.94 (0.35)',\n",
       "       '3.73 (0.10)', '1.88 (0.30)', '2,01 (25%)', '1.85 (0.31)',\n",
       "       '1.18 (0.30)', '1,18 (30%)', '3.21 (0.30)', '3.44 (0.25)',\n",
       "       '1.69 (0.50)', '2,26 (30%)', '2.26 (0.30)', '2,39 (20%)',\n",
       "       '2.06 (0.31)', '2.02 (0.30)', '2,02 (30%)', '2.16 (0.25)',\n",
       "       '2.45 (0.15)', '2,16 (25%)', '2.6 (0.10)', '1.22 (0.30)',\n",
       "       '1,22 (30%)', '1.31 (0.25)', '1,31 (25%)', '1,40 (20%)',\n",
       "       '1.2 (0.31)', '1.6 (0.30)', '1,60 (30%)', '1.71 (0.25)',\n",
       "       '1,71 (25%)', '2.06 (0.10)', '1,83 (20%)', '1.83 (0.20)',\n",
       "       '2,06 (10%)', '1,24 (50%)', '0.99 (0.17)', '0.34 (0.51)',\n",
       "       '1,59 (20%)', '1.19 (0.20)', '1,19 (20%)', '1.26 (0.15)',\n",
       "       '1,26 (15%)', '499.5 (0.50)', '1,79 (10%)', '0,74 (50%)',\n",
       "       '0.66 (0.31)', '0,66 (31%)', '0.71 (0.25)', '0,71 (25%)',\n",
       "       '0,76 (20%)', '0.76 (0.20)', '0,80 (16%)', '2,99 (25%)',\n",
       "       '1.07 (0.31)', '1.15 (0.25)', '1,15 (25%)', '1.06 (0.31)',\n",
       "       '1,07 (31%)', '1.5 (0.03)', '2,15 (28%)', '0,76 (30%)',\n",
       "       '2.44 (0.30)', '2,44 (30%)', '2.96 (0.15)', '2.61 (0.25)',\n",
       "       '0.67 (0.30)', '0.68 (0.31)', '0.67 (0.31)', '0.7 (0.30)',\n",
       "       '0,68 (31%)', '0,67 (31%)', '0,67 (30%)', '0,70 (30%)', '3 (0.30)',\n",
       "       '2.14 (0.50)', '1.14 (0.50)', '1.7 (0.10)', '1,52 (10%)',\n",
       "       '1,35 (20%)', '1.26 (0.25)', '1.52 (0.10)', '1.01 (0.15)',\n",
       "       '0.54 (0.50)', '2,54 (15%)', '2.54 (0.15)', '2.06 (0.25)',\n",
       "       '1.92 (0.30)', '0.55 (0.30)', '0.73 (0.30)', '0,89 (10%)',\n",
       "       '0,81 (18%)', '0.81 (0.26)', '1,79 (40%)', '2.51 (0.25)',\n",
       "       '2.34 (0.30)', '2,79 (30%)', '0,44 (51%)', '0.44 (0.51)',\n",
       "       '1.85 (0.30)', '0,57 (50%)', '0.8 (0.30)', '1.19 (0.50)',\n",
       "       '1,19 (50%)', '1.19 (0.25)', '1,19 (25%)', '1,27 (20%)',\n",
       "       '1.27 (0.20)', '1,35 (15%)', '1,26 (25%)', '1.43 (0.15)',\n",
       "       '1.35 (0.20)', '1,43 (15%)', '0.59 (0.31)', '0,42 (51%)',\n",
       "       '0.42 (0.51)', '1.64 (0.31)', '0.59 (0.50)', '1.11 (0.20)',\n",
       "       '1,18 (15%)', '0.64 (0.50)', '0.93 (0.40)', '0,99 (50%)',\n",
       "       '0.84 (0.25)', '1.02 (0.31)', '0.85 (0.30)', '1.19 (0.30)',\n",
       "       '0.95 (0.30)', '1.17 (0.30)', '1.24 (0.30)', '1.05 (0.30)',\n",
       "       '1.12 (0.30)', '0.93 (0.30)', '1.09 (0.31)', '0.88 (0.30)',\n",
       "       '1 (0.30)', '0.99 (0.26)', '1.12 (0.25)', '0.86 (0.25)',\n",
       "       '0.91 (0.25)', '1.02 (0.25)', '0.81 (0.25)', '1.57 (0.25)',\n",
       "       '1.07 (0.25)', '1.2 (0.25)', '0.68 (0.25)', '0.94 (0.25)',\n",
       "       '1.05 (0.25)', '0.78 (0.26)', '0.73 (0.26)', '1.1 (0.25)',\n",
       "       '0.98 (0.30)', '1.42 (0.30)', '0.63 (0.25)', '0.7 (0.26)',\n",
       "       '1.37 (0.31)', '1,19 (40%)', '1,98 (25%)', '2.24 (0.10)',\n",
       "       '1.25 (0.10)', '1.75 (0.30)', '1,75 (30%)', '1.04 (0.50)',\n",
       "       '0,85 (11%)', '0.8 (0.16)', '0.85 (0.11)', '1,61 (10%)',\n",
       "       '7.49 (0.50)', '0.41 (0.31)', '0,41 (31%)', '0.44 (0.25)',\n",
       "       '0,44 (25%)', '0,50 (15%)', '0.5 (0.15)', '0.47 (0.20)',\n",
       "       '0,47 (20%)', '0,93 (30%)', '1,23 (25%)', '1.9 (0.50)',\n",
       "       '1.97 (0.48)', '0.69 (0.50)', '2.39 (0.20)', '1,22 (50%)',\n",
       "       '1.58 (0.31)', '1,29 (50%)', '2.69 (0.10)', '1.35 (0.15)',\n",
       "       '1.43 (0.10)', '1,31 (18%)', '2.37 (0.30)', '1.94 (0.15)',\n",
       "       '1,94 (15%)', '0.94 (0.50)', '0,94 (50%)', '3.42 (0.30)',\n",
       "       '3,42 (30%)', '1,11 (20%)', '1,60 (5%)', '2,61 (25%)',\n",
       "       '2.4 (0.31)', '0,59 (25%)', '0.63 (0.20)', '0.59 (0.25)',\n",
       "       '1.33 (0.21)', '0,79 (50%)', '3.74 (0.25)', '3.44 (0.31)',\n",
       "       '1.67 (0.30)', '1.79 (0.25)', '1,79 (25%)', '2,03 (15%)',\n",
       "       '1,91 (20%)', '1.54 (0.50)', '0,64 (35%)', '1.42 (0.25)',\n",
       "       '2.01 (0.25)', '2,28 (15%)', '0,83 (36%)', '0,64 (50%)',\n",
       "       '1.26 (0.02)', '1,03 (20%)', '1 (0.31)', '0,99 (23%)',\n",
       "       '1.97 (0.01)', '0,59 (40%)', '0,34 (51%)', '0,77 (40%)',\n",
       "       '0.79 (0.50)', '1.74 (0.50)', '0.62 (0.30)'], dtype=object)"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Verificar os valores da array para \"new_pvp (discount)\n",
    "df['new_pvp (discount)'].unique()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "efcb26a8-7f2c-4603-af9c-c634cf4ef406",
   "metadata": {},
   "source": [
    "**Nota:**\n",
    "Analisando os dados, verifica-se:\n",
    "\n",
    "- Existem 2 caracteres diferentes, o ponto e a vírgula;\n",
    "- Existem alguns valores em % e outros não;\n",
    "- Existem valores ausentes (Nan);\n",
    "- É necessário dividir em duas colunas.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "d093fa3a-61bc-4180-80cb-ec2943ddc109",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Dividir a variável \"new_pvp (discount)\" em duas: \"newpvp\" e \"discount\"\n",
    "df[['newpvp', 'discount']] = df['new_pvp (discount)'].str.split(' ', expand=True)\n",
    "df['discount'] = df['discount'].str.replace(r'[()]', '', regex=True)\n",
    "\n",
    "df['newpvp'] = df['newpvp'].astype(str).str.replace(',', '.', regex=False).astype(float)\n",
    "\n",
    "#Limpar e converter os valores da \"discount\"\n",
    "def clean_discount(value):\n",
    "    if isinstance(value, str):\n",
    "        if value.endswith('%'): # Remove o '%' e converte para decimal\n",
    "            return float(value[:-1]) / 100\n",
    "        else: # Caso já seja um valor decimal, converte diretamente para float\n",
    "            return float(value)\n",
    "    return value  # Retorna o valor original se não for string\n",
    "\n",
    "df['discount'] = df['discount'].apply(clean_discount)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "f7d3a7ad-37fb-41c5-b090-a6726d6fbdc3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>idstore</th>\n",
       "      <th>sku</th>\n",
       "      <th>brand</th>\n",
       "      <th>oldpvp</th>\n",
       "      <th>new_pvp (discount)</th>\n",
       "      <th>labelqty</th>\n",
       "      <th>weight (g)</th>\n",
       "      <th>Payment_method</th>\n",
       "      <th>Margin (%)</th>\n",
       "      <th>Profit (€)</th>\n",
       "      <th>perc_expiring_sku</th>\n",
       "      <th>expiring_date</th>\n",
       "      <th>labelling_date</th>\n",
       "      <th>sell_date</th>\n",
       "      <th>sold</th>\n",
       "      <th>type</th>\n",
       "      <th>selling_square_ft</th>\n",
       "      <th>district</th>\n",
       "      <th>newpvp</th>\n",
       "      <th>discount</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Marca_1</td>\n",
       "      <td>4.22</td>\n",
       "      <td>2.11 (0.50)</td>\n",
       "      <td>1</td>\n",
       "      <td>260</td>\n",
       "      <td>Card</td>\n",
       "      <td>16</td>\n",
       "      <td>0.3376</td>\n",
       "      <td>0.010050</td>\n",
       "      <td>03/10/2021</td>\n",
       "      <td>2021-10-01</td>\n",
       "      <td>2021-10-02</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Large</td>\n",
       "      <td>4762.0</td>\n",
       "      <td>Évora</td>\n",
       "      <td>2.11</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Marca_1</td>\n",
       "      <td>3.96</td>\n",
       "      <td>1.98 (0.50)</td>\n",
       "      <td>1</td>\n",
       "      <td>260</td>\n",
       "      <td></td>\n",
       "      <td>16</td>\n",
       "      <td>0.3168</td>\n",
       "      <td>0.005025</td>\n",
       "      <td>02/10/2021</td>\n",
       "      <td>2021-10-01</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Large</td>\n",
       "      <td>4762.0</td>\n",
       "      <td>Évora</td>\n",
       "      <td>1.98</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Marca_1</td>\n",
       "      <td>4.74</td>\n",
       "      <td>2.37 (0.50)</td>\n",
       "      <td>1</td>\n",
       "      <td>260</td>\n",
       "      <td>Cash</td>\n",
       "      <td>16</td>\n",
       "      <td>0.3792</td>\n",
       "      <td>0.010050</td>\n",
       "      <td>03/10/2021</td>\n",
       "      <td>2021-10-01</td>\n",
       "      <td>2021-10-03</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Large</td>\n",
       "      <td>4762.0</td>\n",
       "      <td>Évora</td>\n",
       "      <td>2.37</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Marca_1</td>\n",
       "      <td>4.20</td>\n",
       "      <td>2.1 (0.50)</td>\n",
       "      <td>1</td>\n",
       "      <td>260</td>\n",
       "      <td>Card</td>\n",
       "      <td>16</td>\n",
       "      <td>0.3360</td>\n",
       "      <td>0.010050</td>\n",
       "      <td>03/10/2021</td>\n",
       "      <td>2021-10-01</td>\n",
       "      <td>2021-10-02</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Large</td>\n",
       "      <td>4762.0</td>\n",
       "      <td>Évora</td>\n",
       "      <td>2.10</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Marca_1</td>\n",
       "      <td>4.62</td>\n",
       "      <td>2.31 (0.50)</td>\n",
       "      <td>1</td>\n",
       "      <td>260</td>\n",
       "      <td>Cash</td>\n",
       "      <td>16</td>\n",
       "      <td>0.3696</td>\n",
       "      <td>0.010050</td>\n",
       "      <td>03/10/2021</td>\n",
       "      <td>2021-10-01</td>\n",
       "      <td>2021-10-03</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Large</td>\n",
       "      <td>4762.0</td>\n",
       "      <td>Évora</td>\n",
       "      <td>2.31</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  idstore sku    brand  oldpvp new_pvp (discount)  labelqty weight (g)  \\\n",
       "0       1   1  Marca_1    4.22        2.11 (0.50)         1        260   \n",
       "1       1   1  Marca_1    3.96        1.98 (0.50)         1        260   \n",
       "2       1   1  Marca_1    4.74        2.37 (0.50)         1        260   \n",
       "3       1   1  Marca_1    4.20         2.1 (0.50)         1        260   \n",
       "4       1   1  Marca_1    4.62        2.31 (0.50)         1        260   \n",
       "\n",
       "  Payment_method  Margin (%)  Profit (€)  perc_expiring_sku expiring_date  \\\n",
       "0           Card          16      0.3376           0.010050    03/10/2021   \n",
       "1                         16      0.3168           0.005025    02/10/2021   \n",
       "2           Cash          16      0.3792           0.010050    03/10/2021   \n",
       "3           Card          16      0.3360           0.010050    03/10/2021   \n",
       "4           Cash          16      0.3696           0.010050    03/10/2021   \n",
       "\n",
       "  labelling_date   sell_date  sold   type  selling_square_ft district  newpvp  \\\n",
       "0     2021-10-01  2021-10-02   1.0  Large             4762.0    Évora    2.11   \n",
       "1     2021-10-01         NaN   0.0  Large             4762.0    Évora    1.98   \n",
       "2     2021-10-01  2021-10-03   1.0  Large             4762.0    Évora    2.37   \n",
       "3     2021-10-01  2021-10-02   1.0  Large             4762.0    Évora    2.10   \n",
       "4     2021-10-01  2021-10-03   NaN  Large             4762.0    Évora    2.31   \n",
       "\n",
       "   discount  \n",
       "0       0.5  \n",
       "1       0.5  \n",
       "2       0.5  \n",
       "3       0.5  \n",
       "4       0.5  "
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "5d0281ce-24ae-422e-bb85-9cf762b5525f",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Eliminar a coluna new_pvp (discount)\n",
    "df = df.drop(columns=['new_pvp (discount)'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "115926c3-6090-4d8f-bc7b-17b40899fb3c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>idstore</th>\n",
       "      <th>sku</th>\n",
       "      <th>brand</th>\n",
       "      <th>oldpvp</th>\n",
       "      <th>labelqty</th>\n",
       "      <th>weight (g)</th>\n",
       "      <th>Payment_method</th>\n",
       "      <th>Margin (%)</th>\n",
       "      <th>Profit (€)</th>\n",
       "      <th>perc_expiring_sku</th>\n",
       "      <th>expiring_date</th>\n",
       "      <th>labelling_date</th>\n",
       "      <th>sell_date</th>\n",
       "      <th>sold</th>\n",
       "      <th>type</th>\n",
       "      <th>selling_square_ft</th>\n",
       "      <th>district</th>\n",
       "      <th>newpvp</th>\n",
       "      <th>discount</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Marca_1</td>\n",
       "      <td>4.22</td>\n",
       "      <td>1</td>\n",
       "      <td>260</td>\n",
       "      <td>Card</td>\n",
       "      <td>16</td>\n",
       "      <td>0.3376</td>\n",
       "      <td>0.010050</td>\n",
       "      <td>03/10/2021</td>\n",
       "      <td>2021-10-01</td>\n",
       "      <td>2021-10-02</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Large</td>\n",
       "      <td>4762.0</td>\n",
       "      <td>Évora</td>\n",
       "      <td>2.11</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Marca_1</td>\n",
       "      <td>3.96</td>\n",
       "      <td>1</td>\n",
       "      <td>260</td>\n",
       "      <td></td>\n",
       "      <td>16</td>\n",
       "      <td>0.3168</td>\n",
       "      <td>0.005025</td>\n",
       "      <td>02/10/2021</td>\n",
       "      <td>2021-10-01</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Large</td>\n",
       "      <td>4762.0</td>\n",
       "      <td>Évora</td>\n",
       "      <td>1.98</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Marca_1</td>\n",
       "      <td>4.74</td>\n",
       "      <td>1</td>\n",
       "      <td>260</td>\n",
       "      <td>Cash</td>\n",
       "      <td>16</td>\n",
       "      <td>0.3792</td>\n",
       "      <td>0.010050</td>\n",
       "      <td>03/10/2021</td>\n",
       "      <td>2021-10-01</td>\n",
       "      <td>2021-10-03</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Large</td>\n",
       "      <td>4762.0</td>\n",
       "      <td>Évora</td>\n",
       "      <td>2.37</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Marca_1</td>\n",
       "      <td>4.20</td>\n",
       "      <td>1</td>\n",
       "      <td>260</td>\n",
       "      <td>Card</td>\n",
       "      <td>16</td>\n",
       "      <td>0.3360</td>\n",
       "      <td>0.010050</td>\n",
       "      <td>03/10/2021</td>\n",
       "      <td>2021-10-01</td>\n",
       "      <td>2021-10-02</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Large</td>\n",
       "      <td>4762.0</td>\n",
       "      <td>Évora</td>\n",
       "      <td>2.10</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Marca_1</td>\n",
       "      <td>4.62</td>\n",
       "      <td>1</td>\n",
       "      <td>260</td>\n",
       "      <td>Cash</td>\n",
       "      <td>16</td>\n",
       "      <td>0.3696</td>\n",
       "      <td>0.010050</td>\n",
       "      <td>03/10/2021</td>\n",
       "      <td>2021-10-01</td>\n",
       "      <td>2021-10-03</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Large</td>\n",
       "      <td>4762.0</td>\n",
       "      <td>Évora</td>\n",
       "      <td>2.31</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  idstore sku    brand  oldpvp  labelqty weight (g) Payment_method  \\\n",
       "0       1   1  Marca_1    4.22         1        260           Card   \n",
       "1       1   1  Marca_1    3.96         1        260                  \n",
       "2       1   1  Marca_1    4.74         1        260           Cash   \n",
       "3       1   1  Marca_1    4.20         1        260           Card   \n",
       "4       1   1  Marca_1    4.62         1        260           Cash   \n",
       "\n",
       "   Margin (%)  Profit (€)  perc_expiring_sku expiring_date labelling_date  \\\n",
       "0          16      0.3376           0.010050    03/10/2021     2021-10-01   \n",
       "1          16      0.3168           0.005025    02/10/2021     2021-10-01   \n",
       "2          16      0.3792           0.010050    03/10/2021     2021-10-01   \n",
       "3          16      0.3360           0.010050    03/10/2021     2021-10-01   \n",
       "4          16      0.3696           0.010050    03/10/2021     2021-10-01   \n",
       "\n",
       "    sell_date  sold   type  selling_square_ft district  newpvp  discount  \n",
       "0  2021-10-02   1.0  Large             4762.0    Évora    2.11       0.5  \n",
       "1         NaN   0.0  Large             4762.0    Évora    1.98       0.5  \n",
       "2  2021-10-03   1.0  Large             4762.0    Évora    2.37       0.5  \n",
       "3  2021-10-02   1.0  Large             4762.0    Évora    2.10       0.5  \n",
       "4  2021-10-03   NaN  Large             4762.0    Évora    2.31       0.5  "
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "1ab3f479-09a8-46c0-aaf0-8a23745a7421",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['260', '222', nan, '194', '134', '219', '97', '131', '174', '66',\n",
       "       '165', '273', '225', '280', '143', '145', '168', '82', '71', '148',\n",
       "       '117', '169', '250', '237', '142', '215', '51', '90', '162', '99',\n",
       "       '289', '266', '274', '125', '62', '73', '240', '84', '193', '121',\n",
       "       '158', '300', '118', ' ', '124', '187', '202', '272', '146', '72',\n",
       "       '41', '192', '176', '186', '159', '101', '243', '102', '123',\n",
       "       '116', '182', '32', '77', '126', '175', '259', '83', '81', '56',\n",
       "       '177', '252', '107', '181', '155', '254', '150', '191', '149',\n",
       "       '69', '166', '141', '110', '188', '33', '205', '152', '227', '106',\n",
       "       '211', '201', '137', '190', '183', '170', '178', '9', '105', '109',\n",
       "       '127', '213', '130', '278', '236', '55', '229', '206', '108',\n",
       "       '262', '180', '95', '122', '263', '189', '233', '94', '248', '239',\n",
       "       '135', '290', '210', '53', '232', '139', '44', '1', '128', '203',\n",
       "       '114', '198', '199', '160', '164', '218', '216', '234', '67',\n",
       "       '185', '207', '303', '140', '249', '136', '172', '132', '45',\n",
       "       '238', '65', '276', '196', '281', '167', '208', '86', '226', '209',\n",
       "       '64', '410', '70', '197', '104', '294', '309', '299', '244', '2',\n",
       "       '221', '29', '247', '50', '76', '283', '195', '138', '85', '38',\n",
       "       '265', 265, 131, 93, 229, 178, 241, 293, 165, 221, 52, 123, 296,\n",
       "       50, 253, 213, 248, 77, 98, 147, 190, 156, 107, 205, 90, 12, 283,\n",
       "       172, 139, 95, 177, 103, 204, 157, 261, 97, 141], dtype=object)"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Verificar os valores da array para \"weight (g)\"\n",
    "df['weight (g)'].unique()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c0c31014-eec2-4a83-961f-a3f4aed1612b",
   "metadata": {},
   "source": [
    "**Nota:**\n",
    "Analisando os dados, verifica-se:\n",
    "\n",
    "- Existem valores ausentes (Nan);\n",
    "- Existem valores em branco;\n",
    "- É necessário converter em variável numérica."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "c550ec00-cb90-41af-854d-0323b3aafd64",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Substituir os em branco por nan e converter para float\n",
    "df['weight (g)'] = df['weight (g)'].replace(\" \", np.nan).astype(float)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "99b81617-c086-4516-8a1c-30ecf9f33df6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Card', ' ', 'Cash'], dtype=object)"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Verificar os valores da array para \"Payment_method\"\n",
    "df['Payment_method'].unique()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "405df088-88db-46ad-ac7c-cc38196dc4c8",
   "metadata": {},
   "source": [
    "**Nota:**\n",
    "\n",
    "Analisando os dados, verifica-se que existem valores em branco."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "ba5b9c00-0cd2-45b0-bf77-e4d273fa0f93",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Substituir os em branco por N/A\n",
    "df['Payment_method'] = df['Payment_method'].replace(\" \", \"N/A\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "3c87a8ee-b3d5-480d-8be9-faf644d3890f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['03/10/2021', '02/10/2021', '25/10/2021', '26/10/2021',\n",
       "       '27/10/2021', '15/10/2021', '18/10/2021', '28/10/2021',\n",
       "       '16/10/2021', '23/10/2021', '07/10/2021', '30/10/2021',\n",
       "       '14/10/2021', '21/10/2021', '12/10/2021', '09/10/2021',\n",
       "       '19/10/2021', '05/10/2021', '06/10/2021', '11/10/2021',\n",
       "       '24/10/2021', '13/10/2021', '17/10/2021', '10/10/2021',\n",
       "       '08/10/2021', '22/10/2021', '01/11/2021', '20/10/2021',\n",
       "       '29/10/2021', '31/10/2021', '01/10/2021', '22-10-2021',\n",
       "       '23-10-2021', '27-10-2021', '28-10-2021', '29-10-2021',\n",
       "       '30-10-2021', '07-10-2021', '09-10-2021', '25-10-2021',\n",
       "       '05-10-2021', '08-10-2021', '19-10-2021', '06-10-2021',\n",
       "       '13-10-2021', '14-10-2021', '26-10-2021', '18-10-2021',\n",
       "       '20-10-2021', '21-10-2021', '01-11-2021', '11-10-2021',\n",
       "       '04-10-2021', '15-10-2021', '24-10-2021', '16-10-2021',\n",
       "       '12-10-2021', '03-10-2021', '10-10-2021', '04/10/2021',\n",
       "       '01-10-2021', '17-10-2021', '31-10-2021', '20-11-2021',\n",
       "       '02-11-2021', '02-10-2021', '19/11/2021', '06-11-2021',\n",
       "       '07-11-2021', '08-11-2021', '02/11/2021', '06/11/2021',\n",
       "       '03/11/2021', '08/11/2021', '18-11-2021', '07/11/2021',\n",
       "       '19-11-2021', '13-11-2021', '20/11/2021', '18/11/2021',\n",
       "       '10-11-2021', '09-11-2021', '05-11-2021', '11-11-2021'],\n",
       "      dtype=object)"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Verificar os valores da array para \"expiring_date\"\n",
    "df['expiring_date'].unique()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5ca62738-87ad-4093-8ee7-bc80b06b1c0d",
   "metadata": {},
   "source": [
    "**Nota:**\n",
    "\n",
    "Analisando os dados, verifica-se que existem diferentes formatos (uns estão serparados por / e outros por -)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "27486029-2f58-46d1-b4b7-9260cd5fecc5",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Uniformizar o formato da data\n",
    "df['expiring_date'] =  df['expiring_date'] .str.replace(\"-\" ,  \"/\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "a90aa793-99cc-4ea8-afee-868aeb306a68",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['03/10/2021', '02/10/2021', '25/10/2021', '26/10/2021',\n",
       "       '27/10/2021', '15/10/2021', '18/10/2021', '28/10/2021',\n",
       "       '16/10/2021', '23/10/2021', '07/10/2021', '30/10/2021',\n",
       "       '14/10/2021', '21/10/2021', '12/10/2021', '09/10/2021',\n",
       "       '19/10/2021', '05/10/2021', '06/10/2021', '11/10/2021',\n",
       "       '24/10/2021', '13/10/2021', '17/10/2021', '10/10/2021',\n",
       "       '08/10/2021', '22/10/2021', '01/11/2021', '20/10/2021',\n",
       "       '29/10/2021', '31/10/2021', '01/10/2021', '04/10/2021',\n",
       "       '20/11/2021', '02/11/2021', '19/11/2021', '06/11/2021',\n",
       "       '07/11/2021', '08/11/2021', '03/11/2021', '18/11/2021',\n",
       "       '13/11/2021', '10/11/2021', '09/11/2021', '05/11/2021',\n",
       "       '11/11/2021'], dtype=object)"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['expiring_date'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "f3cd7728-bc8d-4b6c-8b75-3e375c90ff84",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "#Converter em formato data\n",
    "df['expiring_date'] = pd.to_datetime(df['expiring_date'], format='%d/%m/%Y')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "9711d4c8-8ce5-4d0e-a822-a90b1cb64d42",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['2021-10-01', '2021-10-13', '2021-10-15', '2021-10-17',\n",
       "       '2021-10-11', '2021-10-14', '2021-10-20', '2021-10-06',\n",
       "       '2021-10-21', '2021-10-28', '2021-10-27', '2021-10-23',\n",
       "       '2021-10-05', '2021-10-29', '2021-10-12', '2021-10-22',\n",
       "       '2021-10-10', '2021-10-25', '2021-10-08', '2021-10-18',\n",
       "       '2021-10-26', '2021-10-30', '2021-10-07', '2021-10-02',\n",
       "       '2021-10-19', '2021-10-03', '2021-10-24', '2021-10-09',\n",
       "       '2021-10-04', '2021-10-31', '2021-10-16'], dtype=object)"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Verificar os valores da array para \"labelling_date\"\n",
    "df['labelling_date'].unique()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a928417b-cd35-47f4-ad26-975fd5f670d4",
   "metadata": {},
   "source": [
    "**Nota:**\n",
    "\n",
    "Analisando os dados, verifica-se que não existem diferenças nos dados. No entanto, é necessário normalizar com base na coluna anterior (expering_date) quanto ao formato da data DD/MM/YYYY e converter a variável em data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "d5004283-b907-418f-b87a-74dd8bbda693",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Converter em formato data\n",
    "df['labelling_date'] = pd.to_datetime(df['labelling_date'], format='%Y-%m-%d')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "485c1d91-04ae-40b6-9668-96c6a7239262",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['2021-10-02', nan, '2021-10-03', '2021-10-14', '2021-10-15',\n",
       "       '2021-10-16', '2021-10-17', '2021-10-18', '2021-10-19',\n",
       "       '2021-10-20', '2021-10-22', '2021-10-21', '2021-10-23',\n",
       "       '2021-10-12', '2021-10-24', '2021-10-25', '2021-10-26',\n",
       "       '2021-10-08', '2021-10-10', '2021-10-11', '2021-10-28',\n",
       "       '2021-10-27', '2021-10-06', '2021-10-29', '2021-10-13',\n",
       "       '2021-10-09', '2021-10-07', '2021-10-30', '2021-10-04',\n",
       "       '2021-10-05', '2021-10-31', '2021-11-01', '2021-10-01',\n",
       "       '2021-11-02', '2021-11-06', '2021-11-03', '2021-11-04',\n",
       "       '2021-11-14', '2021-11-12', '2021-11-10', '2021-11-05',\n",
       "       '2021-11-17', '2021-11-11', '2021-11-13', '2021-11-18',\n",
       "       '2021-11-08'], dtype=object)"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Verificar os valores da array para \"sell_date\"\n",
    "df['sell_date'].unique()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "218510b4-bf9a-49eb-b46b-009d4bda0ae0",
   "metadata": {},
   "source": [
    "**Nota:**\n",
    "\n",
    "Analisando os dados, verifica-se que:\n",
    "- Existem diferentes formatos (uns estão serparados por / e outros por -);\n",
    "- Existe tbm um NaN (Nan não parece um valor real uma vez que não foi nada vendido)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "186212a0-01d9-43d3-907d-62695da68d8c",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Converter em formato data\n",
    "df['sell_date'] = pd.to_datetime(df['sell_date'], format='%Y-%m-%d')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "0fdccb4c-4046-49eb-8778-ed4a234249b3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>idstore</th>\n",
       "      <th>sku</th>\n",
       "      <th>brand</th>\n",
       "      <th>Payment_method</th>\n",
       "      <th>type</th>\n",
       "      <th>district</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>150054</td>\n",
       "      <td>150054</td>\n",
       "      <td>150054</td>\n",
       "      <td>150054</td>\n",
       "      <td>150054</td>\n",
       "      <td>150054</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>332</td>\n",
       "      <td>319</td>\n",
       "      <td>42</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>217</td>\n",
       "      <td>227</td>\n",
       "      <td>Marca_2</td>\n",
       "      <td>N/A</td>\n",
       "      <td>Medium</td>\n",
       "      <td>Lisboa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>2443</td>\n",
       "      <td>8971</td>\n",
       "      <td>106163</td>\n",
       "      <td>69543</td>\n",
       "      <td>62590</td>\n",
       "      <td>14888</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       idstore     sku    brand Payment_method    type district\n",
       "count   150054  150054   150054         150054  150054   150054\n",
       "unique     332     319       42              3       4       18\n",
       "top        217     227  Marca_2            N/A  Medium   Lisboa\n",
       "freq      2443    8971   106163          69543   62590    14888"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Identificar as principais estatísticas descritivas para todas as variáveiveis\n",
    "df.describe(include = ['O'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "9a8386cd-4995-4f99-82d6-7e1237ef8b43",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Large', 'Medium', 'Small', 0], dtype=object)"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Verificar os valores da array para \"type\"\n",
    "df['type'].unique()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3b3d03d4-89dd-40b7-a8cf-e7266b4f94ae",
   "metadata": {},
   "source": [
    "**Conclões:** \n",
    "- Existem valores com Zero, é necessário tratar estes dados.\n",
    "\n",
    "*Próximos passos:*\n",
    "\n",
    "Para tratar os dados com valor Zero, a melhor opção será utilizar a moda para substituir os Zeros pelo valor mais frequente no dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "9889610c-4cbd-4e95-822a-0028899625dd",
   "metadata": {},
   "outputs": [],
   "source": [
    "#CalcuLar a moda para a coluna \"type\" e substituir os zerops pela moda calcular\n",
    "mode_value = df['type'].mode()[0]\n",
    "df['type'] = df['type'].replace(0, mode_value)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "c43b9050-1117-47f7-b0f0-a3fb68a5af5f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Large', 'Medium', 'Small'], dtype=object)"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Visualizar a array alterada\n",
    "df['type'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "a860bb43-6e7a-4aec-86f4-771348efbc93",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Évora', 'Bragança', 'Lisboa', 'Porto', 'Coimbra', 'Guarda',\n",
       "       'Vila Real', 'Faro', 'Beja', 'Leiria', 'Viana do Castelo',\n",
       "       'Castelo Branco', 'Santarém', 'Setúbal', 'Portalegre', 'Aveiro',\n",
       "       'Braga', 'Viseu'], dtype=object)"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Verificar os valores da array para \"district\"\n",
    "df['district'].unique()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d1f2924e-ac50-4e07-acc3-a4443567be89",
   "metadata": {},
   "source": [
    "<div style=\"background-color: '#006400'; padding: 15px; border: 1px solid #003366\";\">\n",
    "    <a id='visual'></a>\n",
    "    <h2 style=\"color: #003366; margin: 0;\">2.3. Exploração Visual</h2>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c018f786-b50b-46fa-aead-ec24b4349e49",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true
   },
   "source": [
    "<div style=\"background-color: '#006400'; padding: 15px; border: 1px solid #003366\";\">\n",
    "    <a id='num3'></a>\n",
    "    <h3 style=\"color: #003366; margin: 0;\">2.3.1. Variáveis Numéricas</h3>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "8a3c1c7e-22d1-4898-bb68-ca8c2fa8205a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "oldpvp                94225.456797\n",
       "labelqty                  0.000000\n",
       "weight (g)                2.306941\n",
       "Margin (%)               -1.260135\n",
       "Profit (€)           126938.236692\n",
       "perc_expiring_sku        -0.022512\n",
       "sold                     -1.978515\n",
       "selling_square_ft         0.693269\n",
       "newpvp                88319.702455\n",
       "discount                 24.133569\n",
       "dtype: float64"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Verificar a curtose para as variáveis numéricas\n",
    "df.kurt(numeric_only=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "160e1d89-7306-48ea-9cc1-74deb6b8b7e7",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Verificar a distribuição dos dados e detectar assimetrias usando Histogramas\n",
    "\n",
    "def visualizar_distribuicoes(dataset):\n",
    "    df_numerico = dataset  # Apenas colunas numéricas\n",
    "    for coluna in df_numerico.columns:\n",
    "        fig, axes = plt.subplots(1, 3, figsize=(18, 5))\n",
    "        # Histograma\n",
    "        sns.histplot(df[coluna], bins=30, kde=True, ax=axes[0])\n",
    "        axes[0].set_title(f\"Histograma - {coluna}\")\n",
    "        # Boxplot\n",
    "        sns.boxplot(x=df[coluna], ax=axes[1])\n",
    "        axes[1].set_title(f\"Boxplot - {coluna}\")\n",
    "        # KDE Plot\n",
    "        sns.kdeplot(df[coluna], fill=True, ax=axes[2])\n",
    "        axes[2].set_title(f\"KDE - {coluna}\")\n",
    "        plt.tight_layout()  # Para não haver sobreposição\n",
    "        plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "9d03c844-dec0-40c2-b7eb-315004089853",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1800x500 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1800x500 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1800x500 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "visualizar_distribuicoes (df[['oldpvp', 'Profit (€)', 'newpvp']])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "baa219ce-ffdb-4157-b577-01260976344f",
   "metadata": {},
   "source": [
    "**Conclusões:**\n",
    "\n",
    "- Todas as três variáveis apresentam distribuições extremamente enviesadas à direita (assimetria positiva);\n",
    "- A maior parte dos valores está muito próxima de zero, com alguns valores extremos muito altos (outliers);\n",
    "- Os boxplots mostram pontos isolados bem distantes da maior parte dos dados, confirmando a presença de outliers severos;\n",
    "- Os histogramas e KDEs mostram que quase todos os valores estão agrupados em um intervalo muito pequeno próximo de zero. Isto pode indicar que a maioria das variáveis tem valores baixos, com alguns casos excepcionalmente altos.\n",
    "\n",
    "*Próximos passos*\n",
    "- Analisar os valores onde olpvp é superior a 450 (dois outliers, um entre 450 e 600, outro superior a 800);\n",
    "- Analisar os valores onde Profit é supeior a 80 (um outlier);\n",
    "- Analisar os valores onde newpvp é superior a 200 (dois outliers, um entre 200 e 300, outro superior a 400)."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a64b9bda-bfe7-4f30-aef7-50cc0c7e080a",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true
   },
   "source": [
    "<div style=\"background-color: '#006400'; padding: 15px; border: 1px solid #003366\";\">\n",
    "    <a id='out'></a>\n",
    "    <h3 style=\"color: #003366; margin: 0;\">2.3.1.1. Analise e Tratamento dos Outliers</h3>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "ad7ad223-dc3b-4fc0-9547-e3b96d6a4449",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>idstore</th>\n",
       "      <th>sku</th>\n",
       "      <th>brand</th>\n",
       "      <th>oldpvp</th>\n",
       "      <th>labelqty</th>\n",
       "      <th>weight (g)</th>\n",
       "      <th>Payment_method</th>\n",
       "      <th>Margin (%)</th>\n",
       "      <th>Profit (€)</th>\n",
       "      <th>perc_expiring_sku</th>\n",
       "      <th>expiring_date</th>\n",
       "      <th>labelling_date</th>\n",
       "      <th>sell_date</th>\n",
       "      <th>sold</th>\n",
       "      <th>type</th>\n",
       "      <th>selling_square_ft</th>\n",
       "      <th>district</th>\n",
       "      <th>newpvp</th>\n",
       "      <th>discount</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>50171</th>\n",
       "      <td>289</td>\n",
       "      <td>108</td>\n",
       "      <td>Marca_20</td>\n",
       "      <td>999.0</td>\n",
       "      <td>1</td>\n",
       "      <td>227.0</td>\n",
       "      <td>N/A</td>\n",
       "      <td>20</td>\n",
       "      <td>99.9</td>\n",
       "      <td>0.101266</td>\n",
       "      <td>2021-10-10</td>\n",
       "      <td>2021-10-02</td>\n",
       "      <td>NaT</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Small</td>\n",
       "      <td>342.0</td>\n",
       "      <td>Viana do Castelo</td>\n",
       "      <td>499.5</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      idstore  sku     brand  oldpvp  labelqty  weight (g) Payment_method  \\\n",
       "50171     289  108  Marca_20   999.0         1       227.0            N/A   \n",
       "\n",
       "       Margin (%)  Profit (€)  perc_expiring_sku expiring_date labelling_date  \\\n",
       "50171          20        99.9           0.101266    2021-10-10     2021-10-02   \n",
       "\n",
       "      sell_date  sold   type  selling_square_ft          district  newpvp  \\\n",
       "50171       NaT   0.0  Small              342.0  Viana do Castelo   499.5   \n",
       "\n",
       "       discount  \n",
       "50171       0.5  "
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Analisar a linha em que \"oldpvp\" tem um outlier superior a 800\n",
    "df[df['oldpvp']>800]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d2895ab2-d832-44e9-ade5-bfe3adbc5101",
   "metadata": {},
   "source": [
    "**Conclusões:**\n",
    "\n",
    "Verifica-se que o valor das variáveis \"oldpvp\", \"Profit\" e \"newpvp\" são bastante discrepantes quando comparados com os valores gerais do dataset. Por esse motivo, a solução para tratar os dados é eliminar a linha em questão por se tratar de uma fração insignificante para o dataset, não afetando a analise dos dados e o objetivo do projeto."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "5624195a-f2df-4f22-b834-7e868d702841",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Eliminar a linha analisada\n",
    "df=df[~((df['oldpvp']>800)&(df['newpvp']>400)&(df['Profit (€)']>80))]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "1c85b712-a08f-4f04-9003-64ac32be92d0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>idstore</th>\n",
       "      <th>sku</th>\n",
       "      <th>brand</th>\n",
       "      <th>oldpvp</th>\n",
       "      <th>labelqty</th>\n",
       "      <th>weight (g)</th>\n",
       "      <th>Payment_method</th>\n",
       "      <th>Margin (%)</th>\n",
       "      <th>Profit (€)</th>\n",
       "      <th>perc_expiring_sku</th>\n",
       "      <th>expiring_date</th>\n",
       "      <th>labelling_date</th>\n",
       "      <th>sell_date</th>\n",
       "      <th>sold</th>\n",
       "      <th>type</th>\n",
       "      <th>selling_square_ft</th>\n",
       "      <th>district</th>\n",
       "      <th>newpvp</th>\n",
       "      <th>discount</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Marca_1</td>\n",
       "      <td>4.22</td>\n",
       "      <td>1</td>\n",
       "      <td>260.0</td>\n",
       "      <td>Card</td>\n",
       "      <td>16</td>\n",
       "      <td>0.3376</td>\n",
       "      <td>0.010050</td>\n",
       "      <td>2021-10-03</td>\n",
       "      <td>2021-10-01</td>\n",
       "      <td>2021-10-02</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Large</td>\n",
       "      <td>4762.0</td>\n",
       "      <td>Évora</td>\n",
       "      <td>2.11</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Marca_1</td>\n",
       "      <td>3.96</td>\n",
       "      <td>1</td>\n",
       "      <td>260.0</td>\n",
       "      <td>N/A</td>\n",
       "      <td>16</td>\n",
       "      <td>0.3168</td>\n",
       "      <td>0.005025</td>\n",
       "      <td>2021-10-02</td>\n",
       "      <td>2021-10-01</td>\n",
       "      <td>NaT</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Large</td>\n",
       "      <td>4762.0</td>\n",
       "      <td>Évora</td>\n",
       "      <td>1.98</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Marca_1</td>\n",
       "      <td>4.74</td>\n",
       "      <td>1</td>\n",
       "      <td>260.0</td>\n",
       "      <td>Cash</td>\n",
       "      <td>16</td>\n",
       "      <td>0.3792</td>\n",
       "      <td>0.010050</td>\n",
       "      <td>2021-10-03</td>\n",
       "      <td>2021-10-01</td>\n",
       "      <td>2021-10-03</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Large</td>\n",
       "      <td>4762.0</td>\n",
       "      <td>Évora</td>\n",
       "      <td>2.37</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Marca_1</td>\n",
       "      <td>4.20</td>\n",
       "      <td>1</td>\n",
       "      <td>260.0</td>\n",
       "      <td>Card</td>\n",
       "      <td>16</td>\n",
       "      <td>0.3360</td>\n",
       "      <td>0.010050</td>\n",
       "      <td>2021-10-03</td>\n",
       "      <td>2021-10-01</td>\n",
       "      <td>2021-10-02</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Large</td>\n",
       "      <td>4762.0</td>\n",
       "      <td>Évora</td>\n",
       "      <td>2.10</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Marca_1</td>\n",
       "      <td>4.62</td>\n",
       "      <td>1</td>\n",
       "      <td>260.0</td>\n",
       "      <td>Cash</td>\n",
       "      <td>16</td>\n",
       "      <td>0.3696</td>\n",
       "      <td>0.010050</td>\n",
       "      <td>2021-10-03</td>\n",
       "      <td>2021-10-01</td>\n",
       "      <td>2021-10-03</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Large</td>\n",
       "      <td>4762.0</td>\n",
       "      <td>Évora</td>\n",
       "      <td>2.31</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>150049</th>\n",
       "      <td>193</td>\n",
       "      <td>318</td>\n",
       "      <td>Marca_2</td>\n",
       "      <td>2.49</td>\n",
       "      <td>1</td>\n",
       "      <td>97.0</td>\n",
       "      <td>N/A</td>\n",
       "      <td>11</td>\n",
       "      <td>0.1364</td>\n",
       "      <td>0.100629</td>\n",
       "      <td>2021-10-19</td>\n",
       "      <td>2021-10-03</td>\n",
       "      <td>NaT</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Medium</td>\n",
       "      <td>5048.0</td>\n",
       "      <td>Viseu</td>\n",
       "      <td>1.24</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>150050</th>\n",
       "      <td>203</td>\n",
       "      <td>318</td>\n",
       "      <td>Marca_2</td>\n",
       "      <td>2.49</td>\n",
       "      <td>1</td>\n",
       "      <td>97.0</td>\n",
       "      <td>Cash</td>\n",
       "      <td>11</td>\n",
       "      <td>0.1364</td>\n",
       "      <td>0.113208</td>\n",
       "      <td>2021-10-19</td>\n",
       "      <td>2021-10-01</td>\n",
       "      <td>2021-10-02</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Medium</td>\n",
       "      <td>9370.0</td>\n",
       "      <td>Faro</td>\n",
       "      <td>1.24</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>150051</th>\n",
       "      <td>203</td>\n",
       "      <td>318</td>\n",
       "      <td>Marca_2</td>\n",
       "      <td>2.49</td>\n",
       "      <td>1</td>\n",
       "      <td>97.0</td>\n",
       "      <td>Cash</td>\n",
       "      <td>11</td>\n",
       "      <td>0.1364</td>\n",
       "      <td>0.113208</td>\n",
       "      <td>2021-10-19</td>\n",
       "      <td>2021-10-01</td>\n",
       "      <td>2021-10-02</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Medium</td>\n",
       "      <td>9370.0</td>\n",
       "      <td>Faro</td>\n",
       "      <td>1.24</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>150052</th>\n",
       "      <td>139</td>\n",
       "      <td>319</td>\n",
       "      <td>Marca_24</td>\n",
       "      <td>3.49</td>\n",
       "      <td>1</td>\n",
       "      <td>141.0</td>\n",
       "      <td>Cash</td>\n",
       "      <td>19</td>\n",
       "      <td>0.4636</td>\n",
       "      <td>0.092437</td>\n",
       "      <td>2021-10-17</td>\n",
       "      <td>2021-10-06</td>\n",
       "      <td>2021-10-11</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Small</td>\n",
       "      <td>1061.0</td>\n",
       "      <td>Portalegre</td>\n",
       "      <td>2.44</td>\n",
       "      <td>0.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>150053</th>\n",
       "      <td>139</td>\n",
       "      <td>319</td>\n",
       "      <td>Marca_24</td>\n",
       "      <td>3.49</td>\n",
       "      <td>1</td>\n",
       "      <td>141.0</td>\n",
       "      <td>N/A</td>\n",
       "      <td>19</td>\n",
       "      <td>0.4636</td>\n",
       "      <td>0.092437</td>\n",
       "      <td>2021-10-17</td>\n",
       "      <td>2021-10-06</td>\n",
       "      <td>NaT</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Small</td>\n",
       "      <td>1061.0</td>\n",
       "      <td>Portalegre</td>\n",
       "      <td>2.44</td>\n",
       "      <td>0.3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>150053 rows × 19 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       idstore  sku     brand  oldpvp  labelqty  weight (g) Payment_method  \\\n",
       "0            1    1   Marca_1    4.22         1       260.0           Card   \n",
       "1            1    1   Marca_1    3.96         1       260.0            N/A   \n",
       "2            1    1   Marca_1    4.74         1       260.0           Cash   \n",
       "3            1    1   Marca_1    4.20         1       260.0           Card   \n",
       "4            1    1   Marca_1    4.62         1       260.0           Cash   \n",
       "...        ...  ...       ...     ...       ...         ...            ...   \n",
       "150049     193  318   Marca_2    2.49         1        97.0            N/A   \n",
       "150050     203  318   Marca_2    2.49         1        97.0           Cash   \n",
       "150051     203  318   Marca_2    2.49         1        97.0           Cash   \n",
       "150052     139  319  Marca_24    3.49         1       141.0           Cash   \n",
       "150053     139  319  Marca_24    3.49         1       141.0            N/A   \n",
       "\n",
       "        Margin (%)  Profit (€)  perc_expiring_sku expiring_date  \\\n",
       "0               16      0.3376           0.010050    2021-10-03   \n",
       "1               16      0.3168           0.005025    2021-10-02   \n",
       "2               16      0.3792           0.010050    2021-10-03   \n",
       "3               16      0.3360           0.010050    2021-10-03   \n",
       "4               16      0.3696           0.010050    2021-10-03   \n",
       "...            ...         ...                ...           ...   \n",
       "150049          11      0.1364           0.100629    2021-10-19   \n",
       "150050          11      0.1364           0.113208    2021-10-19   \n",
       "150051          11      0.1364           0.113208    2021-10-19   \n",
       "150052          19      0.4636           0.092437    2021-10-17   \n",
       "150053          19      0.4636           0.092437    2021-10-17   \n",
       "\n",
       "       labelling_date  sell_date  sold    type  selling_square_ft    district  \\\n",
       "0          2021-10-01 2021-10-02   1.0   Large             4762.0       Évora   \n",
       "1          2021-10-01        NaT   0.0   Large             4762.0       Évora   \n",
       "2          2021-10-01 2021-10-03   1.0   Large             4762.0       Évora   \n",
       "3          2021-10-01 2021-10-02   1.0   Large             4762.0       Évora   \n",
       "4          2021-10-01 2021-10-03   NaN   Large             4762.0       Évora   \n",
       "...               ...        ...   ...     ...                ...         ...   \n",
       "150049     2021-10-03        NaT   0.0  Medium             5048.0       Viseu   \n",
       "150050     2021-10-01 2021-10-02   1.0  Medium             9370.0        Faro   \n",
       "150051     2021-10-01 2021-10-02   1.0  Medium             9370.0        Faro   \n",
       "150052     2021-10-06 2021-10-11   1.0   Small             1061.0  Portalegre   \n",
       "150053     2021-10-06        NaT   0.0   Small             1061.0  Portalegre   \n",
       "\n",
       "        newpvp  discount  \n",
       "0         2.11       0.5  \n",
       "1         1.98       0.5  \n",
       "2         2.37       0.5  \n",
       "3         2.10       0.5  \n",
       "4         2.31       0.5  \n",
       "...        ...       ...  \n",
       "150049    1.24       0.5  \n",
       "150050    1.24       0.5  \n",
       "150051    1.24       0.5  \n",
       "150052    2.44       0.3  \n",
       "150053    2.44       0.3  \n",
       "\n",
       "[150053 rows x 19 columns]"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "50bcfaa2-bd8e-4d10-a206-f3baebf5e5b6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>idstore</th>\n",
       "      <th>sku</th>\n",
       "      <th>brand</th>\n",
       "      <th>oldpvp</th>\n",
       "      <th>labelqty</th>\n",
       "      <th>weight (g)</th>\n",
       "      <th>Payment_method</th>\n",
       "      <th>Margin (%)</th>\n",
       "      <th>Profit (€)</th>\n",
       "      <th>perc_expiring_sku</th>\n",
       "      <th>expiring_date</th>\n",
       "      <th>labelling_date</th>\n",
       "      <th>sell_date</th>\n",
       "      <th>sold</th>\n",
       "      <th>type</th>\n",
       "      <th>selling_square_ft</th>\n",
       "      <th>district</th>\n",
       "      <th>newpvp</th>\n",
       "      <th>discount</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>452</th>\n",
       "      <td>64</td>\n",
       "      <td>4</td>\n",
       "      <td>Marca_3</td>\n",
       "      <td>500.0</td>\n",
       "      <td>1</td>\n",
       "      <td>134.0</td>\n",
       "      <td>Card</td>\n",
       "      <td>17</td>\n",
       "      <td>0.3315</td>\n",
       "      <td>0.25</td>\n",
       "      <td>2021-10-30</td>\n",
       "      <td>2021-10-29</td>\n",
       "      <td>2021-10-29</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Medium</td>\n",
       "      <td>7879.0</td>\n",
       "      <td>Santarém</td>\n",
       "      <td>250.0</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    idstore sku    brand  oldpvp  labelqty  weight (g) Payment_method  \\\n",
       "452      64   4  Marca_3   500.0         1       134.0           Card   \n",
       "\n",
       "     Margin (%)  Profit (€)  perc_expiring_sku expiring_date labelling_date  \\\n",
       "452          17      0.3315               0.25    2021-10-30     2021-10-29   \n",
       "\n",
       "     sell_date  sold    type  selling_square_ft  district  newpvp  discount  \n",
       "452 2021-10-29   1.0  Medium             7879.0  Santarém   250.0       0.5  "
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Analisar a linha em que \"oldpvp\" tem um outlier superior a 400\n",
    "df[df['oldpvp']>400]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0396cd16-c4c4-47a8-b391-8ab43616db0f",
   "metadata": {},
   "source": [
    "**Conclões:**\n",
    "\n",
    "Pela análise da linha, verifica-se que os valores das variáveis \"oldpvp\", \"newpvp\", \"discount\", \"Profit\" não são coerentes, pelo que é necessário realizar uma análise mais profunda para estes valores quando sku=4."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "f4095736-6828-4204-83da-2b188b89a0fe",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "oldpvp  newpvp    discount  Profit (€)\n",
       "2.79    1.9500    0.30      0.3315        426\n",
       "        2.0900    0.25      0.3553         27\n",
       "        0.0279    0.99      0.3315          1\n",
       "46.00   1.9500    0.30      0.3315          1\n",
       "500.00  250.0000  0.50      0.3315          1\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Analisar as colunas \"oldpvp\", \"newpvp\", \"discount\", \"Profit\" para sku=4\n",
    "df[df['sku'] == '4'][['oldpvp','newpvp','discount','Profit (€)']].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1d07ce6d-17a5-412d-9ebf-ceb143782754",
   "metadata": {},
   "source": [
    "**Conclusões:**\n",
    "- Verifica-se que existem dois outliers que é necessário tratar (oldpvp=46 e oldpvp=500).\n",
    "- Verifica-se que para os valores de discount, newpvp e profit quando oldpvp=46 (discount = 0.3, newpvp = 1.95 e o profit = 0.3315), o valor de oldpvp é 2.79. Conclui-se que o valor 46 para oldpvp é um erro e deve ser substituído pelo valor correto de 2.79.\n",
    "\n",
    "*Próximos passos*\n",
    "- Tratar oldpvp=46;\n",
    "- Tratar as variáveis oldpvp, newpvp e dicount para oldpvp=500."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "f43d7603-89f3-48df-a196-f15d573a715f",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Substituir o valor de oldpvp de 46 para 2.79\n",
    "df.loc[(df['oldpvp'] == 46) & (df['sku'] == '4') & (df['discount'] == 0.30) & (df['Profit (€)'] == 0.3315),'oldpvp']=2.79"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "id": "19dc6b31-bc3d-4a8a-8020-09b1b3bcf1cb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "oldpvp  newpvp    discount  Profit (€)\n",
       "2.79    1.9500    0.30      0.3315        427\n",
       "        2.0900    0.25      0.3553         27\n",
       "        0.0279    0.99      0.3315          1\n",
       "500.00  250.0000  0.50      0.3315          1\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 87,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Verificar a alteração\n",
    "df[df['sku'] == '4'][['oldpvp','newpvp','discount','Profit (€)']].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d0407f74-9811-4cab-a4fb-135e6042f8bb",
   "metadata": {},
   "source": [
    "*NOTA:*\n",
    "\n",
    "Analisando o caso em que o oldpvp=500 e newpvp=250, assume-se que estes valores estão errados devido a, para o mesmo produto, não ser possível existirem diferentes valores de oldpvp principalmente quando em todas as lojas oldpvp é 2.79 e somente numa o valor é igual a 500, sendo que também o Profit é 0.3315. Desta forma, é necessário substituir os valores pelos os valores de profit=0.3315."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "11aefa80-12ee-49f8-a1e9-456b8ee49b07",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Substituir os valores de oldpvp=500\n",
    "df.loc[(df['oldpvp'] == 500) & (df['sku'] == '4') & (df['Profit (€)'] == 0.3315),'oldpvp']=2.79 #substituir oldpvp por 2.79\n",
    "df.loc[(df['newpvp'] == 250) & (df['sku'] == '4') & (df['Profit (€)'] == 0.3315),'newpvp']=1.95 #substituir newpvp por 1.95\n",
    "df.loc[(df['discount'] == 0.5) & (df['sku'] == '4') & (df['Profit (€)'] == 0.3315),'discount']=0.3 #substituir discount por 0.3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "id": "77e9e405-f397-423e-9ecc-f8e89eeb9d47",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "oldpvp  newpvp  discount  Profit (€)\n",
       "2.79    1.9500  0.30      0.3315        428\n",
       "        2.0900  0.25      0.3553         27\n",
       "        0.0279  0.99      0.3315          1\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Verificar a alteração\n",
    "df[df['sku'] == '4'][['oldpvp','newpvp','discount','Profit (€)']].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a21ba090-4a81-49ff-9a0f-a24d380198e6",
   "metadata": {},
   "source": [
    "*NOTA:*\n",
    "\n",
    "Analisando os dados, verifica-se que para Profit = 0.3315 e oldpvp=2.79 existem dois valores diferentes para as variáveis newpvp e discount, o que não faz sentido. Sendo que para os dois valores diferentes, só um deles está localizado em uma única linha, é necessáiro analisar essa mesma."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "id": "f58c78de-242f-4572-8e63-37758260ecba",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>idstore</th>\n",
       "      <th>sku</th>\n",
       "      <th>brand</th>\n",
       "      <th>oldpvp</th>\n",
       "      <th>labelqty</th>\n",
       "      <th>weight (g)</th>\n",
       "      <th>Payment_method</th>\n",
       "      <th>Margin (%)</th>\n",
       "      <th>Profit (€)</th>\n",
       "      <th>perc_expiring_sku</th>\n",
       "      <th>expiring_date</th>\n",
       "      <th>labelling_date</th>\n",
       "      <th>sell_date</th>\n",
       "      <th>sold</th>\n",
       "      <th>type</th>\n",
       "      <th>selling_square_ft</th>\n",
       "      <th>district</th>\n",
       "      <th>newpvp</th>\n",
       "      <th>discount</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>550</th>\n",
       "      <td>83</td>\n",
       "      <td>4</td>\n",
       "      <td>Marca_3</td>\n",
       "      <td>2.79</td>\n",
       "      <td>1</td>\n",
       "      <td>134.0</td>\n",
       "      <td>N/A</td>\n",
       "      <td>17</td>\n",
       "      <td>0.3315</td>\n",
       "      <td>0.5</td>\n",
       "      <td>2021-10-09</td>\n",
       "      <td>2021-10-07</td>\n",
       "      <td>NaT</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Medium</td>\n",
       "      <td>4330.0</td>\n",
       "      <td>Braga</td>\n",
       "      <td>0.0279</td>\n",
       "      <td>0.99</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    idstore sku    brand  oldpvp  labelqty  weight (g) Payment_method  \\\n",
       "550      83   4  Marca_3    2.79         1       134.0            N/A   \n",
       "\n",
       "     Margin (%)  Profit (€)  perc_expiring_sku expiring_date labelling_date  \\\n",
       "550          17      0.3315                0.5    2021-10-09     2021-10-07   \n",
       "\n",
       "    sell_date  sold    type  selling_square_ft district  newpvp  discount  \n",
       "550       NaT   0.0  Medium             4330.0    Braga  0.0279      0.99  "
      ]
     },
     "execution_count": 92,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Analisar a linha onde oldpvp=2.79, newpvp=0.0279 e discount=0.99 para sku=4\n",
    "df[(df['sku'] == '4') & (df['oldpvp']==2.79) & (df['newpvp']==0.0279) & (df['discount']==0.99)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "id": "46cdf437-69f2-40b9-a5ab-98b551f47d1f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>idstore</th>\n",
       "      <th>sku</th>\n",
       "      <th>brand</th>\n",
       "      <th>oldpvp</th>\n",
       "      <th>labelqty</th>\n",
       "      <th>weight (g)</th>\n",
       "      <th>Payment_method</th>\n",
       "      <th>Margin (%)</th>\n",
       "      <th>Profit (€)</th>\n",
       "      <th>perc_expiring_sku</th>\n",
       "      <th>expiring_date</th>\n",
       "      <th>labelling_date</th>\n",
       "      <th>sell_date</th>\n",
       "      <th>sold</th>\n",
       "      <th>type</th>\n",
       "      <th>selling_square_ft</th>\n",
       "      <th>district</th>\n",
       "      <th>newpvp</th>\n",
       "      <th>discount</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>548</th>\n",
       "      <td>83</td>\n",
       "      <td>4</td>\n",
       "      <td>Marca_3</td>\n",
       "      <td>2.79</td>\n",
       "      <td>1</td>\n",
       "      <td>134.0</td>\n",
       "      <td>Card</td>\n",
       "      <td>17</td>\n",
       "      <td>0.3315</td>\n",
       "      <td>0.50</td>\n",
       "      <td>2021-10-09</td>\n",
       "      <td>2021-10-07</td>\n",
       "      <td>2021-10-08</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Medium</td>\n",
       "      <td>4330.0</td>\n",
       "      <td>Braga</td>\n",
       "      <td>1.9500</td>\n",
       "      <td>0.30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549</th>\n",
       "      <td>83</td>\n",
       "      <td>4</td>\n",
       "      <td>Marca_3</td>\n",
       "      <td>2.79</td>\n",
       "      <td>1</td>\n",
       "      <td>134.0</td>\n",
       "      <td>Card</td>\n",
       "      <td>17</td>\n",
       "      <td>0.3315</td>\n",
       "      <td>0.50</td>\n",
       "      <td>2021-10-09</td>\n",
       "      <td>2021-10-07</td>\n",
       "      <td>2021-10-08</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Medium</td>\n",
       "      <td>4330.0</td>\n",
       "      <td>Braga</td>\n",
       "      <td>1.9500</td>\n",
       "      <td>0.30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>550</th>\n",
       "      <td>83</td>\n",
       "      <td>4</td>\n",
       "      <td>Marca_3</td>\n",
       "      <td>2.79</td>\n",
       "      <td>1</td>\n",
       "      <td>134.0</td>\n",
       "      <td>N/A</td>\n",
       "      <td>17</td>\n",
       "      <td>0.3315</td>\n",
       "      <td>0.50</td>\n",
       "      <td>2021-10-09</td>\n",
       "      <td>2021-10-07</td>\n",
       "      <td>NaT</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Medium</td>\n",
       "      <td>4330.0</td>\n",
       "      <td>Braga</td>\n",
       "      <td>0.0279</td>\n",
       "      <td>0.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>551</th>\n",
       "      <td>83</td>\n",
       "      <td>4</td>\n",
       "      <td>Marca_3</td>\n",
       "      <td>2.79</td>\n",
       "      <td>1</td>\n",
       "      <td>134.0</td>\n",
       "      <td>Card</td>\n",
       "      <td>17</td>\n",
       "      <td>0.3315</td>\n",
       "      <td>0.25</td>\n",
       "      <td>2021-10-19</td>\n",
       "      <td>2021-10-18</td>\n",
       "      <td>2021-10-19</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Medium</td>\n",
       "      <td>4330.0</td>\n",
       "      <td>Braga</td>\n",
       "      <td>1.9500</td>\n",
       "      <td>0.30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>552</th>\n",
       "      <td>83</td>\n",
       "      <td>4</td>\n",
       "      <td>Marca_3</td>\n",
       "      <td>2.79</td>\n",
       "      <td>1</td>\n",
       "      <td>134.0</td>\n",
       "      <td>Cash</td>\n",
       "      <td>17</td>\n",
       "      <td>0.3315</td>\n",
       "      <td>0.25</td>\n",
       "      <td>2021-10-28</td>\n",
       "      <td>2021-10-27</td>\n",
       "      <td>2021-10-28</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Medium</td>\n",
       "      <td>4330.0</td>\n",
       "      <td>Braga</td>\n",
       "      <td>1.9500</td>\n",
       "      <td>0.30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>553</th>\n",
       "      <td>83</td>\n",
       "      <td>4</td>\n",
       "      <td>Marca_3</td>\n",
       "      <td>2.79</td>\n",
       "      <td>1</td>\n",
       "      <td>134.0</td>\n",
       "      <td>N/A</td>\n",
       "      <td>17</td>\n",
       "      <td>0.3315</td>\n",
       "      <td>0.25</td>\n",
       "      <td>2021-10-28</td>\n",
       "      <td>2021-10-27</td>\n",
       "      <td>NaT</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Medium</td>\n",
       "      <td>4330.0</td>\n",
       "      <td>Braga</td>\n",
       "      <td>1.9500</td>\n",
       "      <td>0.30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>554</th>\n",
       "      <td>83</td>\n",
       "      <td>4</td>\n",
       "      <td>Marca_3</td>\n",
       "      <td>2.79</td>\n",
       "      <td>1</td>\n",
       "      <td>134.0</td>\n",
       "      <td>N/A</td>\n",
       "      <td>17</td>\n",
       "      <td>0.3315</td>\n",
       "      <td>0.25</td>\n",
       "      <td>2021-10-28</td>\n",
       "      <td>2021-10-27</td>\n",
       "      <td>NaT</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Medium</td>\n",
       "      <td>4330.0</td>\n",
       "      <td>Braga</td>\n",
       "      <td>1.9500</td>\n",
       "      <td>0.30</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    idstore sku    brand  oldpvp  labelqty  weight (g) Payment_method  \\\n",
       "548      83   4  Marca_3    2.79         1       134.0           Card   \n",
       "549      83   4  Marca_3    2.79         1       134.0           Card   \n",
       "550      83   4  Marca_3    2.79         1       134.0            N/A   \n",
       "551      83   4  Marca_3    2.79         1       134.0           Card   \n",
       "552      83   4  Marca_3    2.79         1       134.0           Cash   \n",
       "553      83   4  Marca_3    2.79         1       134.0            N/A   \n",
       "554      83   4  Marca_3    2.79         1       134.0            N/A   \n",
       "\n",
       "     Margin (%)  Profit (€)  perc_expiring_sku expiring_date labelling_date  \\\n",
       "548          17      0.3315               0.50    2021-10-09     2021-10-07   \n",
       "549          17      0.3315               0.50    2021-10-09     2021-10-07   \n",
       "550          17      0.3315               0.50    2021-10-09     2021-10-07   \n",
       "551          17      0.3315               0.25    2021-10-19     2021-10-18   \n",
       "552          17      0.3315               0.25    2021-10-28     2021-10-27   \n",
       "553          17      0.3315               0.25    2021-10-28     2021-10-27   \n",
       "554          17      0.3315               0.25    2021-10-28     2021-10-27   \n",
       "\n",
       "     sell_date  sold    type  selling_square_ft district  newpvp  discount  \n",
       "548 2021-10-08   1.0  Medium             4330.0    Braga  1.9500      0.30  \n",
       "549 2021-10-08   1.0  Medium             4330.0    Braga  1.9500      0.30  \n",
       "550        NaT   0.0  Medium             4330.0    Braga  0.0279      0.99  \n",
       "551 2021-10-19   1.0  Medium             4330.0    Braga  1.9500      0.30  \n",
       "552 2021-10-28   1.0  Medium             4330.0    Braga  1.9500      0.30  \n",
       "553        NaT   0.0  Medium             4330.0    Braga  1.9500      0.30  \n",
       "554        NaT   0.0  Medium             4330.0    Braga  1.9500      0.30  "
      ]
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Analisar os valores de sku=4 para a loja 83\n",
    "df[(df['sku'] == '4') & (df['idstore']=='83')]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "76c9f9bd-f84d-4758-9ce0-b9fac3aea4dc",
   "metadata": {},
   "source": [
    "**Conclusões:**\n",
    "\n",
    "Para a loja 83, com base na visualização da tabela acima, verifica-se que o discount do produto é de 0.30 e o valor de newpvp é de 1.9500. Desta forma, é necessário corrigir o discount que está 0.99 para 0.30 e o newpvp que está a 0.0279 para 1.9500."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "id": "da329653-e1a2-4d99-95b9-b5f7deed9575",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Substituir os valores de discount e newpvp\n",
    "df.loc[(df['newpvp'] == 0.0279) & (df['sku'] == '4') & (df['Profit (€)'] == 0.3315),'newpvp']=1.95\n",
    "df.loc[(df['discount'] == 0.99) & (df['sku'] == '4') & (df['Profit (€)'] == 0.3315),'discount']=0.3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "id": "201a46e5-5d6b-498e-95ac-1f5bdb439313",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "oldpvp               33.899409\n",
       "labelqty              0.000000\n",
       "weight (g)            2.306997\n",
       "Margin (%)           -1.260139\n",
       "Profit (€)            3.822766\n",
       "perc_expiring_sku    -0.022494\n",
       "sold                 -1.978511\n",
       "selling_square_ft     0.693258\n",
       "newpvp                9.447681\n",
       "discount             23.466511\n",
       "dtype: float64"
      ]
     },
     "execution_count": 96,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Verificar os valores de curtose para as variáveis numéricas\n",
    "df.kurt(numeric_only=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "68b32b8c-a6b5-4706-822a-eed1b308cfa5",
   "metadata": {},
   "source": [
    "*NOTA:*\n",
    "\n",
    "Analisando os valores a cima, verifica-se que ainda existem valores elevados para as varáveis oldpvp e discount, pelo que é necessário verificar novamente estas variáveis quanto à existência de outliers."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "id": "afac335b-f4e8-4d04-a3c2-c0583ffc1bdf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1800x500 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1800x500 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1800x500 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Verificar a distribuição dos dados e detectar assimetrias usando Histogramas\n",
    "visualizar_distribuicoes (df[['oldpvp', 'Profit (€)', 'newpvp']])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e87d0d5d-2cc0-4f67-a8aa-947c3670cf52",
   "metadata": {},
   "source": [
    "**Conclusões:**\n",
    "\n",
    "- Todas as três variáveis apresentam distribuições extremamente enviesadas à direita (assimetria positiva);\n",
    "- A maior parte dos valores está muito próxima de zero, com alguns valores extremos muito altos (outliers);\n",
    "- Os boxplots mostram pontos isolados bem distantes da maior parte dos dados, confirmando a presença de outliers severos;\n",
    "- Os histogramas e KDEs mostram que quase todos os valores estão agrupados em um intervalo muito pequeno próximo de zero. Isto pode indicar que a maioria das variáveis tem valores baixos, com alguns casos excepcionalmente altos.\n",
    "\n",
    "*Próximos Passos:*\n",
    "\n",
    "- Analisar os valores onde oldpvp é superior a 12,5 (dois outliers, um entre 12,5 e 15, outro superior a 17,5);\n",
    "- Analisar os valores onde Profit é superior a 0,8 (dois outliers, um entre 0,8 e 1, outro superior a 1,4);\n",
    "- Analisar os valores onde newpvp é superior a 6 (dois outliers, um entre 6 e 8, outro superior a 8)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "id": "c832868e-631d-4722-b525-637033fe5472",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>idstore</th>\n",
       "      <th>sku</th>\n",
       "      <th>brand</th>\n",
       "      <th>oldpvp</th>\n",
       "      <th>labelqty</th>\n",
       "      <th>weight (g)</th>\n",
       "      <th>Payment_method</th>\n",
       "      <th>Margin (%)</th>\n",
       "      <th>Profit (€)</th>\n",
       "      <th>perc_expiring_sku</th>\n",
       "      <th>expiring_date</th>\n",
       "      <th>labelling_date</th>\n",
       "      <th>sell_date</th>\n",
       "      <th>sold</th>\n",
       "      <th>type</th>\n",
       "      <th>selling_square_ft</th>\n",
       "      <th>district</th>\n",
       "      <th>newpvp</th>\n",
       "      <th>discount</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>11030</th>\n",
       "      <td>14</td>\n",
       "      <td>33</td>\n",
       "      <td>Marca_14</td>\n",
       "      <td>17.99</td>\n",
       "      <td>1</td>\n",
       "      <td>266.0</td>\n",
       "      <td>Cash</td>\n",
       "      <td>16</td>\n",
       "      <td>1.4384</td>\n",
       "      <td>0.050505</td>\n",
       "      <td>2021-10-27</td>\n",
       "      <td>2021-10-22</td>\n",
       "      <td>2021-10-23</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Large</td>\n",
       "      <td>21275.0</td>\n",
       "      <td>Beja</td>\n",
       "      <td>8.99</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11031</th>\n",
       "      <td>14</td>\n",
       "      <td>33</td>\n",
       "      <td>Marca_14</td>\n",
       "      <td>17.99</td>\n",
       "      <td>1</td>\n",
       "      <td>266.0</td>\n",
       "      <td>N/A</td>\n",
       "      <td>16</td>\n",
       "      <td>1.4384</td>\n",
       "      <td>0.050505</td>\n",
       "      <td>2021-10-27</td>\n",
       "      <td>2021-10-22</td>\n",
       "      <td>NaT</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Large</td>\n",
       "      <td>21275.0</td>\n",
       "      <td>Beja</td>\n",
       "      <td>8.99</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>94319</th>\n",
       "      <td>7</td>\n",
       "      <td>201</td>\n",
       "      <td>Marca_5</td>\n",
       "      <td>14.99</td>\n",
       "      <td>1</td>\n",
       "      <td>166.0</td>\n",
       "      <td>N/A</td>\n",
       "      <td>13</td>\n",
       "      <td>0.9737</td>\n",
       "      <td>0.030641</td>\n",
       "      <td>2021-10-28</td>\n",
       "      <td>2021-10-17</td>\n",
       "      <td>NaT</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Large</td>\n",
       "      <td>13618.0</td>\n",
       "      <td>Guarda</td>\n",
       "      <td>7.49</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>94320</th>\n",
       "      <td>7</td>\n",
       "      <td>201</td>\n",
       "      <td>Marca_5</td>\n",
       "      <td>14.99</td>\n",
       "      <td>1</td>\n",
       "      <td>166.0</td>\n",
       "      <td>Cash</td>\n",
       "      <td>13</td>\n",
       "      <td>0.9737</td>\n",
       "      <td>0.030641</td>\n",
       "      <td>2021-10-28</td>\n",
       "      <td>2021-10-17</td>\n",
       "      <td>2021-10-19</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Large</td>\n",
       "      <td>13618.0</td>\n",
       "      <td>Guarda</td>\n",
       "      <td>7.49</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>94321</th>\n",
       "      <td>7</td>\n",
       "      <td>201</td>\n",
       "      <td>Marca_5</td>\n",
       "      <td>14.99</td>\n",
       "      <td>1</td>\n",
       "      <td>166.0</td>\n",
       "      <td>Cash</td>\n",
       "      <td>13</td>\n",
       "      <td>0.9737</td>\n",
       "      <td>0.030641</td>\n",
       "      <td>2021-10-28</td>\n",
       "      <td>2021-10-17</td>\n",
       "      <td>2021-10-19</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Large</td>\n",
       "      <td>13618.0</td>\n",
       "      <td>Guarda</td>\n",
       "      <td>7.49</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>94322</th>\n",
       "      <td>7</td>\n",
       "      <td>201</td>\n",
       "      <td>Marca_5</td>\n",
       "      <td>14.99</td>\n",
       "      <td>1</td>\n",
       "      <td>166.0</td>\n",
       "      <td>N/A</td>\n",
       "      <td>13</td>\n",
       "      <td>0.9737</td>\n",
       "      <td>0.030641</td>\n",
       "      <td>2021-10-28</td>\n",
       "      <td>2021-10-17</td>\n",
       "      <td>NaT</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Large</td>\n",
       "      <td>13618.0</td>\n",
       "      <td>Guarda</td>\n",
       "      <td>7.49</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>94323</th>\n",
       "      <td>7</td>\n",
       "      <td>201</td>\n",
       "      <td>Marca_5</td>\n",
       "      <td>14.99</td>\n",
       "      <td>1</td>\n",
       "      <td>166.0</td>\n",
       "      <td>N/A</td>\n",
       "      <td>13</td>\n",
       "      <td>0.9737</td>\n",
       "      <td>0.030641</td>\n",
       "      <td>2021-10-28</td>\n",
       "      <td>2021-10-17</td>\n",
       "      <td>NaT</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Large</td>\n",
       "      <td>13618.0</td>\n",
       "      <td>Guarda</td>\n",
       "      <td>7.49</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>94324</th>\n",
       "      <td>7</td>\n",
       "      <td>201</td>\n",
       "      <td>Marca_5</td>\n",
       "      <td>14.99</td>\n",
       "      <td>1</td>\n",
       "      <td>166.0</td>\n",
       "      <td>N/A</td>\n",
       "      <td>13</td>\n",
       "      <td>0.9737</td>\n",
       "      <td>0.030641</td>\n",
       "      <td>2021-10-28</td>\n",
       "      <td>2021-10-17</td>\n",
       "      <td>NaT</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Large</td>\n",
       "      <td>13618.0</td>\n",
       "      <td>Guarda</td>\n",
       "      <td>7.49</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>94325</th>\n",
       "      <td>7</td>\n",
       "      <td>201</td>\n",
       "      <td>Marca_5</td>\n",
       "      <td>14.99</td>\n",
       "      <td>1</td>\n",
       "      <td>166.0</td>\n",
       "      <td>N/A</td>\n",
       "      <td>13</td>\n",
       "      <td>0.9737</td>\n",
       "      <td>0.030641</td>\n",
       "      <td>2021-10-28</td>\n",
       "      <td>2021-10-17</td>\n",
       "      <td>NaT</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Large</td>\n",
       "      <td>13618.0</td>\n",
       "      <td>Guarda</td>\n",
       "      <td>7.49</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>94326</th>\n",
       "      <td>7</td>\n",
       "      <td>201</td>\n",
       "      <td>Marca_5</td>\n",
       "      <td>14.99</td>\n",
       "      <td>1</td>\n",
       "      <td>166.0</td>\n",
       "      <td>N/A</td>\n",
       "      <td>13</td>\n",
       "      <td>0.9737</td>\n",
       "      <td>0.030641</td>\n",
       "      <td>2021-10-28</td>\n",
       "      <td>2021-10-17</td>\n",
       "      <td>NaT</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Large</td>\n",
       "      <td>13618.0</td>\n",
       "      <td>Guarda</td>\n",
       "      <td>7.49</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>94327</th>\n",
       "      <td>7</td>\n",
       "      <td>201</td>\n",
       "      <td>Marca_5</td>\n",
       "      <td>14.99</td>\n",
       "      <td>1</td>\n",
       "      <td>166.0</td>\n",
       "      <td>N/A</td>\n",
       "      <td>13</td>\n",
       "      <td>0.9737</td>\n",
       "      <td>0.030641</td>\n",
       "      <td>2021-10-28</td>\n",
       "      <td>2021-10-17</td>\n",
       "      <td>NaT</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Large</td>\n",
       "      <td>13618.0</td>\n",
       "      <td>Guarda</td>\n",
       "      <td>7.49</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>94328</th>\n",
       "      <td>7</td>\n",
       "      <td>201</td>\n",
       "      <td>Marca_5</td>\n",
       "      <td>14.99</td>\n",
       "      <td>1</td>\n",
       "      <td>166.0</td>\n",
       "      <td>N/A</td>\n",
       "      <td>13</td>\n",
       "      <td>0.9737</td>\n",
       "      <td>0.030641</td>\n",
       "      <td>2021-10-28</td>\n",
       "      <td>2021-10-17</td>\n",
       "      <td>NaT</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Large</td>\n",
       "      <td>13618.0</td>\n",
       "      <td>Guarda</td>\n",
       "      <td>7.49</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>94329</th>\n",
       "      <td>7</td>\n",
       "      <td>201</td>\n",
       "      <td>Marca_5</td>\n",
       "      <td>14.99</td>\n",
       "      <td>1</td>\n",
       "      <td>166.0</td>\n",
       "      <td>N/A</td>\n",
       "      <td>13</td>\n",
       "      <td>0.9737</td>\n",
       "      <td>0.030641</td>\n",
       "      <td>2021-10-28</td>\n",
       "      <td>2021-10-17</td>\n",
       "      <td>NaT</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Large</td>\n",
       "      <td>13618.0</td>\n",
       "      <td>Guarda</td>\n",
       "      <td>7.49</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      idstore  sku     brand  oldpvp  labelqty  weight (g) Payment_method  \\\n",
       "11030      14   33  Marca_14   17.99         1       266.0           Cash   \n",
       "11031      14   33  Marca_14   17.99         1       266.0            N/A   \n",
       "94319       7  201   Marca_5   14.99         1       166.0            N/A   \n",
       "94320       7  201   Marca_5   14.99         1       166.0           Cash   \n",
       "94321       7  201   Marca_5   14.99         1       166.0           Cash   \n",
       "94322       7  201   Marca_5   14.99         1       166.0            N/A   \n",
       "94323       7  201   Marca_5   14.99         1       166.0            N/A   \n",
       "94324       7  201   Marca_5   14.99         1       166.0            N/A   \n",
       "94325       7  201   Marca_5   14.99         1       166.0            N/A   \n",
       "94326       7  201   Marca_5   14.99         1       166.0            N/A   \n",
       "94327       7  201   Marca_5   14.99         1       166.0            N/A   \n",
       "94328       7  201   Marca_5   14.99         1       166.0            N/A   \n",
       "94329       7  201   Marca_5   14.99         1       166.0            N/A   \n",
       "\n",
       "       Margin (%)  Profit (€)  perc_expiring_sku expiring_date labelling_date  \\\n",
       "11030          16      1.4384           0.050505    2021-10-27     2021-10-22   \n",
       "11031          16      1.4384           0.050505    2021-10-27     2021-10-22   \n",
       "94319          13      0.9737           0.030641    2021-10-28     2021-10-17   \n",
       "94320          13      0.9737           0.030641    2021-10-28     2021-10-17   \n",
       "94321          13      0.9737           0.030641    2021-10-28     2021-10-17   \n",
       "94322          13      0.9737           0.030641    2021-10-28     2021-10-17   \n",
       "94323          13      0.9737           0.030641    2021-10-28     2021-10-17   \n",
       "94324          13      0.9737           0.030641    2021-10-28     2021-10-17   \n",
       "94325          13      0.9737           0.030641    2021-10-28     2021-10-17   \n",
       "94326          13      0.9737           0.030641    2021-10-28     2021-10-17   \n",
       "94327          13      0.9737           0.030641    2021-10-28     2021-10-17   \n",
       "94328          13      0.9737           0.030641    2021-10-28     2021-10-17   \n",
       "94329          13      0.9737           0.030641    2021-10-28     2021-10-17   \n",
       "\n",
       "       sell_date  sold   type  selling_square_ft district  newpvp  discount  \n",
       "11030 2021-10-23   1.0  Large            21275.0     Beja    8.99       0.5  \n",
       "11031        NaT   0.0  Large            21275.0     Beja    8.99       0.5  \n",
       "94319        NaT   0.0  Large            13618.0   Guarda    7.49       0.5  \n",
       "94320 2021-10-19   1.0  Large            13618.0   Guarda    7.49       0.5  \n",
       "94321 2021-10-19   1.0  Large            13618.0   Guarda    7.49       0.5  \n",
       "94322        NaT   0.0  Large            13618.0   Guarda    7.49       0.5  \n",
       "94323        NaT   0.0  Large            13618.0   Guarda    7.49       0.5  \n",
       "94324        NaT   0.0  Large            13618.0   Guarda    7.49       0.5  \n",
       "94325        NaT   0.0  Large            13618.0   Guarda    7.49       0.5  \n",
       "94326        NaT   0.0  Large            13618.0   Guarda    7.49       0.5  \n",
       "94327        NaT   0.0  Large            13618.0   Guarda    7.49       0.5  \n",
       "94328        NaT   0.0  Large            13618.0   Guarda    7.49       0.5  \n",
       "94329        NaT   0.0  Large            13618.0   Guarda    7.49       0.5  "
      ]
     },
     "execution_count": 100,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Analisar a linha em que \"oldpvp\" tem um outlier superior a 14\n",
    "df[df['oldpvp']>14]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ff064003-30b5-4ddf-a20b-40ddf0eb882e",
   "metadata": {},
   "source": [
    "NOTA:\n",
    "\n",
    "Com base na análise do dataset, verifica-se que o valor oldpvp>14 ocorre para a sku=33, pelo que é necessário analisar os dados desta sku."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "id": "89c31447-1c3d-4cd4-a398-245eb9d5f019",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>idstore</th>\n",
       "      <th>sku</th>\n",
       "      <th>brand</th>\n",
       "      <th>oldpvp</th>\n",
       "      <th>labelqty</th>\n",
       "      <th>weight (g)</th>\n",
       "      <th>Payment_method</th>\n",
       "      <th>Margin (%)</th>\n",
       "      <th>Profit (€)</th>\n",
       "      <th>perc_expiring_sku</th>\n",
       "      <th>expiring_date</th>\n",
       "      <th>labelling_date</th>\n",
       "      <th>sell_date</th>\n",
       "      <th>sold</th>\n",
       "      <th>type</th>\n",
       "      <th>selling_square_ft</th>\n",
       "      <th>district</th>\n",
       "      <th>newpvp</th>\n",
       "      <th>discount</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>11030</th>\n",
       "      <td>14</td>\n",
       "      <td>33</td>\n",
       "      <td>Marca_14</td>\n",
       "      <td>17.99</td>\n",
       "      <td>1</td>\n",
       "      <td>266.0</td>\n",
       "      <td>Cash</td>\n",
       "      <td>16</td>\n",
       "      <td>1.4384</td>\n",
       "      <td>0.050505</td>\n",
       "      <td>2021-10-27</td>\n",
       "      <td>2021-10-22</td>\n",
       "      <td>2021-10-23</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Large</td>\n",
       "      <td>21275.0</td>\n",
       "      <td>Beja</td>\n",
       "      <td>8.99</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11031</th>\n",
       "      <td>14</td>\n",
       "      <td>33</td>\n",
       "      <td>Marca_14</td>\n",
       "      <td>17.99</td>\n",
       "      <td>1</td>\n",
       "      <td>266.0</td>\n",
       "      <td>N/A</td>\n",
       "      <td>16</td>\n",
       "      <td>1.4384</td>\n",
       "      <td>0.050505</td>\n",
       "      <td>2021-10-27</td>\n",
       "      <td>2021-10-22</td>\n",
       "      <td>NaT</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Large</td>\n",
       "      <td>21275.0</td>\n",
       "      <td>Beja</td>\n",
       "      <td>8.99</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      idstore sku     brand  oldpvp  labelqty  weight (g) Payment_method  \\\n",
       "11030      14  33  Marca_14   17.99         1       266.0           Cash   \n",
       "11031      14  33  Marca_14   17.99         1       266.0            N/A   \n",
       "\n",
       "       Margin (%)  Profit (€)  perc_expiring_sku expiring_date labelling_date  \\\n",
       "11030          16      1.4384           0.050505    2021-10-27     2021-10-22   \n",
       "11031          16      1.4384           0.050505    2021-10-27     2021-10-22   \n",
       "\n",
       "       sell_date  sold   type  selling_square_ft district  newpvp  discount  \n",
       "11030 2021-10-23   1.0  Large            21275.0     Beja    8.99       0.5  \n",
       "11031        NaT   0.0  Large            21275.0     Beja    8.99       0.5  "
      ]
     },
     "execution_count": 102,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Analisar as linhas em que sku=33\n",
    "df[df['sku']=='33']"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "06f78224-ab74-450a-8ef7-172847d96a20",
   "metadata": {},
   "source": [
    "NOTA:\n",
    "\n",
    "Para os outliers apresentados acima, após uma análise aprofundada, conclui-se que os mesmos fazem sentido, visto para o newpvp, o discount, profit e margin apresentados o valor de oldpvp está correto. Por este motivo, estes dados serão assumidos como corretos."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "032902fc-09d1-4967-b1b4-55c071b043c9",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true
   },
   "source": [
    "<div style=\"background-color: '#006400'; padding: 15px; border: 1px solid #003366\";\">\n",
    "    <a id='det'></a>\n",
    "    <h2 style=\"color: #003366; margin: 0;\">2.4. Análise Detalhada</h2>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "id": "e5da3114-65cb-41e0-913b-8ef172bc34f8",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Uniformizar os títulos das variáveis\n",
    "df.rename(columns={'Margin (%)': 'Margin'}, inplace=True)\n",
    "df.rename(columns={'Profit (€)': 'Profit'}, inplace=True)\n",
    "df.rename(columns={'weight (g)': 'Weight'}, inplace=True)\n",
    "df.rename(columns={'Payment_method': 'Payment_method'}, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "id": "3e75e4af-ebb8-4f71-b1aa-eebab8d9ea32",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Alterar a variável \"margin\" para decimal \n",
    "df['Margin'] = df['Margin'] / 100"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "id": "0b80c46d-1cbd-4233-a6b1-fbccac5d86a6",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Criar um nova variável \"clean_sold\" que define se o produto foi ou não vendido com base nas variáveis \"payment_method\" e \"sell_date\"\n",
    "\n",
    "def sold_calculation(X):\n",
    "    if pd.notna(X['Payment_method']) and pd.notna(X['sell_date']):\n",
    "        return 1\n",
    "    else:\n",
    "        return 0\n",
    "        \n",
    "df['clean_sold'] = df.apply(sold_calculation,axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "id": "3f38fb1d-5c37-445d-b597-546d97b36dd2",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Substituir os valores ausentes (NaN) da coluna 'sold' pelos valores correspondentes da coluna 'clean_sold'\n",
    "df['sold'] = df['sold'].fillna(df['clean_sold'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "id": "5a748978-f623-48c5-9ea8-e93d5aae7b61",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>idstore</th>\n",
       "      <th>sku</th>\n",
       "      <th>brand</th>\n",
       "      <th>oldpvp</th>\n",
       "      <th>labelqty</th>\n",
       "      <th>Weight</th>\n",
       "      <th>Payment_method</th>\n",
       "      <th>Margin</th>\n",
       "      <th>Profit</th>\n",
       "      <th>perc_expiring_sku</th>\n",
       "      <th>expiring_date</th>\n",
       "      <th>labelling_date</th>\n",
       "      <th>sell_date</th>\n",
       "      <th>sold</th>\n",
       "      <th>type</th>\n",
       "      <th>selling_square_ft</th>\n",
       "      <th>district</th>\n",
       "      <th>newpvp</th>\n",
       "      <th>discount</th>\n",
       "      <th>clean_sold</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Marca_1</td>\n",
       "      <td>4.22</td>\n",
       "      <td>1</td>\n",
       "      <td>260.0</td>\n",
       "      <td>Card</td>\n",
       "      <td>0.16</td>\n",
       "      <td>0.3376</td>\n",
       "      <td>0.010050</td>\n",
       "      <td>2021-10-03</td>\n",
       "      <td>2021-10-01</td>\n",
       "      <td>2021-10-02</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Large</td>\n",
       "      <td>4762.0</td>\n",
       "      <td>Évora</td>\n",
       "      <td>2.11</td>\n",
       "      <td>0.5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Marca_1</td>\n",
       "      <td>3.96</td>\n",
       "      <td>1</td>\n",
       "      <td>260.0</td>\n",
       "      <td>N/A</td>\n",
       "      <td>0.16</td>\n",
       "      <td>0.3168</td>\n",
       "      <td>0.005025</td>\n",
       "      <td>2021-10-02</td>\n",
       "      <td>2021-10-01</td>\n",
       "      <td>NaT</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Large</td>\n",
       "      <td>4762.0</td>\n",
       "      <td>Évora</td>\n",
       "      <td>1.98</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Marca_1</td>\n",
       "      <td>4.74</td>\n",
       "      <td>1</td>\n",
       "      <td>260.0</td>\n",
       "      <td>Cash</td>\n",
       "      <td>0.16</td>\n",
       "      <td>0.3792</td>\n",
       "      <td>0.010050</td>\n",
       "      <td>2021-10-03</td>\n",
       "      <td>2021-10-01</td>\n",
       "      <td>2021-10-03</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Large</td>\n",
       "      <td>4762.0</td>\n",
       "      <td>Évora</td>\n",
       "      <td>2.37</td>\n",
       "      <td>0.5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Marca_1</td>\n",
       "      <td>4.20</td>\n",
       "      <td>1</td>\n",
       "      <td>260.0</td>\n",
       "      <td>Card</td>\n",
       "      <td>0.16</td>\n",
       "      <td>0.3360</td>\n",
       "      <td>0.010050</td>\n",
       "      <td>2021-10-03</td>\n",
       "      <td>2021-10-01</td>\n",
       "      <td>2021-10-02</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Large</td>\n",
       "      <td>4762.0</td>\n",
       "      <td>Évora</td>\n",
       "      <td>2.10</td>\n",
       "      <td>0.5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Marca_1</td>\n",
       "      <td>4.62</td>\n",
       "      <td>1</td>\n",
       "      <td>260.0</td>\n",
       "      <td>Cash</td>\n",
       "      <td>0.16</td>\n",
       "      <td>0.3696</td>\n",
       "      <td>0.010050</td>\n",
       "      <td>2021-10-03</td>\n",
       "      <td>2021-10-01</td>\n",
       "      <td>2021-10-03</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Large</td>\n",
       "      <td>4762.0</td>\n",
       "      <td>Évora</td>\n",
       "      <td>2.31</td>\n",
       "      <td>0.5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>150049</th>\n",
       "      <td>193</td>\n",
       "      <td>318</td>\n",
       "      <td>Marca_2</td>\n",
       "      <td>2.49</td>\n",
       "      <td>1</td>\n",
       "      <td>97.0</td>\n",
       "      <td>N/A</td>\n",
       "      <td>0.11</td>\n",
       "      <td>0.1364</td>\n",
       "      <td>0.100629</td>\n",
       "      <td>2021-10-19</td>\n",
       "      <td>2021-10-03</td>\n",
       "      <td>NaT</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Medium</td>\n",
       "      <td>5048.0</td>\n",
       "      <td>Viseu</td>\n",
       "      <td>1.24</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>150050</th>\n",
       "      <td>203</td>\n",
       "      <td>318</td>\n",
       "      <td>Marca_2</td>\n",
       "      <td>2.49</td>\n",
       "      <td>1</td>\n",
       "      <td>97.0</td>\n",
       "      <td>Cash</td>\n",
       "      <td>0.11</td>\n",
       "      <td>0.1364</td>\n",
       "      <td>0.113208</td>\n",
       "      <td>2021-10-19</td>\n",
       "      <td>2021-10-01</td>\n",
       "      <td>2021-10-02</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Medium</td>\n",
       "      <td>9370.0</td>\n",
       "      <td>Faro</td>\n",
       "      <td>1.24</td>\n",
       "      <td>0.5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>150051</th>\n",
       "      <td>203</td>\n",
       "      <td>318</td>\n",
       "      <td>Marca_2</td>\n",
       "      <td>2.49</td>\n",
       "      <td>1</td>\n",
       "      <td>97.0</td>\n",
       "      <td>Cash</td>\n",
       "      <td>0.11</td>\n",
       "      <td>0.1364</td>\n",
       "      <td>0.113208</td>\n",
       "      <td>2021-10-19</td>\n",
       "      <td>2021-10-01</td>\n",
       "      <td>2021-10-02</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Medium</td>\n",
       "      <td>9370.0</td>\n",
       "      <td>Faro</td>\n",
       "      <td>1.24</td>\n",
       "      <td>0.5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>150052</th>\n",
       "      <td>139</td>\n",
       "      <td>319</td>\n",
       "      <td>Marca_24</td>\n",
       "      <td>3.49</td>\n",
       "      <td>1</td>\n",
       "      <td>141.0</td>\n",
       "      <td>Cash</td>\n",
       "      <td>0.19</td>\n",
       "      <td>0.4636</td>\n",
       "      <td>0.092437</td>\n",
       "      <td>2021-10-17</td>\n",
       "      <td>2021-10-06</td>\n",
       "      <td>2021-10-11</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Small</td>\n",
       "      <td>1061.0</td>\n",
       "      <td>Portalegre</td>\n",
       "      <td>2.44</td>\n",
       "      <td>0.3</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>150053</th>\n",
       "      <td>139</td>\n",
       "      <td>319</td>\n",
       "      <td>Marca_24</td>\n",
       "      <td>3.49</td>\n",
       "      <td>1</td>\n",
       "      <td>141.0</td>\n",
       "      <td>N/A</td>\n",
       "      <td>0.19</td>\n",
       "      <td>0.4636</td>\n",
       "      <td>0.092437</td>\n",
       "      <td>2021-10-17</td>\n",
       "      <td>2021-10-06</td>\n",
       "      <td>NaT</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Small</td>\n",
       "      <td>1061.0</td>\n",
       "      <td>Portalegre</td>\n",
       "      <td>2.44</td>\n",
       "      <td>0.3</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>150053 rows × 20 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       idstore  sku     brand  oldpvp  labelqty  Weight Payment_method  \\\n",
       "0            1    1   Marca_1    4.22         1   260.0           Card   \n",
       "1            1    1   Marca_1    3.96         1   260.0            N/A   \n",
       "2            1    1   Marca_1    4.74         1   260.0           Cash   \n",
       "3            1    1   Marca_1    4.20         1   260.0           Card   \n",
       "4            1    1   Marca_1    4.62         1   260.0           Cash   \n",
       "...        ...  ...       ...     ...       ...     ...            ...   \n",
       "150049     193  318   Marca_2    2.49         1    97.0            N/A   \n",
       "150050     203  318   Marca_2    2.49         1    97.0           Cash   \n",
       "150051     203  318   Marca_2    2.49         1    97.0           Cash   \n",
       "150052     139  319  Marca_24    3.49         1   141.0           Cash   \n",
       "150053     139  319  Marca_24    3.49         1   141.0            N/A   \n",
       "\n",
       "        Margin  Profit  perc_expiring_sku expiring_date labelling_date  \\\n",
       "0         0.16  0.3376           0.010050    2021-10-03     2021-10-01   \n",
       "1         0.16  0.3168           0.005025    2021-10-02     2021-10-01   \n",
       "2         0.16  0.3792           0.010050    2021-10-03     2021-10-01   \n",
       "3         0.16  0.3360           0.010050    2021-10-03     2021-10-01   \n",
       "4         0.16  0.3696           0.010050    2021-10-03     2021-10-01   \n",
       "...        ...     ...                ...           ...            ...   \n",
       "150049    0.11  0.1364           0.100629    2021-10-19     2021-10-03   \n",
       "150050    0.11  0.1364           0.113208    2021-10-19     2021-10-01   \n",
       "150051    0.11  0.1364           0.113208    2021-10-19     2021-10-01   \n",
       "150052    0.19  0.4636           0.092437    2021-10-17     2021-10-06   \n",
       "150053    0.19  0.4636           0.092437    2021-10-17     2021-10-06   \n",
       "\n",
       "        sell_date  sold    type  selling_square_ft    district  newpvp  \\\n",
       "0      2021-10-02   1.0   Large             4762.0       Évora    2.11   \n",
       "1             NaT   0.0   Large             4762.0       Évora    1.98   \n",
       "2      2021-10-03   1.0   Large             4762.0       Évora    2.37   \n",
       "3      2021-10-02   1.0   Large             4762.0       Évora    2.10   \n",
       "4      2021-10-03   1.0   Large             4762.0       Évora    2.31   \n",
       "...           ...   ...     ...                ...         ...     ...   \n",
       "150049        NaT   0.0  Medium             5048.0       Viseu    1.24   \n",
       "150050 2021-10-02   1.0  Medium             9370.0        Faro    1.24   \n",
       "150051 2021-10-02   1.0  Medium             9370.0        Faro    1.24   \n",
       "150052 2021-10-11   1.0   Small             1061.0  Portalegre    2.44   \n",
       "150053        NaT   0.0   Small             1061.0  Portalegre    2.44   \n",
       "\n",
       "        discount  clean_sold  \n",
       "0            0.5           1  \n",
       "1            0.5           0  \n",
       "2            0.5           1  \n",
       "3            0.5           1  \n",
       "4            0.5           1  \n",
       "...          ...         ...  \n",
       "150049       0.5           0  \n",
       "150050       0.5           1  \n",
       "150051       0.5           1  \n",
       "150052       0.3           1  \n",
       "150053       0.3           0  \n",
       "\n",
       "[150053 rows x 20 columns]"
      ]
     },
     "execution_count": 109,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9a71d235-961f-4c1d-be6d-11a5296c811d",
   "metadata": {},
   "source": [
    "*NOTA:*\n",
    "\n",
    "Como a coluna Sold foi substituida pelos valores da coluna Clean_Sold, não faz sentido manter esta coluna."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "id": "4d8aaf24-9af9-4c0b-853c-9eee29806784",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Eliminar a coluna 'Clean_Sold'\n",
    "df=df.drop(['clean_sold'],axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "id": "e448a4e0-1eff-4bc6-964f-caf2666ee48b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>idstore</th>\n",
       "      <th>sku</th>\n",
       "      <th>brand</th>\n",
       "      <th>oldpvp</th>\n",
       "      <th>labelqty</th>\n",
       "      <th>Weight</th>\n",
       "      <th>Payment_method</th>\n",
       "      <th>Margin</th>\n",
       "      <th>Profit</th>\n",
       "      <th>perc_expiring_sku</th>\n",
       "      <th>expiring_date</th>\n",
       "      <th>labelling_date</th>\n",
       "      <th>sell_date</th>\n",
       "      <th>sold</th>\n",
       "      <th>type</th>\n",
       "      <th>selling_square_ft</th>\n",
       "      <th>district</th>\n",
       "      <th>newpvp</th>\n",
       "      <th>discount</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>13868</th>\n",
       "      <td>89</td>\n",
       "      <td>45</td>\n",
       "      <td>Marca_18</td>\n",
       "      <td>2.19</td>\n",
       "      <td>1</td>\n",
       "      <td>300.0</td>\n",
       "      <td>Card</td>\n",
       "      <td>0.20</td>\n",
       "      <td>0.3060</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2021-10-27</td>\n",
       "      <td>2021-10-26</td>\n",
       "      <td>2021-10-26</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Medium</td>\n",
       "      <td>5829.0</td>\n",
       "      <td>Lisboa</td>\n",
       "      <td>1.53</td>\n",
       "      <td>0.30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13869</th>\n",
       "      <td>89</td>\n",
       "      <td>45</td>\n",
       "      <td>Marca_18</td>\n",
       "      <td>2.19</td>\n",
       "      <td>1</td>\n",
       "      <td>300.0</td>\n",
       "      <td>Cash</td>\n",
       "      <td>0.20</td>\n",
       "      <td>0.3060</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2021-10-27</td>\n",
       "      <td>2021-10-26</td>\n",
       "      <td>2021-10-26</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Medium</td>\n",
       "      <td>5829.0</td>\n",
       "      <td>Lisboa</td>\n",
       "      <td>1.53</td>\n",
       "      <td>0.30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13870</th>\n",
       "      <td>89</td>\n",
       "      <td>45</td>\n",
       "      <td>Marca_18</td>\n",
       "      <td>2.19</td>\n",
       "      <td>1</td>\n",
       "      <td>300.0</td>\n",
       "      <td>N/A</td>\n",
       "      <td>0.20</td>\n",
       "      <td>0.3060</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2021-10-27</td>\n",
       "      <td>2021-10-26</td>\n",
       "      <td>NaT</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Medium</td>\n",
       "      <td>5829.0</td>\n",
       "      <td>Lisboa</td>\n",
       "      <td>1.53</td>\n",
       "      <td>0.30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>69819</th>\n",
       "      <td>182</td>\n",
       "      <td>149</td>\n",
       "      <td>Marca_12</td>\n",
       "      <td>2.65</td>\n",
       "      <td>1</td>\n",
       "      <td>202.0</td>\n",
       "      <td>N/A</td>\n",
       "      <td>0.12</td>\n",
       "      <td>0.2220</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2021-10-02</td>\n",
       "      <td>2021-10-01</td>\n",
       "      <td>NaT</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Small</td>\n",
       "      <td>703.0</td>\n",
       "      <td>Viseu</td>\n",
       "      <td>1.85</td>\n",
       "      <td>0.30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>69820</th>\n",
       "      <td>182</td>\n",
       "      <td>149</td>\n",
       "      <td>Marca_12</td>\n",
       "      <td>2.65</td>\n",
       "      <td>1</td>\n",
       "      <td>202.0</td>\n",
       "      <td>Cash</td>\n",
       "      <td>0.12</td>\n",
       "      <td>0.2220</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2021-10-02</td>\n",
       "      <td>2021-10-01</td>\n",
       "      <td>2021-10-01</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Small</td>\n",
       "      <td>703.0</td>\n",
       "      <td>Viseu</td>\n",
       "      <td>1.85</td>\n",
       "      <td>0.30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>78747</th>\n",
       "      <td>92</td>\n",
       "      <td>176</td>\n",
       "      <td>Marca_10</td>\n",
       "      <td>1.99</td>\n",
       "      <td>1</td>\n",
       "      <td>193.0</td>\n",
       "      <td>Card</td>\n",
       "      <td>0.13</td>\n",
       "      <td>0.1807</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2021-10-17</td>\n",
       "      <td>2021-10-16</td>\n",
       "      <td>2021-10-16</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Medium</td>\n",
       "      <td>7230.0</td>\n",
       "      <td>Beja</td>\n",
       "      <td>1.39</td>\n",
       "      <td>0.30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>78748</th>\n",
       "      <td>92</td>\n",
       "      <td>176</td>\n",
       "      <td>Marca_10</td>\n",
       "      <td>2.03</td>\n",
       "      <td>1</td>\n",
       "      <td>193.0</td>\n",
       "      <td>Card</td>\n",
       "      <td>0.13</td>\n",
       "      <td>0.1846</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2021-10-17</td>\n",
       "      <td>2021-10-16</td>\n",
       "      <td>2021-10-16</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Medium</td>\n",
       "      <td>7230.0</td>\n",
       "      <td>Beja</td>\n",
       "      <td>1.42</td>\n",
       "      <td>0.30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>78749</th>\n",
       "      <td>92</td>\n",
       "      <td>176</td>\n",
       "      <td>Marca_10</td>\n",
       "      <td>1.19</td>\n",
       "      <td>1</td>\n",
       "      <td>193.0</td>\n",
       "      <td>Cash</td>\n",
       "      <td>0.13</td>\n",
       "      <td>0.1157</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2021-10-24</td>\n",
       "      <td>2021-10-23</td>\n",
       "      <td>2021-10-23</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Medium</td>\n",
       "      <td>7230.0</td>\n",
       "      <td>Beja</td>\n",
       "      <td>0.89</td>\n",
       "      <td>0.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>78750</th>\n",
       "      <td>92</td>\n",
       "      <td>176</td>\n",
       "      <td>Marca_10</td>\n",
       "      <td>1.43</td>\n",
       "      <td>1</td>\n",
       "      <td>193.0</td>\n",
       "      <td>Cash</td>\n",
       "      <td>0.13</td>\n",
       "      <td>0.1391</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2021-10-24</td>\n",
       "      <td>2021-10-23</td>\n",
       "      <td>2021-10-23</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Medium</td>\n",
       "      <td>7230.0</td>\n",
       "      <td>Beja</td>\n",
       "      <td>1.07</td>\n",
       "      <td>0.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>78751</th>\n",
       "      <td>92</td>\n",
       "      <td>176</td>\n",
       "      <td>Marca_10</td>\n",
       "      <td>1.43</td>\n",
       "      <td>1</td>\n",
       "      <td>193.0</td>\n",
       "      <td>Cash</td>\n",
       "      <td>0.13</td>\n",
       "      <td>0.1391</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2021-10-24</td>\n",
       "      <td>2021-10-23</td>\n",
       "      <td>2021-10-23</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Medium</td>\n",
       "      <td>7230.0</td>\n",
       "      <td>Beja</td>\n",
       "      <td>1.07</td>\n",
       "      <td>0.25</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>71 rows × 19 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      idstore  sku     brand  oldpvp  labelqty  Weight Payment_method  Margin  \\\n",
       "13868      89   45  Marca_18    2.19         1   300.0           Card    0.20   \n",
       "13869      89   45  Marca_18    2.19         1   300.0           Cash    0.20   \n",
       "13870      89   45  Marca_18    2.19         1   300.0            N/A    0.20   \n",
       "69819     182  149  Marca_12    2.65         1   202.0            N/A    0.12   \n",
       "69820     182  149  Marca_12    2.65         1   202.0           Cash    0.12   \n",
       "...       ...  ...       ...     ...       ...     ...            ...     ...   \n",
       "78747      92  176  Marca_10    1.99         1   193.0           Card    0.13   \n",
       "78748      92  176  Marca_10    2.03         1   193.0           Card    0.13   \n",
       "78749      92  176  Marca_10    1.19         1   193.0           Cash    0.13   \n",
       "78750      92  176  Marca_10    1.43         1   193.0           Cash    0.13   \n",
       "78751      92  176  Marca_10    1.43         1   193.0           Cash    0.13   \n",
       "\n",
       "       Profit  perc_expiring_sku expiring_date labelling_date  sell_date  \\\n",
       "13868  0.3060                NaN    2021-10-27     2021-10-26 2021-10-26   \n",
       "13869  0.3060                NaN    2021-10-27     2021-10-26 2021-10-26   \n",
       "13870  0.3060                NaN    2021-10-27     2021-10-26        NaT   \n",
       "69819  0.2220                NaN    2021-10-02     2021-10-01        NaT   \n",
       "69820  0.2220                NaN    2021-10-02     2021-10-01 2021-10-01   \n",
       "...       ...                ...           ...            ...        ...   \n",
       "78747  0.1807                NaN    2021-10-17     2021-10-16 2021-10-16   \n",
       "78748  0.1846                NaN    2021-10-17     2021-10-16 2021-10-16   \n",
       "78749  0.1157                NaN    2021-10-24     2021-10-23 2021-10-23   \n",
       "78750  0.1391                NaN    2021-10-24     2021-10-23 2021-10-23   \n",
       "78751  0.1391                NaN    2021-10-24     2021-10-23 2021-10-23   \n",
       "\n",
       "       sold    type  selling_square_ft district  newpvp  discount  \n",
       "13868   1.0  Medium             5829.0   Lisboa    1.53      0.30  \n",
       "13869   1.0  Medium             5829.0   Lisboa    1.53      0.30  \n",
       "13870   0.0  Medium             5829.0   Lisboa    1.53      0.30  \n",
       "69819   0.0   Small              703.0    Viseu    1.85      0.30  \n",
       "69820   1.0   Small              703.0    Viseu    1.85      0.30  \n",
       "...     ...     ...                ...      ...     ...       ...  \n",
       "78747   1.0  Medium             7230.0     Beja    1.39      0.30  \n",
       "78748   1.0  Medium             7230.0     Beja    1.42      0.30  \n",
       "78749   1.0  Medium             7230.0     Beja    0.89      0.25  \n",
       "78750   1.0  Medium             7230.0     Beja    1.07      0.25  \n",
       "78751   1.0  Medium             7230.0     Beja    1.07      0.25  \n",
       "\n",
       "[71 rows x 19 columns]"
      ]
     },
     "execution_count": 112,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Filtrar as linhas onde a expiring_date é maior do que a labelling_date e onde a coluna perc_expiring_sku está ausente (NaN)\n",
    "df[(df['expiring_date'] > df['labelling_date']) & (pd.isna(df['perc_expiring_sku']))]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "id": "d07cc07d-5774-48a0-a105-1a19a5a53ab7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "125"
      ]
     },
     "execution_count": 113,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Verificar quantas linhas existem quando a coluna 'per_expiring_sku' contém valores ausentes\n",
    "df[pd.isna(df['perc_expiring_sku'])].shape[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "id": "cc99a9e8-3046-4618-b40a-c1c2835d6630",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "perc_expiring_sku\n",
       "0.666667    38564\n",
       "0.333333    36830\n",
       "0.200000    22669\n",
       "0.400000    20021\n",
       "0.000000    14170\n",
       "            ...  \n",
       "0.037190        1\n",
       "0.031250        1\n",
       "1.800000        1\n",
       "0.072727        1\n",
       "0.044025        1\n",
       "Name: count, Length: 152, dtype: int64"
      ]
     },
     "execution_count": 114,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['perc_expiring_sku'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "id": "f38fea4d-fb7f-402c-bab3-192ca1acb6fe",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: ylabel='Frequency'>"
      ]
     },
     "execution_count": 115,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Verificar a distribuição dos valores da coluna 'perc_expiring_sku'a partir de um histograma\n",
    "df['perc_expiring_sku'].plot.hist()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1212347c-bda3-445a-9e24-b1e61e3c89c0",
   "metadata": {},
   "source": [
    "**Conclusões:**\n",
    "\n",
    "Pela a análise dos dados verifica-se que existem valores superiores a 1 para a varável Perc_Expiring_Sku, o que não faz sentido pois trata-se de uma percentagem (que deveria estar entre 0 e 1). Esses valores provavelmente indicam erros nos dados e precisam ser tratados.\n",
    "\n",
    "*Próximos Passos:*\n",
    " \n",
    " - Susbtituir para NaN os valores superiores a 1;\n",
    " - Aplicar a média por marca e loja para preencher os missing values."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "id": "7f751459-602e-4e91-8507-03268df39b8b",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Substituir todos os valores da coluna 'perc_expiring_sku' que são maiores que 1 por NaN.\n",
    "df.loc[df['perc_expiring_sku'] > 1, 'perc_expiring_sku'] = np.nan"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "id": "eaf7a750-3f7a-4b01-a3b8-fe57a95b01ea",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Preencher os valores ausentes (NaN) na coluna 'perc_expiring_sku' com a média dos valores dentro de cada grupo formado por 'brand' e 'idstore'.\n",
    "def fill_na_with_mean(X):\n",
    "    X['perc_expiring_sku'] = X.groupby(['brand', 'idstore'])['perc_expiring_sku'].transform(lambda x: x.fillna(x.mean()))\n",
    "    return X\n",
    "\n",
    "df = fill_na_with_mean(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "id": "844e781d-d67f-4c47-a354-34ca2e757cdc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>idstore</th>\n",
       "      <th>sku</th>\n",
       "      <th>brand</th>\n",
       "      <th>oldpvp</th>\n",
       "      <th>labelqty</th>\n",
       "      <th>Weight</th>\n",
       "      <th>Payment_method</th>\n",
       "      <th>Margin</th>\n",
       "      <th>Profit</th>\n",
       "      <th>perc_expiring_sku</th>\n",
       "      <th>expiring_date</th>\n",
       "      <th>labelling_date</th>\n",
       "      <th>sell_date</th>\n",
       "      <th>sold</th>\n",
       "      <th>type</th>\n",
       "      <th>selling_square_ft</th>\n",
       "      <th>district</th>\n",
       "      <th>newpvp</th>\n",
       "      <th>discount</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Marca_1</td>\n",
       "      <td>4.22</td>\n",
       "      <td>1</td>\n",
       "      <td>260.0</td>\n",
       "      <td>Card</td>\n",
       "      <td>0.16</td>\n",
       "      <td>0.3376</td>\n",
       "      <td>0.010050</td>\n",
       "      <td>2021-10-03</td>\n",
       "      <td>2021-10-01</td>\n",
       "      <td>2021-10-02</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Large</td>\n",
       "      <td>4762.0</td>\n",
       "      <td>Évora</td>\n",
       "      <td>2.11</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Marca_1</td>\n",
       "      <td>3.96</td>\n",
       "      <td>1</td>\n",
       "      <td>260.0</td>\n",
       "      <td>N/A</td>\n",
       "      <td>0.16</td>\n",
       "      <td>0.3168</td>\n",
       "      <td>0.005025</td>\n",
       "      <td>2021-10-02</td>\n",
       "      <td>2021-10-01</td>\n",
       "      <td>NaT</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Large</td>\n",
       "      <td>4762.0</td>\n",
       "      <td>Évora</td>\n",
       "      <td>1.98</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Marca_1</td>\n",
       "      <td>4.74</td>\n",
       "      <td>1</td>\n",
       "      <td>260.0</td>\n",
       "      <td>Cash</td>\n",
       "      <td>0.16</td>\n",
       "      <td>0.3792</td>\n",
       "      <td>0.010050</td>\n",
       "      <td>2021-10-03</td>\n",
       "      <td>2021-10-01</td>\n",
       "      <td>2021-10-03</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Large</td>\n",
       "      <td>4762.0</td>\n",
       "      <td>Évora</td>\n",
       "      <td>2.37</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Marca_1</td>\n",
       "      <td>4.20</td>\n",
       "      <td>1</td>\n",
       "      <td>260.0</td>\n",
       "      <td>Card</td>\n",
       "      <td>0.16</td>\n",
       "      <td>0.3360</td>\n",
       "      <td>0.010050</td>\n",
       "      <td>2021-10-03</td>\n",
       "      <td>2021-10-01</td>\n",
       "      <td>2021-10-02</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Large</td>\n",
       "      <td>4762.0</td>\n",
       "      <td>Évora</td>\n",
       "      <td>2.10</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Marca_1</td>\n",
       "      <td>4.62</td>\n",
       "      <td>1</td>\n",
       "      <td>260.0</td>\n",
       "      <td>Cash</td>\n",
       "      <td>0.16</td>\n",
       "      <td>0.3696</td>\n",
       "      <td>0.010050</td>\n",
       "      <td>2021-10-03</td>\n",
       "      <td>2021-10-01</td>\n",
       "      <td>2021-10-03</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Large</td>\n",
       "      <td>4762.0</td>\n",
       "      <td>Évora</td>\n",
       "      <td>2.31</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>150049</th>\n",
       "      <td>193</td>\n",
       "      <td>318</td>\n",
       "      <td>Marca_2</td>\n",
       "      <td>2.49</td>\n",
       "      <td>1</td>\n",
       "      <td>97.0</td>\n",
       "      <td>N/A</td>\n",
       "      <td>0.11</td>\n",
       "      <td>0.1364</td>\n",
       "      <td>0.100629</td>\n",
       "      <td>2021-10-19</td>\n",
       "      <td>2021-10-03</td>\n",
       "      <td>NaT</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Medium</td>\n",
       "      <td>5048.0</td>\n",
       "      <td>Viseu</td>\n",
       "      <td>1.24</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>150050</th>\n",
       "      <td>203</td>\n",
       "      <td>318</td>\n",
       "      <td>Marca_2</td>\n",
       "      <td>2.49</td>\n",
       "      <td>1</td>\n",
       "      <td>97.0</td>\n",
       "      <td>Cash</td>\n",
       "      <td>0.11</td>\n",
       "      <td>0.1364</td>\n",
       "      <td>0.113208</td>\n",
       "      <td>2021-10-19</td>\n",
       "      <td>2021-10-01</td>\n",
       "      <td>2021-10-02</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Medium</td>\n",
       "      <td>9370.0</td>\n",
       "      <td>Faro</td>\n",
       "      <td>1.24</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>150051</th>\n",
       "      <td>203</td>\n",
       "      <td>318</td>\n",
       "      <td>Marca_2</td>\n",
       "      <td>2.49</td>\n",
       "      <td>1</td>\n",
       "      <td>97.0</td>\n",
       "      <td>Cash</td>\n",
       "      <td>0.11</td>\n",
       "      <td>0.1364</td>\n",
       "      <td>0.113208</td>\n",
       "      <td>2021-10-19</td>\n",
       "      <td>2021-10-01</td>\n",
       "      <td>2021-10-02</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Medium</td>\n",
       "      <td>9370.0</td>\n",
       "      <td>Faro</td>\n",
       "      <td>1.24</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>150052</th>\n",
       "      <td>139</td>\n",
       "      <td>319</td>\n",
       "      <td>Marca_24</td>\n",
       "      <td>3.49</td>\n",
       "      <td>1</td>\n",
       "      <td>141.0</td>\n",
       "      <td>Cash</td>\n",
       "      <td>0.19</td>\n",
       "      <td>0.4636</td>\n",
       "      <td>0.092437</td>\n",
       "      <td>2021-10-17</td>\n",
       "      <td>2021-10-06</td>\n",
       "      <td>2021-10-11</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Small</td>\n",
       "      <td>1061.0</td>\n",
       "      <td>Portalegre</td>\n",
       "      <td>2.44</td>\n",
       "      <td>0.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>150053</th>\n",
       "      <td>139</td>\n",
       "      <td>319</td>\n",
       "      <td>Marca_24</td>\n",
       "      <td>3.49</td>\n",
       "      <td>1</td>\n",
       "      <td>141.0</td>\n",
       "      <td>N/A</td>\n",
       "      <td>0.19</td>\n",
       "      <td>0.4636</td>\n",
       "      <td>0.092437</td>\n",
       "      <td>2021-10-17</td>\n",
       "      <td>2021-10-06</td>\n",
       "      <td>NaT</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Small</td>\n",
       "      <td>1061.0</td>\n",
       "      <td>Portalegre</td>\n",
       "      <td>2.44</td>\n",
       "      <td>0.3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>150053 rows × 19 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       idstore  sku     brand  oldpvp  labelqty  Weight Payment_method  \\\n",
       "0            1    1   Marca_1    4.22         1   260.0           Card   \n",
       "1            1    1   Marca_1    3.96         1   260.0            N/A   \n",
       "2            1    1   Marca_1    4.74         1   260.0           Cash   \n",
       "3            1    1   Marca_1    4.20         1   260.0           Card   \n",
       "4            1    1   Marca_1    4.62         1   260.0           Cash   \n",
       "...        ...  ...       ...     ...       ...     ...            ...   \n",
       "150049     193  318   Marca_2    2.49         1    97.0            N/A   \n",
       "150050     203  318   Marca_2    2.49         1    97.0           Cash   \n",
       "150051     203  318   Marca_2    2.49         1    97.0           Cash   \n",
       "150052     139  319  Marca_24    3.49         1   141.0           Cash   \n",
       "150053     139  319  Marca_24    3.49         1   141.0            N/A   \n",
       "\n",
       "        Margin  Profit  perc_expiring_sku expiring_date labelling_date  \\\n",
       "0         0.16  0.3376           0.010050    2021-10-03     2021-10-01   \n",
       "1         0.16  0.3168           0.005025    2021-10-02     2021-10-01   \n",
       "2         0.16  0.3792           0.010050    2021-10-03     2021-10-01   \n",
       "3         0.16  0.3360           0.010050    2021-10-03     2021-10-01   \n",
       "4         0.16  0.3696           0.010050    2021-10-03     2021-10-01   \n",
       "...        ...     ...                ...           ...            ...   \n",
       "150049    0.11  0.1364           0.100629    2021-10-19     2021-10-03   \n",
       "150050    0.11  0.1364           0.113208    2021-10-19     2021-10-01   \n",
       "150051    0.11  0.1364           0.113208    2021-10-19     2021-10-01   \n",
       "150052    0.19  0.4636           0.092437    2021-10-17     2021-10-06   \n",
       "150053    0.19  0.4636           0.092437    2021-10-17     2021-10-06   \n",
       "\n",
       "        sell_date  sold    type  selling_square_ft    district  newpvp  \\\n",
       "0      2021-10-02   1.0   Large             4762.0       Évora    2.11   \n",
       "1             NaT   0.0   Large             4762.0       Évora    1.98   \n",
       "2      2021-10-03   1.0   Large             4762.0       Évora    2.37   \n",
       "3      2021-10-02   1.0   Large             4762.0       Évora    2.10   \n",
       "4      2021-10-03   1.0   Large             4762.0       Évora    2.31   \n",
       "...           ...   ...     ...                ...         ...     ...   \n",
       "150049        NaT   0.0  Medium             5048.0       Viseu    1.24   \n",
       "150050 2021-10-02   1.0  Medium             9370.0        Faro    1.24   \n",
       "150051 2021-10-02   1.0  Medium             9370.0        Faro    1.24   \n",
       "150052 2021-10-11   1.0   Small             1061.0  Portalegre    2.44   \n",
       "150053        NaT   0.0   Small             1061.0  Portalegre    2.44   \n",
       "\n",
       "        discount  \n",
       "0            0.5  \n",
       "1            0.5  \n",
       "2            0.5  \n",
       "3            0.5  \n",
       "4            0.5  \n",
       "...          ...  \n",
       "150049       0.5  \n",
       "150050       0.5  \n",
       "150051       0.5  \n",
       "150052       0.3  \n",
       "150053       0.3  \n",
       "\n",
       "[150053 rows x 19 columns]"
      ]
     },
     "execution_count": 119,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "id": "b32a6c6c-fa87-4c25-9237-1067dd3c1915",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: ylabel='Frequency'>"
      ]
     },
     "execution_count": 120,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Verificar o histograma\n",
    "df['perc_expiring_sku'].plot.hist()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "afa3f9a1-ca92-488d-962a-423470c36783",
   "metadata": {},
   "source": [
    "*NOTA:*\n",
    "\n",
    "Analisando o gráfico verifica-se que todos os valores superiores a 1 foram substituidos, no entando ai existem valores nulos que precisam de ser tratados."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "id": "0c72cbae-f252-450e-930e-4171246836d4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>idstore</th>\n",
       "      <th>sku</th>\n",
       "      <th>brand</th>\n",
       "      <th>oldpvp</th>\n",
       "      <th>labelqty</th>\n",
       "      <th>Weight</th>\n",
       "      <th>Payment_method</th>\n",
       "      <th>Margin</th>\n",
       "      <th>Profit</th>\n",
       "      <th>perc_expiring_sku</th>\n",
       "      <th>expiring_date</th>\n",
       "      <th>labelling_date</th>\n",
       "      <th>sell_date</th>\n",
       "      <th>sold</th>\n",
       "      <th>type</th>\n",
       "      <th>selling_square_ft</th>\n",
       "      <th>district</th>\n",
       "      <th>newpvp</th>\n",
       "      <th>discount</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>62187</th>\n",
       "      <td>281</td>\n",
       "      <td>134</td>\n",
       "      <td>Marca_30</td>\n",
       "      <td>1.09</td>\n",
       "      <td>1</td>\n",
       "      <td>260.0</td>\n",
       "      <td>Card</td>\n",
       "      <td>0.12</td>\n",
       "      <td>0.0648</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2021-10-28</td>\n",
       "      <td>2021-10-19</td>\n",
       "      <td>2021-10-20</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Small</td>\n",
       "      <td>455.0</td>\n",
       "      <td>Porto</td>\n",
       "      <td>0.54</td>\n",
       "      <td>0.50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>78684</th>\n",
       "      <td>91</td>\n",
       "      <td>176</td>\n",
       "      <td>Marca_10</td>\n",
       "      <td>1.12</td>\n",
       "      <td>1</td>\n",
       "      <td>193.0</td>\n",
       "      <td>N/A</td>\n",
       "      <td>0.13</td>\n",
       "      <td>0.1092</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2021-10-31</td>\n",
       "      <td>2021-10-31</td>\n",
       "      <td>NaT</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Medium</td>\n",
       "      <td>8952.0</td>\n",
       "      <td>Aveiro</td>\n",
       "      <td>0.84</td>\n",
       "      <td>0.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>78685</th>\n",
       "      <td>91</td>\n",
       "      <td>176</td>\n",
       "      <td>Marca_10</td>\n",
       "      <td>1.47</td>\n",
       "      <td>1</td>\n",
       "      <td>193.0</td>\n",
       "      <td>N/A</td>\n",
       "      <td>0.13</td>\n",
       "      <td>0.1326</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2021-10-27</td>\n",
       "      <td>2021-10-27</td>\n",
       "      <td>NaT</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Medium</td>\n",
       "      <td>8952.0</td>\n",
       "      <td>Aveiro</td>\n",
       "      <td>1.02</td>\n",
       "      <td>0.31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>78686</th>\n",
       "      <td>91</td>\n",
       "      <td>176</td>\n",
       "      <td>Marca_10</td>\n",
       "      <td>1.47</td>\n",
       "      <td>1</td>\n",
       "      <td>193.0</td>\n",
       "      <td>N/A</td>\n",
       "      <td>0.13</td>\n",
       "      <td>0.1326</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2021-10-27</td>\n",
       "      <td>2021-10-27</td>\n",
       "      <td>NaT</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Medium</td>\n",
       "      <td>8952.0</td>\n",
       "      <td>Aveiro</td>\n",
       "      <td>1.02</td>\n",
       "      <td>0.31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>78687</th>\n",
       "      <td>91</td>\n",
       "      <td>176</td>\n",
       "      <td>Marca_10</td>\n",
       "      <td>1.22</td>\n",
       "      <td>1</td>\n",
       "      <td>193.0</td>\n",
       "      <td>Card</td>\n",
       "      <td>0.13</td>\n",
       "      <td>0.1105</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2021-10-27</td>\n",
       "      <td>2021-10-27</td>\n",
       "      <td>2021-10-27</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Medium</td>\n",
       "      <td>8952.0</td>\n",
       "      <td>Aveiro</td>\n",
       "      <td>0.85</td>\n",
       "      <td>0.30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>78752</th>\n",
       "      <td>92</td>\n",
       "      <td>176</td>\n",
       "      <td>Marca_10</td>\n",
       "      <td>1.26</td>\n",
       "      <td>1</td>\n",
       "      <td>193.0</td>\n",
       "      <td>Card</td>\n",
       "      <td>0.13</td>\n",
       "      <td>0.1222</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2021-10-25</td>\n",
       "      <td>2021-10-25</td>\n",
       "      <td>2021-10-25</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Medium</td>\n",
       "      <td>7230.0</td>\n",
       "      <td>Beja</td>\n",
       "      <td>0.94</td>\n",
       "      <td>0.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>78753</th>\n",
       "      <td>92</td>\n",
       "      <td>176</td>\n",
       "      <td>Marca_10</td>\n",
       "      <td>1.47</td>\n",
       "      <td>1</td>\n",
       "      <td>193.0</td>\n",
       "      <td>Cash</td>\n",
       "      <td>0.13</td>\n",
       "      <td>0.1430</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2021-10-29</td>\n",
       "      <td>2021-10-29</td>\n",
       "      <td>2021-10-29</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Medium</td>\n",
       "      <td>7230.0</td>\n",
       "      <td>Beja</td>\n",
       "      <td>1.10</td>\n",
       "      <td>0.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>78754</th>\n",
       "      <td>92</td>\n",
       "      <td>176</td>\n",
       "      <td>Marca_10</td>\n",
       "      <td>1.12</td>\n",
       "      <td>1</td>\n",
       "      <td>193.0</td>\n",
       "      <td>Cash</td>\n",
       "      <td>0.13</td>\n",
       "      <td>0.1092</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2021-10-29</td>\n",
       "      <td>2021-10-29</td>\n",
       "      <td>2021-10-29</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Medium</td>\n",
       "      <td>7230.0</td>\n",
       "      <td>Beja</td>\n",
       "      <td>0.84</td>\n",
       "      <td>0.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>78755</th>\n",
       "      <td>92</td>\n",
       "      <td>176</td>\n",
       "      <td>Marca_10</td>\n",
       "      <td>0.84</td>\n",
       "      <td>1</td>\n",
       "      <td>193.0</td>\n",
       "      <td>Card</td>\n",
       "      <td>0.13</td>\n",
       "      <td>0.0819</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2021-10-29</td>\n",
       "      <td>2021-10-29</td>\n",
       "      <td>2021-10-29</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Medium</td>\n",
       "      <td>7230.0</td>\n",
       "      <td>Beja</td>\n",
       "      <td>0.63</td>\n",
       "      <td>0.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>78756</th>\n",
       "      <td>92</td>\n",
       "      <td>176</td>\n",
       "      <td>Marca_10</td>\n",
       "      <td>0.94</td>\n",
       "      <td>1</td>\n",
       "      <td>193.0</td>\n",
       "      <td>Card</td>\n",
       "      <td>0.13</td>\n",
       "      <td>0.0910</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2021-10-29</td>\n",
       "      <td>2021-10-29</td>\n",
       "      <td>2021-10-29</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Medium</td>\n",
       "      <td>7230.0</td>\n",
       "      <td>Beja</td>\n",
       "      <td>0.70</td>\n",
       "      <td>0.26</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>74 rows × 19 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      idstore  sku     brand  oldpvp  labelqty  Weight Payment_method  Margin  \\\n",
       "62187     281  134  Marca_30    1.09         1   260.0           Card    0.12   \n",
       "78684      91  176  Marca_10    1.12         1   193.0            N/A    0.13   \n",
       "78685      91  176  Marca_10    1.47         1   193.0            N/A    0.13   \n",
       "78686      91  176  Marca_10    1.47         1   193.0            N/A    0.13   \n",
       "78687      91  176  Marca_10    1.22         1   193.0           Card    0.13   \n",
       "...       ...  ...       ...     ...       ...     ...            ...     ...   \n",
       "78752      92  176  Marca_10    1.26         1   193.0           Card    0.13   \n",
       "78753      92  176  Marca_10    1.47         1   193.0           Cash    0.13   \n",
       "78754      92  176  Marca_10    1.12         1   193.0           Cash    0.13   \n",
       "78755      92  176  Marca_10    0.84         1   193.0           Card    0.13   \n",
       "78756      92  176  Marca_10    0.94         1   193.0           Card    0.13   \n",
       "\n",
       "       Profit  perc_expiring_sku expiring_date labelling_date  sell_date  \\\n",
       "62187  0.0648                NaN    2021-10-28     2021-10-19 2021-10-20   \n",
       "78684  0.1092                NaN    2021-10-31     2021-10-31        NaT   \n",
       "78685  0.1326                NaN    2021-10-27     2021-10-27        NaT   \n",
       "78686  0.1326                NaN    2021-10-27     2021-10-27        NaT   \n",
       "78687  0.1105                NaN    2021-10-27     2021-10-27 2021-10-27   \n",
       "...       ...                ...           ...            ...        ...   \n",
       "78752  0.1222                NaN    2021-10-25     2021-10-25 2021-10-25   \n",
       "78753  0.1430                NaN    2021-10-29     2021-10-29 2021-10-29   \n",
       "78754  0.1092                NaN    2021-10-29     2021-10-29 2021-10-29   \n",
       "78755  0.0819                NaN    2021-10-29     2021-10-29 2021-10-29   \n",
       "78756  0.0910                NaN    2021-10-29     2021-10-29 2021-10-29   \n",
       "\n",
       "       sold    type  selling_square_ft district  newpvp  discount  \n",
       "62187   1.0   Small              455.0    Porto    0.54      0.50  \n",
       "78684   0.0  Medium             8952.0   Aveiro    0.84      0.25  \n",
       "78685   0.0  Medium             8952.0   Aveiro    1.02      0.31  \n",
       "78686   0.0  Medium             8952.0   Aveiro    1.02      0.31  \n",
       "78687   1.0  Medium             8952.0   Aveiro    0.85      0.30  \n",
       "...     ...     ...                ...      ...     ...       ...  \n",
       "78752   1.0  Medium             7230.0     Beja    0.94      0.25  \n",
       "78753   1.0  Medium             7230.0     Beja    1.10      0.25  \n",
       "78754   1.0  Medium             7230.0     Beja    0.84      0.25  \n",
       "78755   1.0  Medium             7230.0     Beja    0.63      0.25  \n",
       "78756   1.0  Medium             7230.0     Beja    0.70      0.26  \n",
       "\n",
       "[74 rows x 19 columns]"
      ]
     },
     "execution_count": 122,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Filtrar as linhas onde a coluna 'per_expiring_sku' contém valores ausentes\n",
    "df[pd.isna(df['perc_expiring_sku'])]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "id": "88b94006-f2f5-4274-83e2-43269edacd74",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Preencher os valores ausentes (NaN) na coluna 'perc_expiring_sku' com a média geral da própria coluna\n",
    "def fill_na_with_mean_Total(X):\n",
    "    X['perc_expiring_sku'] = X['perc_expiring_sku'].transform(lambda x: x.fillna(x.mean()))\n",
    "    return X\n",
    "\n",
    "df = fill_na_with_mean_Total(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "id": "3548d820-1f4d-44f0-9d4b-427251c0afe9",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Alterar os nomes das colunas do DataFrame, convertendo a primeira letra de cada palavra para maiúscula e o restante para minúscula.\n",
    "df.columns = df.columns.str.title()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "id": "4e9f0c6d-3031-4824-b27e-fbdd2e053da2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Idstore</th>\n",
       "      <th>Sku</th>\n",
       "      <th>Brand</th>\n",
       "      <th>Oldpvp</th>\n",
       "      <th>Labelqty</th>\n",
       "      <th>Weight</th>\n",
       "      <th>Payment_Method</th>\n",
       "      <th>Margin</th>\n",
       "      <th>Profit</th>\n",
       "      <th>Perc_Expiring_Sku</th>\n",
       "      <th>Expiring_Date</th>\n",
       "      <th>Labelling_Date</th>\n",
       "      <th>Sell_Date</th>\n",
       "      <th>Sold</th>\n",
       "      <th>Type</th>\n",
       "      <th>Selling_Square_Ft</th>\n",
       "      <th>District</th>\n",
       "      <th>Newpvp</th>\n",
       "      <th>Discount</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Marca_1</td>\n",
       "      <td>4.22</td>\n",
       "      <td>1</td>\n",
       "      <td>260.0</td>\n",
       "      <td>Card</td>\n",
       "      <td>0.16</td>\n",
       "      <td>0.3376</td>\n",
       "      <td>0.010050</td>\n",
       "      <td>2021-10-03</td>\n",
       "      <td>2021-10-01</td>\n",
       "      <td>2021-10-02</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Large</td>\n",
       "      <td>4762.0</td>\n",
       "      <td>Évora</td>\n",
       "      <td>2.11</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Marca_1</td>\n",
       "      <td>3.96</td>\n",
       "      <td>1</td>\n",
       "      <td>260.0</td>\n",
       "      <td>N/A</td>\n",
       "      <td>0.16</td>\n",
       "      <td>0.3168</td>\n",
       "      <td>0.005025</td>\n",
       "      <td>2021-10-02</td>\n",
       "      <td>2021-10-01</td>\n",
       "      <td>NaT</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Large</td>\n",
       "      <td>4762.0</td>\n",
       "      <td>Évora</td>\n",
       "      <td>1.98</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Marca_1</td>\n",
       "      <td>4.74</td>\n",
       "      <td>1</td>\n",
       "      <td>260.0</td>\n",
       "      <td>Cash</td>\n",
       "      <td>0.16</td>\n",
       "      <td>0.3792</td>\n",
       "      <td>0.010050</td>\n",
       "      <td>2021-10-03</td>\n",
       "      <td>2021-10-01</td>\n",
       "      <td>2021-10-03</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Large</td>\n",
       "      <td>4762.0</td>\n",
       "      <td>Évora</td>\n",
       "      <td>2.37</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Marca_1</td>\n",
       "      <td>4.20</td>\n",
       "      <td>1</td>\n",
       "      <td>260.0</td>\n",
       "      <td>Card</td>\n",
       "      <td>0.16</td>\n",
       "      <td>0.3360</td>\n",
       "      <td>0.010050</td>\n",
       "      <td>2021-10-03</td>\n",
       "      <td>2021-10-01</td>\n",
       "      <td>2021-10-02</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Large</td>\n",
       "      <td>4762.0</td>\n",
       "      <td>Évora</td>\n",
       "      <td>2.10</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Marca_1</td>\n",
       "      <td>4.62</td>\n",
       "      <td>1</td>\n",
       "      <td>260.0</td>\n",
       "      <td>Cash</td>\n",
       "      <td>0.16</td>\n",
       "      <td>0.3696</td>\n",
       "      <td>0.010050</td>\n",
       "      <td>2021-10-03</td>\n",
       "      <td>2021-10-01</td>\n",
       "      <td>2021-10-03</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Large</td>\n",
       "      <td>4762.0</td>\n",
       "      <td>Évora</td>\n",
       "      <td>2.31</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>150049</th>\n",
       "      <td>193</td>\n",
       "      <td>318</td>\n",
       "      <td>Marca_2</td>\n",
       "      <td>2.49</td>\n",
       "      <td>1</td>\n",
       "      <td>97.0</td>\n",
       "      <td>N/A</td>\n",
       "      <td>0.11</td>\n",
       "      <td>0.1364</td>\n",
       "      <td>0.100629</td>\n",
       "      <td>2021-10-19</td>\n",
       "      <td>2021-10-03</td>\n",
       "      <td>NaT</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Medium</td>\n",
       "      <td>5048.0</td>\n",
       "      <td>Viseu</td>\n",
       "      <td>1.24</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>150050</th>\n",
       "      <td>203</td>\n",
       "      <td>318</td>\n",
       "      <td>Marca_2</td>\n",
       "      <td>2.49</td>\n",
       "      <td>1</td>\n",
       "      <td>97.0</td>\n",
       "      <td>Cash</td>\n",
       "      <td>0.11</td>\n",
       "      <td>0.1364</td>\n",
       "      <td>0.113208</td>\n",
       "      <td>2021-10-19</td>\n",
       "      <td>2021-10-01</td>\n",
       "      <td>2021-10-02</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Medium</td>\n",
       "      <td>9370.0</td>\n",
       "      <td>Faro</td>\n",
       "      <td>1.24</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>150051</th>\n",
       "      <td>203</td>\n",
       "      <td>318</td>\n",
       "      <td>Marca_2</td>\n",
       "      <td>2.49</td>\n",
       "      <td>1</td>\n",
       "      <td>97.0</td>\n",
       "      <td>Cash</td>\n",
       "      <td>0.11</td>\n",
       "      <td>0.1364</td>\n",
       "      <td>0.113208</td>\n",
       "      <td>2021-10-19</td>\n",
       "      <td>2021-10-01</td>\n",
       "      <td>2021-10-02</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Medium</td>\n",
       "      <td>9370.0</td>\n",
       "      <td>Faro</td>\n",
       "      <td>1.24</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>150052</th>\n",
       "      <td>139</td>\n",
       "      <td>319</td>\n",
       "      <td>Marca_24</td>\n",
       "      <td>3.49</td>\n",
       "      <td>1</td>\n",
       "      <td>141.0</td>\n",
       "      <td>Cash</td>\n",
       "      <td>0.19</td>\n",
       "      <td>0.4636</td>\n",
       "      <td>0.092437</td>\n",
       "      <td>2021-10-17</td>\n",
       "      <td>2021-10-06</td>\n",
       "      <td>2021-10-11</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Small</td>\n",
       "      <td>1061.0</td>\n",
       "      <td>Portalegre</td>\n",
       "      <td>2.44</td>\n",
       "      <td>0.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>150053</th>\n",
       "      <td>139</td>\n",
       "      <td>319</td>\n",
       "      <td>Marca_24</td>\n",
       "      <td>3.49</td>\n",
       "      <td>1</td>\n",
       "      <td>141.0</td>\n",
       "      <td>N/A</td>\n",
       "      <td>0.19</td>\n",
       "      <td>0.4636</td>\n",
       "      <td>0.092437</td>\n",
       "      <td>2021-10-17</td>\n",
       "      <td>2021-10-06</td>\n",
       "      <td>NaT</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Small</td>\n",
       "      <td>1061.0</td>\n",
       "      <td>Portalegre</td>\n",
       "      <td>2.44</td>\n",
       "      <td>0.3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>150053 rows × 19 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       Idstore  Sku     Brand  Oldpvp  Labelqty  Weight Payment_Method  \\\n",
       "0            1    1   Marca_1    4.22         1   260.0           Card   \n",
       "1            1    1   Marca_1    3.96         1   260.0            N/A   \n",
       "2            1    1   Marca_1    4.74         1   260.0           Cash   \n",
       "3            1    1   Marca_1    4.20         1   260.0           Card   \n",
       "4            1    1   Marca_1    4.62         1   260.0           Cash   \n",
       "...        ...  ...       ...     ...       ...     ...            ...   \n",
       "150049     193  318   Marca_2    2.49         1    97.0            N/A   \n",
       "150050     203  318   Marca_2    2.49         1    97.0           Cash   \n",
       "150051     203  318   Marca_2    2.49         1    97.0           Cash   \n",
       "150052     139  319  Marca_24    3.49         1   141.0           Cash   \n",
       "150053     139  319  Marca_24    3.49         1   141.0            N/A   \n",
       "\n",
       "        Margin  Profit  Perc_Expiring_Sku Expiring_Date Labelling_Date  \\\n",
       "0         0.16  0.3376           0.010050    2021-10-03     2021-10-01   \n",
       "1         0.16  0.3168           0.005025    2021-10-02     2021-10-01   \n",
       "2         0.16  0.3792           0.010050    2021-10-03     2021-10-01   \n",
       "3         0.16  0.3360           0.010050    2021-10-03     2021-10-01   \n",
       "4         0.16  0.3696           0.010050    2021-10-03     2021-10-01   \n",
       "...        ...     ...                ...           ...            ...   \n",
       "150049    0.11  0.1364           0.100629    2021-10-19     2021-10-03   \n",
       "150050    0.11  0.1364           0.113208    2021-10-19     2021-10-01   \n",
       "150051    0.11  0.1364           0.113208    2021-10-19     2021-10-01   \n",
       "150052    0.19  0.4636           0.092437    2021-10-17     2021-10-06   \n",
       "150053    0.19  0.4636           0.092437    2021-10-17     2021-10-06   \n",
       "\n",
       "        Sell_Date  Sold    Type  Selling_Square_Ft    District  Newpvp  \\\n",
       "0      2021-10-02   1.0   Large             4762.0       Évora    2.11   \n",
       "1             NaT   0.0   Large             4762.0       Évora    1.98   \n",
       "2      2021-10-03   1.0   Large             4762.0       Évora    2.37   \n",
       "3      2021-10-02   1.0   Large             4762.0       Évora    2.10   \n",
       "4      2021-10-03   1.0   Large             4762.0       Évora    2.31   \n",
       "...           ...   ...     ...                ...         ...     ...   \n",
       "150049        NaT   0.0  Medium             5048.0       Viseu    1.24   \n",
       "150050 2021-10-02   1.0  Medium             9370.0        Faro    1.24   \n",
       "150051 2021-10-02   1.0  Medium             9370.0        Faro    1.24   \n",
       "150052 2021-10-11   1.0   Small             1061.0  Portalegre    2.44   \n",
       "150053        NaT   0.0   Small             1061.0  Portalegre    2.44   \n",
       "\n",
       "        Discount  \n",
       "0            0.5  \n",
       "1            0.5  \n",
       "2            0.5  \n",
       "3            0.5  \n",
       "4            0.5  \n",
       "...          ...  \n",
       "150049       0.5  \n",
       "150050       0.5  \n",
       "150051       0.5  \n",
       "150052       0.3  \n",
       "150053       0.3  \n",
       "\n",
       "[150053 rows x 19 columns]"
      ]
     },
     "execution_count": 125,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "86dbdec6-8774-4dde-8efe-5b93971f1f78",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block\" style=\"background-color:#AEC6CF; border: 1px solid #003366\">\n",
    "<a id='preprocessing'>\n",
    "<font color = '#003366'> \n",
    "    \n",
    "# 3. Pré-processamento de dados</font>\n",
    "</a>\n",
    "    \n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4e17c1cc-06e8-4535-86e0-b77037547fdd",
   "metadata": {},
   "source": [
    "<div style=\"background-color: '#006400'; padding: 15px; border: 1px solid #003366\";\">\n",
    "    <a id='dados'></a>\n",
    "    <h2 style=\"color: #003366; margin: 0;\">3.1. Limpeza de Dados</h2>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "id": "dd1a7d56-570b-4dd8-abd8-bfceceac9377",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Criar uma cópia exata do DataFrame e a armazenar na variável df_clean\n",
    "df_clean = df.copy()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d673b0a0-1b66-4d67-b5b4-72201f6b68d8",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true
   },
   "source": [
    "<div style=\"background-color: '#006400'; padding: 15px; border: 1px solid #003366\";\">\n",
    "    <a id='values'></a>\n",
    "    <h3 style=\"color: #003366; margin: 0;\">3.1.1. Missing Values</h3>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "id": "69faa340-b836-469a-a5f1-ffcc9b2e66e5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Oldpvp                  22\n",
       "Weight                 428\n",
       "Sell_Date            69542\n",
       "Selling_Square_Ft    10779\n",
       "Newpvp                  28\n",
       "Discount                28\n",
       "dtype: int64"
      ]
     },
     "execution_count": 130,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Identificar e listar as colunas que possuem valores ausentes (NaN) \n",
    "missing_counts = df_clean.isnull().sum()\n",
    "missing_counts[missing_counts > 0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "id": "91cdbeb3-88ce-4fd8-975e-43e3a06a000d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "80827"
      ]
     },
     "execution_count": 131,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Verificar o número de valores ausentes\n",
    "missing_counts.sum().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6f02f2a3-6bce-44c6-afef-354e07f771ef",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true
   },
   "source": [
    "<div style=\"background-color: '#006400'; padding: 15px; border: 1px solid #003366\";\">\n",
    "    <a id='oldpvp'></a>\n",
    "    <h3 style=\"color: #003366; margin: 0;\">3.1.1.1. Tratamento Missing Values da variável oldpvp</h3>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "id": "f75731b7-61b7-43d1-ba5f-77637d16dc81",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Idstore</th>\n",
       "      <th>Sku</th>\n",
       "      <th>Brand</th>\n",
       "      <th>Oldpvp</th>\n",
       "      <th>Labelqty</th>\n",
       "      <th>Weight</th>\n",
       "      <th>Payment_Method</th>\n",
       "      <th>Margin</th>\n",
       "      <th>Profit</th>\n",
       "      <th>Perc_Expiring_Sku</th>\n",
       "      <th>Expiring_Date</th>\n",
       "      <th>Labelling_Date</th>\n",
       "      <th>Sell_Date</th>\n",
       "      <th>Sold</th>\n",
       "      <th>Type</th>\n",
       "      <th>Selling_Square_Ft</th>\n",
       "      <th>District</th>\n",
       "      <th>Newpvp</th>\n",
       "      <th>Discount</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>Marca_2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>222.0</td>\n",
       "      <td>Cash</td>\n",
       "      <td>0.15</td>\n",
       "      <td>0.2385</td>\n",
       "      <td>0.121212</td>\n",
       "      <td>2021-10-25</td>\n",
       "      <td>2021-10-13</td>\n",
       "      <td>2021-10-14</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Large</td>\n",
       "      <td>12358.0</td>\n",
       "      <td>Bragança</td>\n",
       "      <td>1.59</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>877</th>\n",
       "      <td>59</td>\n",
       "      <td>7</td>\n",
       "      <td>Marca_5</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>131.0</td>\n",
       "      <td>N/A</td>\n",
       "      <td>0.10</td>\n",
       "      <td>0.1530</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>2021-10-17</td>\n",
       "      <td>2021-10-15</td>\n",
       "      <td>NaT</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Medium</td>\n",
       "      <td>6540.0</td>\n",
       "      <td>Guarda</td>\n",
       "      <td>1.53</td>\n",
       "      <td>0.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>959</th>\n",
       "      <td>14</td>\n",
       "      <td>8</td>\n",
       "      <td>Marca_2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>174.0</td>\n",
       "      <td>Cash</td>\n",
       "      <td>0.15</td>\n",
       "      <td>0.1245</td>\n",
       "      <td>0.200000</td>\n",
       "      <td>2021-10-29</td>\n",
       "      <td>2021-10-28</td>\n",
       "      <td>2021-10-28</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Large</td>\n",
       "      <td>21275.0</td>\n",
       "      <td>Beja</td>\n",
       "      <td>0.83</td>\n",
       "      <td>0.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7568</th>\n",
       "      <td>289</td>\n",
       "      <td>12</td>\n",
       "      <td>Marca_2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>225.0</td>\n",
       "      <td>Card</td>\n",
       "      <td>0.19</td>\n",
       "      <td>0.1843</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>2021-10-16</td>\n",
       "      <td>2021-10-14</td>\n",
       "      <td>2021-10-15</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Small</td>\n",
       "      <td>342.0</td>\n",
       "      <td>Viana do Castelo</td>\n",
       "      <td>0.97</td>\n",
       "      <td>0.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7575</th>\n",
       "      <td>289</td>\n",
       "      <td>12</td>\n",
       "      <td>Marca_2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>225.0</td>\n",
       "      <td>Card</td>\n",
       "      <td>0.19</td>\n",
       "      <td>0.1843</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>2021-10-05</td>\n",
       "      <td>2021-10-03</td>\n",
       "      <td>2021-10-04</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Small</td>\n",
       "      <td>342.0</td>\n",
       "      <td>Viana do Castelo</td>\n",
       "      <td>0.97</td>\n",
       "      <td>0.3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Idstore Sku    Brand  Oldpvp  Labelqty  Weight Payment_Method  Margin  \\\n",
       "15         2   2  Marca_2     NaN         1   222.0           Cash    0.15   \n",
       "877       59   7  Marca_5     NaN         1   131.0            N/A    0.10   \n",
       "959       14   8  Marca_2     NaN         1   174.0           Cash    0.15   \n",
       "7568     289  12  Marca_2     NaN         1   225.0           Card    0.19   \n",
       "7575     289  12  Marca_2     NaN         1   225.0           Card    0.19   \n",
       "\n",
       "      Profit  Perc_Expiring_Sku Expiring_Date Labelling_Date  Sell_Date  Sold  \\\n",
       "15    0.2385           0.121212    2021-10-25     2021-10-13 2021-10-14   1.0   \n",
       "877   0.1530           0.666667    2021-10-17     2021-10-15        NaT   0.0   \n",
       "959   0.1245           0.200000    2021-10-29     2021-10-28 2021-10-28   1.0   \n",
       "7568  0.1843           0.666667    2021-10-16     2021-10-14 2021-10-15   1.0   \n",
       "7575  0.1843           0.666667    2021-10-05     2021-10-03 2021-10-04   1.0   \n",
       "\n",
       "        Type  Selling_Square_Ft          District  Newpvp  Discount  \n",
       "15     Large            12358.0          Bragança    1.59       0.5  \n",
       "877   Medium             6540.0            Guarda    1.53       0.3  \n",
       "959    Large            21275.0              Beja    0.83       0.3  \n",
       "7568   Small              342.0  Viana do Castelo    0.97       0.3  \n",
       "7575   Small              342.0  Viana do Castelo    0.97       0.3  "
      ]
     },
     "execution_count": 133,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Filtrar as primeiras 5 linhas onde a coluna 'Oldpvp' contém valores ausentes \n",
    "df[pd.isna(df['Oldpvp'])][:5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "id": "684d469e-98c7-4945-8444-1a6fa4ad5cc2",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Preencher os valores ausentes (NaN) na coluna 'Oldpvp' estimando o valor a partir das colunas 'Newpvp' e 'Discount'.\n",
    "def fill_na_oldpvp(X):\n",
    "    X['Oldpvp'] = X['Oldpvp'].transform(lambda x: x.fillna(X['Newpvp']/(1-X['Discount'])))\n",
    "    return X\n",
    "    \n",
    "df = fill_na_oldpvp(df)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1c85983b-751f-453a-b04d-ea730911c042",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true
   },
   "source": [
    "<div style=\"background-color: '#006400'; padding: 15px; border: 1px solid #003366\";\">\n",
    "    <a id='weight'></a>\n",
    "    <h3 style=\"color: #003366; margin: 0;\">3.1.1.2.Tratamento Missing Values da variável weight</h3>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "id": "8162f107-36a7-44c8-8ced-3c3c94d7ac9d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Idstore</th>\n",
       "      <th>Sku</th>\n",
       "      <th>Brand</th>\n",
       "      <th>Oldpvp</th>\n",
       "      <th>Labelqty</th>\n",
       "      <th>Weight</th>\n",
       "      <th>Payment_Method</th>\n",
       "      <th>Margin</th>\n",
       "      <th>Profit</th>\n",
       "      <th>Perc_Expiring_Sku</th>\n",
       "      <th>Expiring_Date</th>\n",
       "      <th>Labelling_Date</th>\n",
       "      <th>Sell_Date</th>\n",
       "      <th>Sold</th>\n",
       "      <th>Type</th>\n",
       "      <th>Selling_Square_Ft</th>\n",
       "      <th>District</th>\n",
       "      <th>Newpvp</th>\n",
       "      <th>Discount</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>46</th>\n",
       "      <td>7</td>\n",
       "      <td>2</td>\n",
       "      <td>Marca_2</td>\n",
       "      <td>3.19</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>N/A</td>\n",
       "      <td>0.15</td>\n",
       "      <td>0.3585</td>\n",
       "      <td>0.111111</td>\n",
       "      <td>2021-10-26</td>\n",
       "      <td>2021-10-15</td>\n",
       "      <td>NaT</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Large</td>\n",
       "      <td>13618.0</td>\n",
       "      <td>Guarda</td>\n",
       "      <td>2.39</td>\n",
       "      <td>0.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>147</th>\n",
       "      <td>14</td>\n",
       "      <td>4</td>\n",
       "      <td>Marca_3</td>\n",
       "      <td>2.79</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Card</td>\n",
       "      <td>0.17</td>\n",
       "      <td>0.3315</td>\n",
       "      <td>0.250000</td>\n",
       "      <td>2021-10-28</td>\n",
       "      <td>2021-10-27</td>\n",
       "      <td>2021-10-27</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Large</td>\n",
       "      <td>21275.0</td>\n",
       "      <td>Beja</td>\n",
       "      <td>1.95</td>\n",
       "      <td>0.30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>169</th>\n",
       "      <td>18</td>\n",
       "      <td>4</td>\n",
       "      <td>Marca_3</td>\n",
       "      <td>2.79</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>N/A</td>\n",
       "      <td>0.17</td>\n",
       "      <td>0.3315</td>\n",
       "      <td>0.250000</td>\n",
       "      <td>2021-10-21</td>\n",
       "      <td>2021-10-20</td>\n",
       "      <td>NaT</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Large</td>\n",
       "      <td>12373.0</td>\n",
       "      <td>Leiria</td>\n",
       "      <td>1.95</td>\n",
       "      <td>0.30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>180</th>\n",
       "      <td>21</td>\n",
       "      <td>4</td>\n",
       "      <td>Marca_3</td>\n",
       "      <td>2.79</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Card</td>\n",
       "      <td>0.17</td>\n",
       "      <td>0.3315</td>\n",
       "      <td>0.250000</td>\n",
       "      <td>2021-10-09</td>\n",
       "      <td>2021-10-08</td>\n",
       "      <td>2021-10-09</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Large</td>\n",
       "      <td>17657.0</td>\n",
       "      <td>Guarda</td>\n",
       "      <td>1.95</td>\n",
       "      <td>0.30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16381</th>\n",
       "      <td>199</td>\n",
       "      <td>47</td>\n",
       "      <td>Marca_2</td>\n",
       "      <td>2.95</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Cash</td>\n",
       "      <td>0.17</td>\n",
       "      <td>0.2499</td>\n",
       "      <td>0.060606</td>\n",
       "      <td>2021-10-25</td>\n",
       "      <td>2021-10-17</td>\n",
       "      <td>2021-10-19</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Medium</td>\n",
       "      <td>12009.0</td>\n",
       "      <td>Castelo Branco</td>\n",
       "      <td>1.47</td>\n",
       "      <td>0.50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>78923</th>\n",
       "      <td>217</td>\n",
       "      <td>181</td>\n",
       "      <td>Marca_25</td>\n",
       "      <td>1.29</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Cash</td>\n",
       "      <td>0.20</td>\n",
       "      <td>0.1800</td>\n",
       "      <td>0.250000</td>\n",
       "      <td>2021-10-12</td>\n",
       "      <td>2021-10-11</td>\n",
       "      <td>2021-10-12</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Small</td>\n",
       "      <td>115.0</td>\n",
       "      <td>Lisboa</td>\n",
       "      <td>0.90</td>\n",
       "      <td>0.30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>78924</th>\n",
       "      <td>217</td>\n",
       "      <td>181</td>\n",
       "      <td>Marca_25</td>\n",
       "      <td>1.29</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Cash</td>\n",
       "      <td>0.20</td>\n",
       "      <td>0.1800</td>\n",
       "      <td>0.250000</td>\n",
       "      <td>2021-10-12</td>\n",
       "      <td>2021-10-11</td>\n",
       "      <td>2021-10-12</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Small</td>\n",
       "      <td>115.0</td>\n",
       "      <td>Lisboa</td>\n",
       "      <td>0.90</td>\n",
       "      <td>0.30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>78925</th>\n",
       "      <td>217</td>\n",
       "      <td>181</td>\n",
       "      <td>Marca_25</td>\n",
       "      <td>1.29</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Card</td>\n",
       "      <td>0.20</td>\n",
       "      <td>0.1800</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2021-10-24</td>\n",
       "      <td>2021-10-24</td>\n",
       "      <td>2021-10-24</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Small</td>\n",
       "      <td>115.0</td>\n",
       "      <td>Lisboa</td>\n",
       "      <td>0.90</td>\n",
       "      <td>0.30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>78926</th>\n",
       "      <td>217</td>\n",
       "      <td>181</td>\n",
       "      <td>Marca_25</td>\n",
       "      <td>1.29</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Cash</td>\n",
       "      <td>0.20</td>\n",
       "      <td>0.1800</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2021-10-24</td>\n",
       "      <td>2021-10-24</td>\n",
       "      <td>2021-10-24</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Small</td>\n",
       "      <td>115.0</td>\n",
       "      <td>Lisboa</td>\n",
       "      <td>0.90</td>\n",
       "      <td>0.30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>78927</th>\n",
       "      <td>217</td>\n",
       "      <td>181</td>\n",
       "      <td>Marca_25</td>\n",
       "      <td>1.29</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>N/A</td>\n",
       "      <td>0.20</td>\n",
       "      <td>0.1800</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2021-10-28</td>\n",
       "      <td>2021-10-28</td>\n",
       "      <td>NaT</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Small</td>\n",
       "      <td>115.0</td>\n",
       "      <td>Lisboa</td>\n",
       "      <td>0.90</td>\n",
       "      <td>0.30</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>428 rows × 19 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Idstore  Sku     Brand  Oldpvp  Labelqty  Weight Payment_Method  Margin  \\\n",
       "46          7    2   Marca_2    3.19         1     NaN            N/A    0.15   \n",
       "147        14    4   Marca_3    2.79         1     NaN           Card    0.17   \n",
       "169        18    4   Marca_3    2.79         1     NaN            N/A    0.17   \n",
       "180        21    4   Marca_3    2.79         1     NaN           Card    0.17   \n",
       "16381     199   47   Marca_2    2.95         1     NaN           Cash    0.17   \n",
       "...       ...  ...       ...     ...       ...     ...            ...     ...   \n",
       "78923     217  181  Marca_25    1.29         1     NaN           Cash    0.20   \n",
       "78924     217  181  Marca_25    1.29         1     NaN           Cash    0.20   \n",
       "78925     217  181  Marca_25    1.29         1     NaN           Card    0.20   \n",
       "78926     217  181  Marca_25    1.29         1     NaN           Cash    0.20   \n",
       "78927     217  181  Marca_25    1.29         1     NaN            N/A    0.20   \n",
       "\n",
       "       Profit  Perc_Expiring_Sku Expiring_Date Labelling_Date  Sell_Date  \\\n",
       "46     0.3585           0.111111    2021-10-26     2021-10-15        NaT   \n",
       "147    0.3315           0.250000    2021-10-28     2021-10-27 2021-10-27   \n",
       "169    0.3315           0.250000    2021-10-21     2021-10-20        NaT   \n",
       "180    0.3315           0.250000    2021-10-09     2021-10-08 2021-10-09   \n",
       "16381  0.2499           0.060606    2021-10-25     2021-10-17 2021-10-19   \n",
       "...       ...                ...           ...            ...        ...   \n",
       "78923  0.1800           0.250000    2021-10-12     2021-10-11 2021-10-12   \n",
       "78924  0.1800           0.250000    2021-10-12     2021-10-11 2021-10-12   \n",
       "78925  0.1800           0.000000    2021-10-24     2021-10-24 2021-10-24   \n",
       "78926  0.1800           0.000000    2021-10-24     2021-10-24 2021-10-24   \n",
       "78927  0.1800           0.000000    2021-10-28     2021-10-28        NaT   \n",
       "\n",
       "       Sold    Type  Selling_Square_Ft        District  Newpvp  Discount  \n",
       "46      0.0   Large            13618.0          Guarda    2.39      0.25  \n",
       "147     1.0   Large            21275.0            Beja    1.95      0.30  \n",
       "169     0.0   Large            12373.0          Leiria    1.95      0.30  \n",
       "180     1.0   Large            17657.0          Guarda    1.95      0.30  \n",
       "16381   1.0  Medium            12009.0  Castelo Branco    1.47      0.50  \n",
       "...     ...     ...                ...             ...     ...       ...  \n",
       "78923   1.0   Small              115.0          Lisboa    0.90      0.30  \n",
       "78924   1.0   Small              115.0          Lisboa    0.90      0.30  \n",
       "78925   1.0   Small              115.0          Lisboa    0.90      0.30  \n",
       "78926   1.0   Small              115.0          Lisboa    0.90      0.30  \n",
       "78927   0.0   Small              115.0          Lisboa    0.90      0.30  \n",
       "\n",
       "[428 rows x 19 columns]"
      ]
     },
     "execution_count": 136,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Filtrar as linhas onde a coluna 'Weight' contém valores ausentes\n",
    "df[pd.isna(df['Weight'])]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "id": "e20ea48d-62b9-44db-bd47-1d747e70091a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Sku</th>\n",
       "      <th>Weight</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [Sku, Weight]\n",
       "Index: []"
      ]
     },
     "execution_count": 137,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Identificar os SKUs que possuem mais de um valor distinto de peso (Weight)\n",
    "df.groupby('Sku')['Weight'].nunique().reset_index().query('Weight > 1')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cc12ac9c-bd1b-439b-bc5a-e740200d126c",
   "metadata": {},
   "source": [
    "*NOTA:*\n",
    "\n",
    "Verifica-se que para cada Sku apenas existe um valor de Weight (descartando os Nan). Desta forma, os valores Nan serão necessários serem tratados através da substituição dos mesmo pelo valor Weight do Sku referidos no resto dos registos."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "id": "7433592c-2a1d-4a73-bbd3-48cd475c203f",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Preencher os valores ausentes (NaN) na coluna 'Weight' usando o primeiro valor não nulo dentro de cada grupo de 'Sku'\n",
    "def fill_na_copy_weight(X):\n",
    "    X['Weight'] = X.groupby(['Sku'])['Weight'].transform(lambda x: x.fillna(x.iloc[0]))\n",
    "    return X\n",
    "\n",
    "df = fill_na_copy_weight(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "id": "7e0c4443-2426-49d6-b4eb-52b6503acf3a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Sku\n",
       "170    277\n",
       "181     95\n",
       "47      34\n",
       "148     18\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 140,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Identificar os valores ausentes (NaN) \n",
    "df[pd.isna(df['Weight'])][['Sku']].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "daa63838-c7bb-46d8-84cb-d473184a3a7c",
   "metadata": {},
   "source": [
    "*NOTA:*\n",
    "\n",
    "Verifica-se que ainda existem Nan. Desta forma, os missing values serão substituidos por 0 para facilitar as próximas análises."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "id": "7bb3d51c-6354-4a18-b8d6-b3127a3a018d",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Substituir os valores Nan da varável 'Weight' por 0\n",
    "df['Weight'] = df['Weight'].fillna(0)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e5378c5c-9c3a-4384-94c4-680d7a046935",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true
   },
   "source": [
    "<div style=\"background-color: '#006400'; padding: 15px; border: 1px solid #003366\";\">\n",
    "    <a id='sell'></a>\n",
    "    <h3 style=\"color: #003366; margin: 0;\">3.1.1.3.Tratamento Missing Values da variável sell-date</h3>\n",
    "</div>\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "id": "4b78a0b4-cea8-4395-b94a-311f78b44172",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Idstore</th>\n",
       "      <th>Sku</th>\n",
       "      <th>Brand</th>\n",
       "      <th>Oldpvp</th>\n",
       "      <th>Labelqty</th>\n",
       "      <th>Weight</th>\n",
       "      <th>Payment_Method</th>\n",
       "      <th>Margin</th>\n",
       "      <th>Profit</th>\n",
       "      <th>Perc_Expiring_Sku</th>\n",
       "      <th>Expiring_Date</th>\n",
       "      <th>Labelling_Date</th>\n",
       "      <th>Sell_Date</th>\n",
       "      <th>Sold</th>\n",
       "      <th>Type</th>\n",
       "      <th>Selling_Square_Ft</th>\n",
       "      <th>District</th>\n",
       "      <th>Newpvp</th>\n",
       "      <th>Discount</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Marca_1</td>\n",
       "      <td>3.96</td>\n",
       "      <td>1</td>\n",
       "      <td>260.0</td>\n",
       "      <td>N/A</td>\n",
       "      <td>0.16</td>\n",
       "      <td>0.3168</td>\n",
       "      <td>0.005025</td>\n",
       "      <td>2021-10-02</td>\n",
       "      <td>2021-10-01</td>\n",
       "      <td>NaT</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Large</td>\n",
       "      <td>4762.0</td>\n",
       "      <td>Évora</td>\n",
       "      <td>1.98</td>\n",
       "      <td>0.50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Marca_1</td>\n",
       "      <td>4.62</td>\n",
       "      <td>1</td>\n",
       "      <td>260.0</td>\n",
       "      <td>N/A</td>\n",
       "      <td>0.16</td>\n",
       "      <td>0.3696</td>\n",
       "      <td>0.005025</td>\n",
       "      <td>2021-10-02</td>\n",
       "      <td>2021-10-01</td>\n",
       "      <td>NaT</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Large</td>\n",
       "      <td>4762.0</td>\n",
       "      <td>Évora</td>\n",
       "      <td>2.31</td>\n",
       "      <td>0.50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Marca_1</td>\n",
       "      <td>4.76</td>\n",
       "      <td>1</td>\n",
       "      <td>260.0</td>\n",
       "      <td>N/A</td>\n",
       "      <td>0.16</td>\n",
       "      <td>0.3808</td>\n",
       "      <td>0.010050</td>\n",
       "      <td>2021-10-03</td>\n",
       "      <td>2021-10-01</td>\n",
       "      <td>NaT</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Large</td>\n",
       "      <td>4762.0</td>\n",
       "      <td>Évora</td>\n",
       "      <td>2.38</td>\n",
       "      <td>0.50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>7</td>\n",
       "      <td>2</td>\n",
       "      <td>Marca_2</td>\n",
       "      <td>3.19</td>\n",
       "      <td>1</td>\n",
       "      <td>222.0</td>\n",
       "      <td>N/A</td>\n",
       "      <td>0.15</td>\n",
       "      <td>0.3585</td>\n",
       "      <td>0.111111</td>\n",
       "      <td>2021-10-26</td>\n",
       "      <td>2021-10-15</td>\n",
       "      <td>NaT</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Large</td>\n",
       "      <td>13618.0</td>\n",
       "      <td>Guarda</td>\n",
       "      <td>2.39</td>\n",
       "      <td>0.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>7</td>\n",
       "      <td>2</td>\n",
       "      <td>Marca_2</td>\n",
       "      <td>3.19</td>\n",
       "      <td>1</td>\n",
       "      <td>222.0</td>\n",
       "      <td>N/A</td>\n",
       "      <td>0.15</td>\n",
       "      <td>0.3585</td>\n",
       "      <td>0.111111</td>\n",
       "      <td>2021-10-26</td>\n",
       "      <td>2021-10-15</td>\n",
       "      <td>NaT</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Large</td>\n",
       "      <td>13618.0</td>\n",
       "      <td>Guarda</td>\n",
       "      <td>2.39</td>\n",
       "      <td>0.25</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Idstore Sku    Brand  Oldpvp  Labelqty  Weight Payment_Method  Margin  \\\n",
       "1        1   1  Marca_1    3.96         1   260.0            N/A    0.16   \n",
       "8        1   1  Marca_1    4.62         1   260.0            N/A    0.16   \n",
       "13       1   1  Marca_1    4.76         1   260.0            N/A    0.16   \n",
       "33       7   2  Marca_2    3.19         1   222.0            N/A    0.15   \n",
       "36       7   2  Marca_2    3.19         1   222.0            N/A    0.15   \n",
       "\n",
       "    Profit  Perc_Expiring_Sku Expiring_Date Labelling_Date Sell_Date  Sold  \\\n",
       "1   0.3168           0.005025    2021-10-02     2021-10-01       NaT   0.0   \n",
       "8   0.3696           0.005025    2021-10-02     2021-10-01       NaT   0.0   \n",
       "13  0.3808           0.010050    2021-10-03     2021-10-01       NaT   0.0   \n",
       "33  0.3585           0.111111    2021-10-26     2021-10-15       NaT   0.0   \n",
       "36  0.3585           0.111111    2021-10-26     2021-10-15       NaT   0.0   \n",
       "\n",
       "     Type  Selling_Square_Ft District  Newpvp  Discount  \n",
       "1   Large             4762.0    Évora    1.98      0.50  \n",
       "8   Large             4762.0    Évora    2.31      0.50  \n",
       "13  Large             4762.0    Évora    2.38      0.50  \n",
       "33  Large            13618.0   Guarda    2.39      0.25  \n",
       "36  Large            13618.0   Guarda    2.39      0.25  "
      ]
     },
     "execution_count": 144,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Filtrar as primeiras 5 linhas onde a coluna 'Sell_Date' contém valores ausentes \n",
    "df[pd.isna(df['Sell_Date'])][:5]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "95d7a92b-3112-4a93-b721-dced103c3ae7",
   "metadata": {},
   "source": [
    "*NOTA:*\n",
    "\n",
    "Analisando os valores nulos, verifica-se que para os casos em questão os produtos não foram vendidos. Desta forma, conclui-se que não faz sentido tratar os missing values visto que não se tratam de erros."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f7182746-5b33-479e-b00e-e06307f29ead",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true
   },
   "source": [
    "<div style=\"background-color: '#006400'; padding: 15px; border: 1px solid #003366\";\">\n",
    "    <a id='selling'></a>\n",
    "    <h3 style=\"color: #003366; margin: 0;\">3.1.1.4.Tratamento Missing Values da variável selling_square_ft</h3>\n",
    "</div>\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "id": "8fa4e455-1cc8-4b9f-87a7-b5295e1d4aa9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Idstore</th>\n",
       "      <th>Sku</th>\n",
       "      <th>Brand</th>\n",
       "      <th>Oldpvp</th>\n",
       "      <th>Labelqty</th>\n",
       "      <th>Weight</th>\n",
       "      <th>Payment_Method</th>\n",
       "      <th>Margin</th>\n",
       "      <th>Profit</th>\n",
       "      <th>Perc_Expiring_Sku</th>\n",
       "      <th>Expiring_Date</th>\n",
       "      <th>Labelling_Date</th>\n",
       "      <th>Sell_Date</th>\n",
       "      <th>Sold</th>\n",
       "      <th>Type</th>\n",
       "      <th>Selling_Square_Ft</th>\n",
       "      <th>District</th>\n",
       "      <th>Newpvp</th>\n",
       "      <th>Discount</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>323</th>\n",
       "      <td>45</td>\n",
       "      <td>4</td>\n",
       "      <td>Marca_3</td>\n",
       "      <td>2.79</td>\n",
       "      <td>1</td>\n",
       "      <td>134.0</td>\n",
       "      <td>N/A</td>\n",
       "      <td>0.17</td>\n",
       "      <td>0.3315</td>\n",
       "      <td>0.250000</td>\n",
       "      <td>2021-10-02</td>\n",
       "      <td>2021-10-01</td>\n",
       "      <td>NaT</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Medium</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Setúbal</td>\n",
       "      <td>1.95</td>\n",
       "      <td>0.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>324</th>\n",
       "      <td>45</td>\n",
       "      <td>4</td>\n",
       "      <td>Marca_3</td>\n",
       "      <td>2.79</td>\n",
       "      <td>1</td>\n",
       "      <td>134.0</td>\n",
       "      <td>N/A</td>\n",
       "      <td>0.17</td>\n",
       "      <td>0.3315</td>\n",
       "      <td>0.250000</td>\n",
       "      <td>2021-10-02</td>\n",
       "      <td>2021-10-01</td>\n",
       "      <td>NaT</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Medium</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Setúbal</td>\n",
       "      <td>1.95</td>\n",
       "      <td>0.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>325</th>\n",
       "      <td>45</td>\n",
       "      <td>4</td>\n",
       "      <td>Marca_3</td>\n",
       "      <td>2.79</td>\n",
       "      <td>1</td>\n",
       "      <td>134.0</td>\n",
       "      <td>Card</td>\n",
       "      <td>0.17</td>\n",
       "      <td>0.3315</td>\n",
       "      <td>0.250000</td>\n",
       "      <td>2021-10-07</td>\n",
       "      <td>2021-10-06</td>\n",
       "      <td>2021-10-06</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Medium</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Setúbal</td>\n",
       "      <td>1.95</td>\n",
       "      <td>0.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>326</th>\n",
       "      <td>45</td>\n",
       "      <td>4</td>\n",
       "      <td>Marca_3</td>\n",
       "      <td>2.79</td>\n",
       "      <td>1</td>\n",
       "      <td>134.0</td>\n",
       "      <td>Cash</td>\n",
       "      <td>0.17</td>\n",
       "      <td>0.3315</td>\n",
       "      <td>0.250000</td>\n",
       "      <td>2021-10-07</td>\n",
       "      <td>2021-10-06</td>\n",
       "      <td>2021-10-07</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Medium</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Setúbal</td>\n",
       "      <td>1.95</td>\n",
       "      <td>0.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>327</th>\n",
       "      <td>45</td>\n",
       "      <td>4</td>\n",
       "      <td>Marca_3</td>\n",
       "      <td>2.79</td>\n",
       "      <td>1</td>\n",
       "      <td>134.0</td>\n",
       "      <td>Cash</td>\n",
       "      <td>0.17</td>\n",
       "      <td>0.3315</td>\n",
       "      <td>0.250000</td>\n",
       "      <td>2021-10-26</td>\n",
       "      <td>2021-10-25</td>\n",
       "      <td>2021-10-25</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Medium</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Setúbal</td>\n",
       "      <td>1.95</td>\n",
       "      <td>0.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>150010</th>\n",
       "      <td>137</td>\n",
       "      <td>318</td>\n",
       "      <td>Marca_2</td>\n",
       "      <td>2.49</td>\n",
       "      <td>1</td>\n",
       "      <td>97.0</td>\n",
       "      <td>N/A</td>\n",
       "      <td>0.11</td>\n",
       "      <td>0.1364</td>\n",
       "      <td>0.062893</td>\n",
       "      <td>2021-10-20</td>\n",
       "      <td>2021-10-10</td>\n",
       "      <td>NaT</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Small</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Beja</td>\n",
       "      <td>1.24</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>150011</th>\n",
       "      <td>137</td>\n",
       "      <td>318</td>\n",
       "      <td>Marca_2</td>\n",
       "      <td>2.49</td>\n",
       "      <td>1</td>\n",
       "      <td>97.0</td>\n",
       "      <td>N/A</td>\n",
       "      <td>0.11</td>\n",
       "      <td>0.1364</td>\n",
       "      <td>0.062893</td>\n",
       "      <td>2021-10-20</td>\n",
       "      <td>2021-10-10</td>\n",
       "      <td>NaT</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Small</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Beja</td>\n",
       "      <td>1.24</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>150012</th>\n",
       "      <td>137</td>\n",
       "      <td>318</td>\n",
       "      <td>Marca_2</td>\n",
       "      <td>2.49</td>\n",
       "      <td>1</td>\n",
       "      <td>97.0</td>\n",
       "      <td>N/A</td>\n",
       "      <td>0.11</td>\n",
       "      <td>0.1364</td>\n",
       "      <td>0.062893</td>\n",
       "      <td>2021-10-20</td>\n",
       "      <td>2021-10-10</td>\n",
       "      <td>NaT</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Small</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Beja</td>\n",
       "      <td>1.24</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>150013</th>\n",
       "      <td>137</td>\n",
       "      <td>318</td>\n",
       "      <td>Marca_2</td>\n",
       "      <td>2.49</td>\n",
       "      <td>1</td>\n",
       "      <td>97.0</td>\n",
       "      <td>N/A</td>\n",
       "      <td>0.11</td>\n",
       "      <td>0.1364</td>\n",
       "      <td>0.062893</td>\n",
       "      <td>2021-10-20</td>\n",
       "      <td>2021-10-10</td>\n",
       "      <td>NaT</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Small</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Beja</td>\n",
       "      <td>1.24</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>150014</th>\n",
       "      <td>137</td>\n",
       "      <td>318</td>\n",
       "      <td>Marca_2</td>\n",
       "      <td>2.49</td>\n",
       "      <td>1</td>\n",
       "      <td>97.0</td>\n",
       "      <td>N/A</td>\n",
       "      <td>0.11</td>\n",
       "      <td>0.1364</td>\n",
       "      <td>0.062893</td>\n",
       "      <td>2021-10-20</td>\n",
       "      <td>2021-10-10</td>\n",
       "      <td>NaT</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Small</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Beja</td>\n",
       "      <td>1.24</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>10779 rows × 19 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       Idstore  Sku    Brand  Oldpvp  Labelqty  Weight Payment_Method  Margin  \\\n",
       "323         45    4  Marca_3    2.79         1   134.0            N/A    0.17   \n",
       "324         45    4  Marca_3    2.79         1   134.0            N/A    0.17   \n",
       "325         45    4  Marca_3    2.79         1   134.0           Card    0.17   \n",
       "326         45    4  Marca_3    2.79         1   134.0           Cash    0.17   \n",
       "327         45    4  Marca_3    2.79         1   134.0           Cash    0.17   \n",
       "...        ...  ...      ...     ...       ...     ...            ...     ...   \n",
       "150010     137  318  Marca_2    2.49         1    97.0            N/A    0.11   \n",
       "150011     137  318  Marca_2    2.49         1    97.0            N/A    0.11   \n",
       "150012     137  318  Marca_2    2.49         1    97.0            N/A    0.11   \n",
       "150013     137  318  Marca_2    2.49         1    97.0            N/A    0.11   \n",
       "150014     137  318  Marca_2    2.49         1    97.0            N/A    0.11   \n",
       "\n",
       "        Profit  Perc_Expiring_Sku Expiring_Date Labelling_Date  Sell_Date  \\\n",
       "323     0.3315           0.250000    2021-10-02     2021-10-01        NaT   \n",
       "324     0.3315           0.250000    2021-10-02     2021-10-01        NaT   \n",
       "325     0.3315           0.250000    2021-10-07     2021-10-06 2021-10-06   \n",
       "326     0.3315           0.250000    2021-10-07     2021-10-06 2021-10-07   \n",
       "327     0.3315           0.250000    2021-10-26     2021-10-25 2021-10-25   \n",
       "...        ...                ...           ...            ...        ...   \n",
       "150010  0.1364           0.062893    2021-10-20     2021-10-10        NaT   \n",
       "150011  0.1364           0.062893    2021-10-20     2021-10-10        NaT   \n",
       "150012  0.1364           0.062893    2021-10-20     2021-10-10        NaT   \n",
       "150013  0.1364           0.062893    2021-10-20     2021-10-10        NaT   \n",
       "150014  0.1364           0.062893    2021-10-20     2021-10-10        NaT   \n",
       "\n",
       "        Sold    Type  Selling_Square_Ft District  Newpvp  Discount  \n",
       "323      0.0  Medium                NaN  Setúbal    1.95       0.3  \n",
       "324      0.0  Medium                NaN  Setúbal    1.95       0.3  \n",
       "325      1.0  Medium                NaN  Setúbal    1.95       0.3  \n",
       "326      1.0  Medium                NaN  Setúbal    1.95       0.3  \n",
       "327      1.0  Medium                NaN  Setúbal    1.95       0.3  \n",
       "...      ...     ...                ...      ...     ...       ...  \n",
       "150010   0.0   Small                NaN     Beja    1.24       0.5  \n",
       "150011   0.0   Small                NaN     Beja    1.24       0.5  \n",
       "150012   0.0   Small                NaN     Beja    1.24       0.5  \n",
       "150013   0.0   Small                NaN     Beja    1.24       0.5  \n",
       "150014   0.0   Small                NaN     Beja    1.24       0.5  \n",
       "\n",
       "[10779 rows x 19 columns]"
      ]
     },
     "execution_count": 147,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Filtrar todas as linhas onde a coluna 'Selling_Square_Ft' contém valores ausentes (NaN)\n",
    "df[pd.isna(df['Selling_Square_Ft'])]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "id": "d57228bc-cc45-4aa0-adf2-3e59e948f1c6",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Preencher os valores ausentes (NaN) na coluna 'Selling_Square_Ft' usando a média da categoria 'Type'\n",
    "def fill_na_sqr_ft(X):\n",
    "    X['Selling_Square_Ft'] = X.groupby(['Type'])['Selling_Square_Ft'].transform(lambda x: x.fillna(x.mean()))\n",
    "    return X"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "id": "b3ae05df-d038-45e8-8e92-838143f778ef",
   "metadata": {},
   "outputs": [],
   "source": [
    "df=fill_na_sqr_ft(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "id": "80e941dc-8029-4a7c-b531-5273c4990813",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Idstore                  0\n",
       "Sku                      0\n",
       "Brand                    0\n",
       "Oldpvp                   0\n",
       "Labelqty                 0\n",
       "Weight                   0\n",
       "Payment_Method           0\n",
       "Margin                   0\n",
       "Profit                   0\n",
       "Perc_Expiring_Sku        0\n",
       "Expiring_Date            0\n",
       "Labelling_Date           0\n",
       "Sell_Date            69542\n",
       "Sold                     0\n",
       "Type                     0\n",
       "Selling_Square_Ft        0\n",
       "District                 0\n",
       "Newpvp                  28\n",
       "Discount                28\n",
       "dtype: int64"
      ]
     },
     "execution_count": 150,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isna().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "27d8aba5-9a17-45b9-ae75-b19624b56bcc",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true
   },
   "source": [
    " <div style=\"background-color: '#006400'; padding: 15px; border: 1px solid #003366\";\">\n",
    "    <a id='discount'></a>\n",
    "    <h3 style=\"color: #003366; margin: 0;\">3.1.1.5.Tratamento Missing Values da variável discount</h3>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "id": "0020004b-c574-4201-bf60-1ee4ce37f575",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Idstore</th>\n",
       "      <th>Sku</th>\n",
       "      <th>Brand</th>\n",
       "      <th>Oldpvp</th>\n",
       "      <th>Labelqty</th>\n",
       "      <th>Weight</th>\n",
       "      <th>Payment_Method</th>\n",
       "      <th>Margin</th>\n",
       "      <th>Profit</th>\n",
       "      <th>Perc_Expiring_Sku</th>\n",
       "      <th>Expiring_Date</th>\n",
       "      <th>Labelling_Date</th>\n",
       "      <th>Sell_Date</th>\n",
       "      <th>Sold</th>\n",
       "      <th>Type</th>\n",
       "      <th>Selling_Square_Ft</th>\n",
       "      <th>District</th>\n",
       "      <th>Newpvp</th>\n",
       "      <th>Discount</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Marca_1</td>\n",
       "      <td>5.23</td>\n",
       "      <td>1</td>\n",
       "      <td>260.0</td>\n",
       "      <td>Card</td>\n",
       "      <td>0.16</td>\n",
       "      <td>0.4176</td>\n",
       "      <td>0.010050</td>\n",
       "      <td>2021-10-03</td>\n",
       "      <td>2021-10-01</td>\n",
       "      <td>2021-10-03</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Large</td>\n",
       "      <td>4762.0</td>\n",
       "      <td>Évora</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>875</th>\n",
       "      <td>59</td>\n",
       "      <td>7</td>\n",
       "      <td>Marca_5</td>\n",
       "      <td>2.19</td>\n",
       "      <td>1</td>\n",
       "      <td>131.0</td>\n",
       "      <td>Cash</td>\n",
       "      <td>0.10</td>\n",
       "      <td>0.1530</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>2021-10-17</td>\n",
       "      <td>2021-10-15</td>\n",
       "      <td>2021-10-16</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Medium</td>\n",
       "      <td>6540.0</td>\n",
       "      <td>Guarda</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>955</th>\n",
       "      <td>14</td>\n",
       "      <td>8</td>\n",
       "      <td>Marca_2</td>\n",
       "      <td>1.19</td>\n",
       "      <td>1</td>\n",
       "      <td>174.0</td>\n",
       "      <td>Card</td>\n",
       "      <td>0.15</td>\n",
       "      <td>0.1245</td>\n",
       "      <td>0.200000</td>\n",
       "      <td>2021-10-29</td>\n",
       "      <td>2021-10-28</td>\n",
       "      <td>2021-10-28</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Large</td>\n",
       "      <td>21275.0</td>\n",
       "      <td>Beja</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7564</th>\n",
       "      <td>14</td>\n",
       "      <td>12</td>\n",
       "      <td>Marca_2</td>\n",
       "      <td>1.39</td>\n",
       "      <td>1</td>\n",
       "      <td>225.0</td>\n",
       "      <td>N/A</td>\n",
       "      <td>0.19</td>\n",
       "      <td>0.1843</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2021-10-21</td>\n",
       "      <td>2021-10-21</td>\n",
       "      <td>NaT</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Large</td>\n",
       "      <td>21275.0</td>\n",
       "      <td>Beja</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7572</th>\n",
       "      <td>289</td>\n",
       "      <td>12</td>\n",
       "      <td>Marca_2</td>\n",
       "      <td>1.39</td>\n",
       "      <td>1</td>\n",
       "      <td>225.0</td>\n",
       "      <td>N/A</td>\n",
       "      <td>0.19</td>\n",
       "      <td>0.1843</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>2021-10-16</td>\n",
       "      <td>2021-10-14</td>\n",
       "      <td>NaT</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Small</td>\n",
       "      <td>342.0</td>\n",
       "      <td>Viana do Castelo</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Idstore Sku    Brand  Oldpvp  Labelqty  Weight Payment_Method  Margin  \\\n",
       "10         1   1  Marca_1    5.23         1   260.0           Card    0.16   \n",
       "875       59   7  Marca_5    2.19         1   131.0           Cash    0.10   \n",
       "955       14   8  Marca_2    1.19         1   174.0           Card    0.15   \n",
       "7564      14  12  Marca_2    1.39         1   225.0            N/A    0.19   \n",
       "7572     289  12  Marca_2    1.39         1   225.0            N/A    0.19   \n",
       "\n",
       "      Profit  Perc_Expiring_Sku Expiring_Date Labelling_Date  Sell_Date  Sold  \\\n",
       "10    0.4176           0.010050    2021-10-03     2021-10-01 2021-10-03   1.0   \n",
       "875   0.1530           0.666667    2021-10-17     2021-10-15 2021-10-16   1.0   \n",
       "955   0.1245           0.200000    2021-10-29     2021-10-28 2021-10-28   1.0   \n",
       "7564  0.1843           0.000000    2021-10-21     2021-10-21        NaT   0.0   \n",
       "7572  0.1843           0.666667    2021-10-16     2021-10-14        NaT   0.0   \n",
       "\n",
       "        Type  Selling_Square_Ft          District  Newpvp  Discount  \n",
       "10     Large             4762.0             Évora     NaN       NaN  \n",
       "875   Medium             6540.0            Guarda     NaN       NaN  \n",
       "955    Large            21275.0              Beja     NaN       NaN  \n",
       "7564   Large            21275.0              Beja     NaN       NaN  \n",
       "7572   Small              342.0  Viana do Castelo     NaN       NaN  "
      ]
     },
     "execution_count": 152,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Filtrar as primeiras 5 linhas onde a coluna 'Discount' contém valores ausentes \n",
    "df[pd.isna(df['Discount'])][:5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "id": "e4b71b7b-34ae-4ca3-a914-e186c7795f80",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Preencher os valores ausentes (NaN) na coluna 'Discount' usando o primeiro valor não nulo (iloc[0]) dentro de cada grupo formado pelas colunas 'Sku', 'Idstore', 'Oldpvp', 'Profit'.\n",
    "def fill_na_copy_discount(X):\n",
    "    X['Discount'] = X.groupby(['Sku','Idstore','Oldpvp','Profit'])['Discount'].transform(lambda x: x.fillna(x.iloc[0]))\n",
    "    return X\n",
    "\n",
    "df = fill_na_copy_discount(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "id": "fdb1e93c-51e0-4ed2-be6b-6047ac5f604c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Idstore</th>\n",
       "      <th>Sku</th>\n",
       "      <th>Brand</th>\n",
       "      <th>Oldpvp</th>\n",
       "      <th>Labelqty</th>\n",
       "      <th>Weight</th>\n",
       "      <th>Payment_Method</th>\n",
       "      <th>Margin</th>\n",
       "      <th>Profit</th>\n",
       "      <th>Perc_Expiring_Sku</th>\n",
       "      <th>Expiring_Date</th>\n",
       "      <th>Labelling_Date</th>\n",
       "      <th>Sell_Date</th>\n",
       "      <th>Sold</th>\n",
       "      <th>Type</th>\n",
       "      <th>Selling_Square_Ft</th>\n",
       "      <th>District</th>\n",
       "      <th>Newpvp</th>\n",
       "      <th>Discount</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Marca_1</td>\n",
       "      <td>5.23</td>\n",
       "      <td>1</td>\n",
       "      <td>260.0</td>\n",
       "      <td>Card</td>\n",
       "      <td>0.16</td>\n",
       "      <td>0.4176</td>\n",
       "      <td>0.010050</td>\n",
       "      <td>2021-10-03</td>\n",
       "      <td>2021-10-01</td>\n",
       "      <td>2021-10-03</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Large</td>\n",
       "      <td>4762.0</td>\n",
       "      <td>Évora</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7578</th>\n",
       "      <td>98</td>\n",
       "      <td>12</td>\n",
       "      <td>Marca_2</td>\n",
       "      <td>1.39</td>\n",
       "      <td>1</td>\n",
       "      <td>225.0</td>\n",
       "      <td>Cash</td>\n",
       "      <td>0.19</td>\n",
       "      <td>0.1843</td>\n",
       "      <td>0.333333</td>\n",
       "      <td>2021-10-19</td>\n",
       "      <td>2021-10-18</td>\n",
       "      <td>2021-10-19</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Medium</td>\n",
       "      <td>3344.0</td>\n",
       "      <td>Faro</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7583</th>\n",
       "      <td>98</td>\n",
       "      <td>12</td>\n",
       "      <td>Marca_2</td>\n",
       "      <td>1.39</td>\n",
       "      <td>1</td>\n",
       "      <td>225.0</td>\n",
       "      <td>Card</td>\n",
       "      <td>0.19</td>\n",
       "      <td>0.1843</td>\n",
       "      <td>0.333333</td>\n",
       "      <td>2021-10-15</td>\n",
       "      <td>2021-10-14</td>\n",
       "      <td>2021-10-14</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Medium</td>\n",
       "      <td>3344.0</td>\n",
       "      <td>Faro</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7585</th>\n",
       "      <td>98</td>\n",
       "      <td>12</td>\n",
       "      <td>Marca_2</td>\n",
       "      <td>1.39</td>\n",
       "      <td>1</td>\n",
       "      <td>225.0</td>\n",
       "      <td>N/A</td>\n",
       "      <td>0.19</td>\n",
       "      <td>0.1843</td>\n",
       "      <td>0.333333</td>\n",
       "      <td>2021-10-15</td>\n",
       "      <td>2021-10-14</td>\n",
       "      <td>NaT</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Medium</td>\n",
       "      <td>3344.0</td>\n",
       "      <td>Faro</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21531</th>\n",
       "      <td>59</td>\n",
       "      <td>61</td>\n",
       "      <td>Marca_2</td>\n",
       "      <td>0.69</td>\n",
       "      <td>1</td>\n",
       "      <td>186.0</td>\n",
       "      <td>Cash</td>\n",
       "      <td>0.13</td>\n",
       "      <td>0.0624</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>2021-10-12</td>\n",
       "      <td>2021-10-10</td>\n",
       "      <td>2021-10-11</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Medium</td>\n",
       "      <td>6540.0</td>\n",
       "      <td>Guarda</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21539</th>\n",
       "      <td>59</td>\n",
       "      <td>61</td>\n",
       "      <td>Marca_2</td>\n",
       "      <td>0.69</td>\n",
       "      <td>1</td>\n",
       "      <td>186.0</td>\n",
       "      <td>N/A</td>\n",
       "      <td>0.13</td>\n",
       "      <td>0.0624</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>2021-10-14</td>\n",
       "      <td>2021-10-12</td>\n",
       "      <td>NaT</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Medium</td>\n",
       "      <td>6540.0</td>\n",
       "      <td>Guarda</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Idstore Sku    Brand  Oldpvp  Labelqty  Weight Payment_Method  Margin  \\\n",
       "10          1   1  Marca_1    5.23         1   260.0           Card    0.16   \n",
       "7578       98  12  Marca_2    1.39         1   225.0           Cash    0.19   \n",
       "7583       98  12  Marca_2    1.39         1   225.0           Card    0.19   \n",
       "7585       98  12  Marca_2    1.39         1   225.0            N/A    0.19   \n",
       "21531      59  61  Marca_2    0.69         1   186.0           Cash    0.13   \n",
       "21539      59  61  Marca_2    0.69         1   186.0            N/A    0.13   \n",
       "\n",
       "       Profit  Perc_Expiring_Sku Expiring_Date Labelling_Date  Sell_Date  \\\n",
       "10     0.4176           0.010050    2021-10-03     2021-10-01 2021-10-03   \n",
       "7578   0.1843           0.333333    2021-10-19     2021-10-18 2021-10-19   \n",
       "7583   0.1843           0.333333    2021-10-15     2021-10-14 2021-10-14   \n",
       "7585   0.1843           0.333333    2021-10-15     2021-10-14        NaT   \n",
       "21531  0.0624           0.666667    2021-10-12     2021-10-10 2021-10-11   \n",
       "21539  0.0624           0.666667    2021-10-14     2021-10-12        NaT   \n",
       "\n",
       "       Sold    Type  Selling_Square_Ft District  Newpvp  Discount  \n",
       "10      1.0   Large             4762.0    Évora     NaN       NaN  \n",
       "7578    1.0  Medium             3344.0     Faro     NaN       NaN  \n",
       "7583    1.0  Medium             3344.0     Faro     NaN       NaN  \n",
       "7585    0.0  Medium             3344.0     Faro     NaN       NaN  \n",
       "21531   1.0  Medium             6540.0   Guarda     NaN       NaN  \n",
       "21539   0.0  Medium             6540.0   Guarda     NaN       NaN  "
      ]
     },
     "execution_count": 154,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Filtrar todas as linhas onde a coluna 'Discount' contém valores ausentes (NaN)\n",
    "df[pd.isna(df['Discount'])]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "094e4486-958d-400d-91dc-cdf927bef52e",
   "metadata": {},
   "source": [
    " <div style=\"background-color: '#006400'; padding: 15px; border: 1px solid #003366\";\">\n",
    "    <a id='new_pvp'></a>\n",
    "    <h3 style=\"color: #003366; margin: 0;\">3.1.1.6.Tratamento Missing Values da variável new_pvp</h3>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 156,
   "id": "5b063b16-7567-43f8-9ad1-496cb602d125",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Idstore</th>\n",
       "      <th>Sku</th>\n",
       "      <th>Brand</th>\n",
       "      <th>Oldpvp</th>\n",
       "      <th>Labelqty</th>\n",
       "      <th>Weight</th>\n",
       "      <th>Payment_Method</th>\n",
       "      <th>Margin</th>\n",
       "      <th>Profit</th>\n",
       "      <th>Perc_Expiring_Sku</th>\n",
       "      <th>Expiring_Date</th>\n",
       "      <th>Labelling_Date</th>\n",
       "      <th>Sell_Date</th>\n",
       "      <th>Sold</th>\n",
       "      <th>Type</th>\n",
       "      <th>Selling_Square_Ft</th>\n",
       "      <th>District</th>\n",
       "      <th>Newpvp</th>\n",
       "      <th>Discount</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Marca_1</td>\n",
       "      <td>5.23</td>\n",
       "      <td>1</td>\n",
       "      <td>260.0</td>\n",
       "      <td>Card</td>\n",
       "      <td>0.16</td>\n",
       "      <td>0.4176</td>\n",
       "      <td>0.010050</td>\n",
       "      <td>2021-10-03</td>\n",
       "      <td>2021-10-01</td>\n",
       "      <td>2021-10-03</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Large</td>\n",
       "      <td>4762.0</td>\n",
       "      <td>Évora</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>875</th>\n",
       "      <td>59</td>\n",
       "      <td>7</td>\n",
       "      <td>Marca_5</td>\n",
       "      <td>2.19</td>\n",
       "      <td>1</td>\n",
       "      <td>131.0</td>\n",
       "      <td>Cash</td>\n",
       "      <td>0.10</td>\n",
       "      <td>0.1530</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>2021-10-17</td>\n",
       "      <td>2021-10-15</td>\n",
       "      <td>2021-10-16</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Medium</td>\n",
       "      <td>6540.0</td>\n",
       "      <td>Guarda</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>955</th>\n",
       "      <td>14</td>\n",
       "      <td>8</td>\n",
       "      <td>Marca_2</td>\n",
       "      <td>1.19</td>\n",
       "      <td>1</td>\n",
       "      <td>174.0</td>\n",
       "      <td>Card</td>\n",
       "      <td>0.15</td>\n",
       "      <td>0.1245</td>\n",
       "      <td>0.200000</td>\n",
       "      <td>2021-10-29</td>\n",
       "      <td>2021-10-28</td>\n",
       "      <td>2021-10-28</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Large</td>\n",
       "      <td>21275.0</td>\n",
       "      <td>Beja</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7564</th>\n",
       "      <td>14</td>\n",
       "      <td>12</td>\n",
       "      <td>Marca_2</td>\n",
       "      <td>1.39</td>\n",
       "      <td>1</td>\n",
       "      <td>225.0</td>\n",
       "      <td>N/A</td>\n",
       "      <td>0.19</td>\n",
       "      <td>0.1843</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2021-10-21</td>\n",
       "      <td>2021-10-21</td>\n",
       "      <td>NaT</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Large</td>\n",
       "      <td>21275.0</td>\n",
       "      <td>Beja</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7572</th>\n",
       "      <td>289</td>\n",
       "      <td>12</td>\n",
       "      <td>Marca_2</td>\n",
       "      <td>1.39</td>\n",
       "      <td>1</td>\n",
       "      <td>225.0</td>\n",
       "      <td>N/A</td>\n",
       "      <td>0.19</td>\n",
       "      <td>0.1843</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>2021-10-16</td>\n",
       "      <td>2021-10-14</td>\n",
       "      <td>NaT</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Small</td>\n",
       "      <td>342.0</td>\n",
       "      <td>Viana do Castelo</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Idstore Sku    Brand  Oldpvp  Labelqty  Weight Payment_Method  Margin  \\\n",
       "10         1   1  Marca_1    5.23         1   260.0           Card    0.16   \n",
       "875       59   7  Marca_5    2.19         1   131.0           Cash    0.10   \n",
       "955       14   8  Marca_2    1.19         1   174.0           Card    0.15   \n",
       "7564      14  12  Marca_2    1.39         1   225.0            N/A    0.19   \n",
       "7572     289  12  Marca_2    1.39         1   225.0            N/A    0.19   \n",
       "\n",
       "      Profit  Perc_Expiring_Sku Expiring_Date Labelling_Date  Sell_Date  Sold  \\\n",
       "10    0.4176           0.010050    2021-10-03     2021-10-01 2021-10-03   1.0   \n",
       "875   0.1530           0.666667    2021-10-17     2021-10-15 2021-10-16   1.0   \n",
       "955   0.1245           0.200000    2021-10-29     2021-10-28 2021-10-28   1.0   \n",
       "7564  0.1843           0.000000    2021-10-21     2021-10-21        NaT   0.0   \n",
       "7572  0.1843           0.666667    2021-10-16     2021-10-14        NaT   0.0   \n",
       "\n",
       "        Type  Selling_Square_Ft          District  Newpvp  Discount  \n",
       "10     Large             4762.0             Évora     NaN       NaN  \n",
       "875   Medium             6540.0            Guarda     NaN       0.3  \n",
       "955    Large            21275.0              Beja     NaN       0.3  \n",
       "7564   Large            21275.0              Beja     NaN       0.3  \n",
       "7572   Small              342.0  Viana do Castelo     NaN       0.3  "
      ]
     },
     "execution_count": 156,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Filtrar todas as linhas onde a coluna 'Newpvp' contém valores ausentes (NaN)\n",
    "df[pd.isna(df['Newpvp'])][:5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 157,
   "id": "9abc03f8-1347-46e6-9651-cc829f5c119f",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Preencher os valores ausentes (NaN) na coluna 'Newpvp' com o primeiro valor não nulo dentro de cada grupo formado pelas colunas 'Sku', 'Idstore', 'Oldpvp', 'Profit'\n",
    "def fill_na_copy_newpvp(X):\n",
    "    X['Newpvp'] = X.groupby(['Sku','Idstore','Oldpvp','Profit'])['Newpvp'].transform(lambda x: x.fillna(x.iloc[0]))\n",
    "    return X\n",
    "\n",
    "df = fill_na_copy_newpvp(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 158,
   "id": "be8e6a73-17c8-43b1-a6cb-acad90c66ced",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Idstore</th>\n",
       "      <th>Sku</th>\n",
       "      <th>Brand</th>\n",
       "      <th>Oldpvp</th>\n",
       "      <th>Labelqty</th>\n",
       "      <th>Weight</th>\n",
       "      <th>Payment_Method</th>\n",
       "      <th>Margin</th>\n",
       "      <th>Profit</th>\n",
       "      <th>Perc_Expiring_Sku</th>\n",
       "      <th>Expiring_Date</th>\n",
       "      <th>Labelling_Date</th>\n",
       "      <th>Sell_Date</th>\n",
       "      <th>Sold</th>\n",
       "      <th>Type</th>\n",
       "      <th>Selling_Square_Ft</th>\n",
       "      <th>District</th>\n",
       "      <th>Newpvp</th>\n",
       "      <th>Discount</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Marca_1</td>\n",
       "      <td>5.23</td>\n",
       "      <td>1</td>\n",
       "      <td>260.0</td>\n",
       "      <td>Card</td>\n",
       "      <td>0.16</td>\n",
       "      <td>0.4176</td>\n",
       "      <td>0.010050</td>\n",
       "      <td>2021-10-03</td>\n",
       "      <td>2021-10-01</td>\n",
       "      <td>2021-10-03</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Large</td>\n",
       "      <td>4762.0</td>\n",
       "      <td>Évora</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7578</th>\n",
       "      <td>98</td>\n",
       "      <td>12</td>\n",
       "      <td>Marca_2</td>\n",
       "      <td>1.39</td>\n",
       "      <td>1</td>\n",
       "      <td>225.0</td>\n",
       "      <td>Cash</td>\n",
       "      <td>0.19</td>\n",
       "      <td>0.1843</td>\n",
       "      <td>0.333333</td>\n",
       "      <td>2021-10-19</td>\n",
       "      <td>2021-10-18</td>\n",
       "      <td>2021-10-19</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Medium</td>\n",
       "      <td>3344.0</td>\n",
       "      <td>Faro</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7583</th>\n",
       "      <td>98</td>\n",
       "      <td>12</td>\n",
       "      <td>Marca_2</td>\n",
       "      <td>1.39</td>\n",
       "      <td>1</td>\n",
       "      <td>225.0</td>\n",
       "      <td>Card</td>\n",
       "      <td>0.19</td>\n",
       "      <td>0.1843</td>\n",
       "      <td>0.333333</td>\n",
       "      <td>2021-10-15</td>\n",
       "      <td>2021-10-14</td>\n",
       "      <td>2021-10-14</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Medium</td>\n",
       "      <td>3344.0</td>\n",
       "      <td>Faro</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7585</th>\n",
       "      <td>98</td>\n",
       "      <td>12</td>\n",
       "      <td>Marca_2</td>\n",
       "      <td>1.39</td>\n",
       "      <td>1</td>\n",
       "      <td>225.0</td>\n",
       "      <td>N/A</td>\n",
       "      <td>0.19</td>\n",
       "      <td>0.1843</td>\n",
       "      <td>0.333333</td>\n",
       "      <td>2021-10-15</td>\n",
       "      <td>2021-10-14</td>\n",
       "      <td>NaT</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Medium</td>\n",
       "      <td>3344.0</td>\n",
       "      <td>Faro</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21531</th>\n",
       "      <td>59</td>\n",
       "      <td>61</td>\n",
       "      <td>Marca_2</td>\n",
       "      <td>0.69</td>\n",
       "      <td>1</td>\n",
       "      <td>186.0</td>\n",
       "      <td>Cash</td>\n",
       "      <td>0.13</td>\n",
       "      <td>0.0624</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>2021-10-12</td>\n",
       "      <td>2021-10-10</td>\n",
       "      <td>2021-10-11</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Medium</td>\n",
       "      <td>6540.0</td>\n",
       "      <td>Guarda</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21539</th>\n",
       "      <td>59</td>\n",
       "      <td>61</td>\n",
       "      <td>Marca_2</td>\n",
       "      <td>0.69</td>\n",
       "      <td>1</td>\n",
       "      <td>186.0</td>\n",
       "      <td>N/A</td>\n",
       "      <td>0.13</td>\n",
       "      <td>0.0624</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>2021-10-14</td>\n",
       "      <td>2021-10-12</td>\n",
       "      <td>NaT</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Medium</td>\n",
       "      <td>6540.0</td>\n",
       "      <td>Guarda</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Idstore Sku    Brand  Oldpvp  Labelqty  Weight Payment_Method  Margin  \\\n",
       "10          1   1  Marca_1    5.23         1   260.0           Card    0.16   \n",
       "7578       98  12  Marca_2    1.39         1   225.0           Cash    0.19   \n",
       "7583       98  12  Marca_2    1.39         1   225.0           Card    0.19   \n",
       "7585       98  12  Marca_2    1.39         1   225.0            N/A    0.19   \n",
       "21531      59  61  Marca_2    0.69         1   186.0           Cash    0.13   \n",
       "21539      59  61  Marca_2    0.69         1   186.0            N/A    0.13   \n",
       "\n",
       "       Profit  Perc_Expiring_Sku Expiring_Date Labelling_Date  Sell_Date  \\\n",
       "10     0.4176           0.010050    2021-10-03     2021-10-01 2021-10-03   \n",
       "7578   0.1843           0.333333    2021-10-19     2021-10-18 2021-10-19   \n",
       "7583   0.1843           0.333333    2021-10-15     2021-10-14 2021-10-14   \n",
       "7585   0.1843           0.333333    2021-10-15     2021-10-14        NaT   \n",
       "21531  0.0624           0.666667    2021-10-12     2021-10-10 2021-10-11   \n",
       "21539  0.0624           0.666667    2021-10-14     2021-10-12        NaT   \n",
       "\n",
       "       Sold    Type  Selling_Square_Ft District  Newpvp  Discount  \n",
       "10      1.0   Large             4762.0    Évora     NaN       NaN  \n",
       "7578    1.0  Medium             3344.0     Faro     NaN       NaN  \n",
       "7583    1.0  Medium             3344.0     Faro     NaN       NaN  \n",
       "7585    0.0  Medium             3344.0     Faro     NaN       NaN  \n",
       "21531   1.0  Medium             6540.0   Guarda     NaN       NaN  \n",
       "21539   0.0  Medium             6540.0   Guarda     NaN       NaN  "
      ]
     },
     "execution_count": 158,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Filtrar todas as linhas onde a coluna 'Newpvp' contém valores ausentes (NaN)\n",
    "df[pd.isna(df['Newpvp'])]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "id": "9cd902af-f243-4331-9e3d-6eaab1e00c38",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Preencher os valores ausentes (NaN) nas colunas 'Newpvp' e 'Discount' com base em cálculos matemáticos.\n",
    "def fill_na_copy_newpvp_discount(X):\n",
    "    X['Newpvp'] = X['Newpvp'].transform(lambda x: x.fillna(X['Profit']/X['Margin']))\n",
    "    X['Discount'] = X['Discount'].transform(lambda x: x.fillna(round(1-(X['Newpvp']/X['Oldpvp']),2)))\n",
    "    return X"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 160,
   "id": "56d0f197-b6ec-4262-b6ae-a587d72ae09a",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Aplicar a função ao DataFrame \n",
    "df=fill_na_copy_newpvp_discount(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "id": "d52c2d31-c5c9-422b-afc7-55b8b26bc068",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Idstore</th>\n",
       "      <th>Sku</th>\n",
       "      <th>Brand</th>\n",
       "      <th>Oldpvp</th>\n",
       "      <th>Labelqty</th>\n",
       "      <th>Weight</th>\n",
       "      <th>Payment_Method</th>\n",
       "      <th>Margin</th>\n",
       "      <th>Profit</th>\n",
       "      <th>Perc_Expiring_Sku</th>\n",
       "      <th>Expiring_Date</th>\n",
       "      <th>Labelling_Date</th>\n",
       "      <th>Sell_Date</th>\n",
       "      <th>Sold</th>\n",
       "      <th>Type</th>\n",
       "      <th>Selling_Square_Ft</th>\n",
       "      <th>District</th>\n",
       "      <th>Newpvp</th>\n",
       "      <th>Discount</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Marca_1</td>\n",
       "      <td>4.22</td>\n",
       "      <td>1</td>\n",
       "      <td>260.0</td>\n",
       "      <td>Card</td>\n",
       "      <td>0.16</td>\n",
       "      <td>0.3376</td>\n",
       "      <td>0.010050</td>\n",
       "      <td>2021-10-03</td>\n",
       "      <td>2021-10-01</td>\n",
       "      <td>2021-10-02</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Large</td>\n",
       "      <td>4762.0</td>\n",
       "      <td>Évora</td>\n",
       "      <td>2.11</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Marca_1</td>\n",
       "      <td>3.96</td>\n",
       "      <td>1</td>\n",
       "      <td>260.0</td>\n",
       "      <td>N/A</td>\n",
       "      <td>0.16</td>\n",
       "      <td>0.3168</td>\n",
       "      <td>0.005025</td>\n",
       "      <td>2021-10-02</td>\n",
       "      <td>2021-10-01</td>\n",
       "      <td>NaT</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Large</td>\n",
       "      <td>4762.0</td>\n",
       "      <td>Évora</td>\n",
       "      <td>1.98</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Marca_1</td>\n",
       "      <td>4.74</td>\n",
       "      <td>1</td>\n",
       "      <td>260.0</td>\n",
       "      <td>Cash</td>\n",
       "      <td>0.16</td>\n",
       "      <td>0.3792</td>\n",
       "      <td>0.010050</td>\n",
       "      <td>2021-10-03</td>\n",
       "      <td>2021-10-01</td>\n",
       "      <td>2021-10-03</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Large</td>\n",
       "      <td>4762.0</td>\n",
       "      <td>Évora</td>\n",
       "      <td>2.37</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Marca_1</td>\n",
       "      <td>4.20</td>\n",
       "      <td>1</td>\n",
       "      <td>260.0</td>\n",
       "      <td>Card</td>\n",
       "      <td>0.16</td>\n",
       "      <td>0.3360</td>\n",
       "      <td>0.010050</td>\n",
       "      <td>2021-10-03</td>\n",
       "      <td>2021-10-01</td>\n",
       "      <td>2021-10-02</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Large</td>\n",
       "      <td>4762.0</td>\n",
       "      <td>Évora</td>\n",
       "      <td>2.10</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Marca_1</td>\n",
       "      <td>4.62</td>\n",
       "      <td>1</td>\n",
       "      <td>260.0</td>\n",
       "      <td>Cash</td>\n",
       "      <td>0.16</td>\n",
       "      <td>0.3696</td>\n",
       "      <td>0.010050</td>\n",
       "      <td>2021-10-03</td>\n",
       "      <td>2021-10-01</td>\n",
       "      <td>2021-10-03</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Large</td>\n",
       "      <td>4762.0</td>\n",
       "      <td>Évora</td>\n",
       "      <td>2.31</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Idstore Sku    Brand  Oldpvp  Labelqty  Weight Payment_Method  Margin  \\\n",
       "0       1   1  Marca_1    4.22         1   260.0           Card    0.16   \n",
       "1       1   1  Marca_1    3.96         1   260.0            N/A    0.16   \n",
       "2       1   1  Marca_1    4.74         1   260.0           Cash    0.16   \n",
       "3       1   1  Marca_1    4.20         1   260.0           Card    0.16   \n",
       "4       1   1  Marca_1    4.62         1   260.0           Cash    0.16   \n",
       "\n",
       "   Profit  Perc_Expiring_Sku Expiring_Date Labelling_Date  Sell_Date  Sold  \\\n",
       "0  0.3376           0.010050    2021-10-03     2021-10-01 2021-10-02   1.0   \n",
       "1  0.3168           0.005025    2021-10-02     2021-10-01        NaT   0.0   \n",
       "2  0.3792           0.010050    2021-10-03     2021-10-01 2021-10-03   1.0   \n",
       "3  0.3360           0.010050    2021-10-03     2021-10-01 2021-10-02   1.0   \n",
       "4  0.3696           0.010050    2021-10-03     2021-10-01 2021-10-03   1.0   \n",
       "\n",
       "    Type  Selling_Square_Ft District  Newpvp  Discount  \n",
       "0  Large             4762.0    Évora    2.11       0.5  \n",
       "1  Large             4762.0    Évora    1.98       0.5  \n",
       "2  Large             4762.0    Évora    2.37       0.5  \n",
       "3  Large             4762.0    Évora    2.10       0.5  \n",
       "4  Large             4762.0    Évora    2.31       0.5  "
      ]
     },
     "execution_count": 161,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Filtrar as primeiras 5 linhas do DataFrame onde Sku é '1' e Idstore é '1'.\n",
    "df[(df['Sku']=='1')&(df['Idstore']=='1')][:5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 162,
   "id": "34a391e1-f7f6-478b-82ef-51e1c2f25628",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Transformar a variável categórica \"Brand\" numa variável numérica\n",
    "\n",
    "df['Brand']=df['Brand'].str.replace(\"Marca_\", \"\", regex=True).astype(int)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a69d2c06-780d-4dd1-803c-58bf27eaa6a9",
   "metadata": {},
   "source": [
    "<div style=\"background-color: '#006400'; padding: 15px; border: 1px solid #003366\";\">\n",
    "    <a id='dummies'></a>\n",
    "    <h2 style=\"color: #003366; margin: 0;\">3.2. Criação de Variáveis Dummies</h2>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 164,
   "id": "2d11a05f-4205-4d98-9dd4-fe945802d835",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Cria dummies apenas para 'col1' e 'col2'\n",
    "df_dummies = pd.get_dummies(df[['District', 'Type']], drop_first=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 289,
   "id": "771423cd-eab0-4344-9a10-5fa94c1989e7",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Concatena as dummies com as outras colunas do DataFrame original\n",
    "df_final = pd.concat([df, df_dummies], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 291,
   "id": "c18842b2-347c-4efb-a3f5-ab90c5752446",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Idstore', 'Sku', 'Brand', 'Oldpvp', 'Labelqty', 'Weight',\n",
       "       'Payment_Method', 'Margin', 'Profit', 'Perc_Expiring_Sku',\n",
       "       'Expiring_Date', 'Labelling_Date', 'Sell_Date', 'Sold', 'Type',\n",
       "       'Selling_Square_Ft', 'District', 'Newpvp', 'Discount', 'District_Beja',\n",
       "       'District_Braga', 'District_Bragança', 'District_Castelo Branco',\n",
       "       'District_Coimbra', 'District_Faro', 'District_Guarda',\n",
       "       'District_Leiria', 'District_Lisboa', 'District_Portalegre',\n",
       "       'District_Porto', 'District_Santarém', 'District_Setúbal',\n",
       "       'District_Viana do Castelo', 'District_Vila Real', 'District_Viseu',\n",
       "       'District_Évora', 'Type_Medium', 'Type_Small'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 291,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_final.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5b49a64d-9481-45f8-8ac5-dbf3394ab607",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block\" style=\"background-color:#AEC6CF; border: 1px solid #003366\">\n",
    "<a id='preprocessing'>\n",
    "<font color = '#003366'> \n",
    "    \n",
    "# 4. Exportar ficheiro csv</font>\n",
    "</a>\n",
    "    \n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 297,
   "id": "667c40a0-70ce-4b50-bb34-f4b8c5b98fe4",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_final[['Idstore', 'Sku', 'Brand', 'Oldpvp', 'Labelqty', 'Weight',\n",
    "       'Payment_Method', 'Margin', 'Profit', 'Perc_Expiring_Sku',\n",
    "       'Expiring_Date', 'Labelling_Date', 'Sell_Date', 'Sold',\n",
    "       'Selling_Square_Ft', 'Newpvp', 'Discount', 'District_Beja',\n",
    "       'District_Braga', 'District_Bragança', 'District_Castelo Branco',\n",
    "       'District_Coimbra', 'District_Faro', 'District_Guarda',\n",
    "       'District_Leiria', 'District_Lisboa', 'District_Portalegre',\n",
    "       'District_Porto', 'District_Santarém', 'District_Setúbal',\n",
    "       'District_Viana do Castelo', 'District_Vila Real', 'District_Viseu',\n",
    "       'District_Évora', 'Type_Medium', 'Type_Small']].to_csv(\"Data_labels_clean_dummies.csv\",sep=';')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 298,
   "id": "3e41b251-7fa4-4acf-b611-466120456230",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_final[['Idstore', 'Sku', 'Brand', 'Oldpvp', 'Labelqty', 'Weight',\n",
    "       'Payment_Method', 'Margin', 'Profit', 'Perc_Expiring_Sku',\n",
    "       'Expiring_Date', 'Labelling_Date', 'Sell_Date', 'Sold', 'Type',\n",
    "       'Selling_Square_Ft', 'District', 'Newpvp', 'Discount',]].to_csv(\"Data_labels_clean.csv\",sep=';')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8c3641cf-6e9f-48a2-9731-7afeced3826f",
   "metadata": {},
   "source": [
    "Dividimos o dataset em dois diferentes para durante o feature selection conseguirmos analisar bem as variáveis mais importantes, e se as variáveis District e Type forem escolhidas como importantes, serão utilizadas as variáveis dummies para executar os modelos"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bdc61837-febf-4baa-a491-8c2d9f935202",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
